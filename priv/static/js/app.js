/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/js/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../deps/phoenix/priv/static/phoenix.js":
/*!**********************************************!*\
  !*** ../deps/phoenix/priv/static/phoenix.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var Phoenix = (() => {\n  var __defProp = Object.defineProperty;\n\n  var __markAsModule = target => __defProp(target, \"__esModule\", {\n    value: true\n  });\n\n  var __export = (target, all) => {\n    __markAsModule(target);\n\n    for (var name in all) __defProp(target, name, {\n      get: all[name],\n      enumerable: true\n    });\n  }; // js/phoenix/index.js\n\n\n  var phoenix_exports = {};\n\n  __export(phoenix_exports, {\n    Channel: () => Channel,\n    LongPoll: () => LongPoll,\n    Presence: () => Presence,\n    Serializer: () => serializer_default,\n    Socket: () => Socket\n  }); // js/phoenix/utils.js\n\n\n  var closure = value => {\n    if (typeof value === \"function\") {\n      return value;\n    } else {\n      let closure2 = function () {\n        return value;\n      };\n\n      return closure2;\n    }\n  }; // js/phoenix/constants.js\n\n\n  var globalSelf = typeof self !== \"undefined\" ? self : null;\n  var phxWindow = typeof window !== \"undefined\" ? window : null;\n  var global = globalSelf || phxWindow || void 0;\n  var DEFAULT_VSN = \"2.0.0\";\n  var SOCKET_STATES = {\n    connecting: 0,\n    open: 1,\n    closing: 2,\n    closed: 3\n  };\n  var DEFAULT_TIMEOUT = 1e4;\n  var WS_CLOSE_NORMAL = 1e3;\n  var CHANNEL_STATES = {\n    closed: \"closed\",\n    errored: \"errored\",\n    joined: \"joined\",\n    joining: \"joining\",\n    leaving: \"leaving\"\n  };\n  var CHANNEL_EVENTS = {\n    close: \"phx_close\",\n    error: \"phx_error\",\n    join: \"phx_join\",\n    reply: \"phx_reply\",\n    leave: \"phx_leave\"\n  };\n  var TRANSPORTS = {\n    longpoll: \"longpoll\",\n    websocket: \"websocket\"\n  };\n  var XHR_STATES = {\n    complete: 4\n  }; // js/phoenix/push.js\n\n  var Push = class {\n    constructor(channel, event, payload, timeout) {\n      this.channel = channel;\n      this.event = event;\n\n      this.payload = payload || function () {\n        return {};\n      };\n\n      this.receivedResp = null;\n      this.timeout = timeout;\n      this.timeoutTimer = null;\n      this.recHooks = [];\n      this.sent = false;\n    }\n\n    resend(timeout) {\n      this.timeout = timeout;\n      this.reset();\n      this.send();\n    }\n\n    send() {\n      if (this.hasReceived(\"timeout\")) {\n        return;\n      }\n\n      this.startTimeout();\n      this.sent = true;\n      this.channel.socket.push({\n        topic: this.channel.topic,\n        event: this.event,\n        payload: this.payload(),\n        ref: this.ref,\n        join_ref: this.channel.joinRef()\n      });\n    }\n\n    receive(status, callback) {\n      if (this.hasReceived(status)) {\n        callback(this.receivedResp.response);\n      }\n\n      this.recHooks.push({\n        status,\n        callback\n      });\n      return this;\n    }\n\n    reset() {\n      this.cancelRefEvent();\n      this.ref = null;\n      this.refEvent = null;\n      this.receivedResp = null;\n      this.sent = false;\n    }\n\n    matchReceive({\n      status,\n      response,\n      _ref\n    }) {\n      this.recHooks.filter(h => h.status === status).forEach(h => h.callback(response));\n    }\n\n    cancelRefEvent() {\n      if (!this.refEvent) {\n        return;\n      }\n\n      this.channel.off(this.refEvent);\n    }\n\n    cancelTimeout() {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = null;\n    }\n\n    startTimeout() {\n      if (this.timeoutTimer) {\n        this.cancelTimeout();\n      }\n\n      this.ref = this.channel.socket.makeRef();\n      this.refEvent = this.channel.replyEventName(this.ref);\n      this.channel.on(this.refEvent, payload => {\n        this.cancelRefEvent();\n        this.cancelTimeout();\n        this.receivedResp = payload;\n        this.matchReceive(payload);\n      });\n      this.timeoutTimer = setTimeout(() => {\n        this.trigger(\"timeout\", {});\n      }, this.timeout);\n    }\n\n    hasReceived(status) {\n      return this.receivedResp && this.receivedResp.status === status;\n    }\n\n    trigger(status, response) {\n      this.channel.trigger(this.refEvent, {\n        status,\n        response\n      });\n    }\n\n  }; // js/phoenix/timer.js\n\n  var Timer = class {\n    constructor(callback, timerCalc) {\n      this.callback = callback;\n      this.timerCalc = timerCalc;\n      this.timer = null;\n      this.tries = 0;\n    }\n\n    reset() {\n      this.tries = 0;\n      clearTimeout(this.timer);\n    }\n\n    scheduleTimeout() {\n      clearTimeout(this.timer);\n      this.timer = setTimeout(() => {\n        this.tries = this.tries + 1;\n        this.callback();\n      }, this.timerCalc(this.tries + 1));\n    }\n\n  }; // js/phoenix/channel.js\n\n  var Channel = class {\n    constructor(topic, params, socket) {\n      this.state = CHANNEL_STATES.closed;\n      this.topic = topic;\n      this.params = closure(params || {});\n      this.socket = socket;\n      this.bindings = [];\n      this.bindingRef = 0;\n      this.timeout = this.socket.timeout;\n      this.joinedOnce = false;\n      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n      this.pushBuffer = [];\n      this.stateChangeRefs = [];\n      this.rejoinTimer = new Timer(() => {\n        if (this.socket.isConnected()) {\n          this.rejoin();\n        }\n      }, this.socket.rejoinAfterMs);\n      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));\n      this.stateChangeRefs.push(this.socket.onOpen(() => {\n        this.rejoinTimer.reset();\n\n        if (this.isErrored()) {\n          this.rejoin();\n        }\n      }));\n      this.joinPush.receive(\"ok\", () => {\n        this.state = CHANNEL_STATES.joined;\n        this.rejoinTimer.reset();\n        this.pushBuffer.forEach(pushEvent => pushEvent.send());\n        this.pushBuffer = [];\n      });\n      this.joinPush.receive(\"error\", () => {\n        this.state = CHANNEL_STATES.errored;\n\n        if (this.socket.isConnected()) {\n          this.rejoinTimer.scheduleTimeout();\n        }\n      });\n      this.onClose(() => {\n        this.rejoinTimer.reset();\n        if (this.socket.hasLogger()) this.socket.log(\"channel\", `close ${this.topic} ${this.joinRef()}`);\n        this.state = CHANNEL_STATES.closed;\n        this.socket.remove(this);\n      });\n      this.onError(reason => {\n        if (this.socket.hasLogger()) this.socket.log(\"channel\", `error ${this.topic}`, reason);\n\n        if (this.isJoining()) {\n          this.joinPush.reset();\n        }\n\n        this.state = CHANNEL_STATES.errored;\n\n        if (this.socket.isConnected()) {\n          this.rejoinTimer.scheduleTimeout();\n        }\n      });\n      this.joinPush.receive(\"timeout\", () => {\n        if (this.socket.hasLogger()) this.socket.log(\"channel\", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);\n        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);\n        leavePush.send();\n        this.state = CHANNEL_STATES.errored;\n        this.joinPush.reset();\n\n        if (this.socket.isConnected()) {\n          this.rejoinTimer.scheduleTimeout();\n        }\n      });\n      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {\n        this.trigger(this.replyEventName(ref), payload);\n      });\n    }\n\n    join(timeout = this.timeout) {\n      if (this.joinedOnce) {\n        throw new Error(\"tried to join multiple times. 'join' can only be called a single time per channel instance\");\n      } else {\n        this.timeout = timeout;\n        this.joinedOnce = true;\n        this.rejoin();\n        return this.joinPush;\n      }\n    }\n\n    onClose(callback) {\n      this.on(CHANNEL_EVENTS.close, callback);\n    }\n\n    onError(callback) {\n      return this.on(CHANNEL_EVENTS.error, reason => callback(reason));\n    }\n\n    on(event, callback) {\n      let ref = this.bindingRef++;\n      this.bindings.push({\n        event,\n        ref,\n        callback\n      });\n      return ref;\n    }\n\n    off(event, ref) {\n      this.bindings = this.bindings.filter(bind => {\n        return !(bind.event === event && (typeof ref === \"undefined\" || ref === bind.ref));\n      });\n    }\n\n    canPush() {\n      return this.socket.isConnected() && this.isJoined();\n    }\n\n    push(event, payload, timeout = this.timeout) {\n      payload = payload || {};\n\n      if (!this.joinedOnce) {\n        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);\n      }\n\n      let pushEvent = new Push(this, event, function () {\n        return payload;\n      }, timeout);\n\n      if (this.canPush()) {\n        pushEvent.send();\n      } else {\n        pushEvent.startTimeout();\n        this.pushBuffer.push(pushEvent);\n      }\n\n      return pushEvent;\n    }\n\n    leave(timeout = this.timeout) {\n      this.rejoinTimer.reset();\n      this.joinPush.cancelTimeout();\n      this.state = CHANNEL_STATES.leaving;\n\n      let onClose = () => {\n        if (this.socket.hasLogger()) this.socket.log(\"channel\", `leave ${this.topic}`);\n        this.trigger(CHANNEL_EVENTS.close, \"leave\");\n      };\n\n      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);\n      leavePush.receive(\"ok\", () => onClose()).receive(\"timeout\", () => onClose());\n      leavePush.send();\n\n      if (!this.canPush()) {\n        leavePush.trigger(\"ok\", {});\n      }\n\n      return leavePush;\n    }\n\n    onMessage(_event, payload, _ref) {\n      return payload;\n    }\n\n    isMember(topic, event, payload, joinRef) {\n      if (this.topic !== topic) {\n        return false;\n      }\n\n      if (joinRef && joinRef !== this.joinRef()) {\n        if (this.socket.hasLogger()) this.socket.log(\"channel\", \"dropping outdated message\", {\n          topic,\n          event,\n          payload,\n          joinRef\n        });\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n    joinRef() {\n      return this.joinPush.ref;\n    }\n\n    rejoin(timeout = this.timeout) {\n      if (this.isLeaving()) {\n        return;\n      }\n\n      this.socket.leaveOpenTopic(this.topic);\n      this.state = CHANNEL_STATES.joining;\n      this.joinPush.resend(timeout);\n    }\n\n    trigger(event, payload, ref, joinRef) {\n      let handledPayload = this.onMessage(event, payload, ref, joinRef);\n\n      if (payload && !handledPayload) {\n        throw new Error(\"channel onMessage callbacks must return the payload, modified or unmodified\");\n      }\n\n      let eventBindings = this.bindings.filter(bind => bind.event === event);\n\n      for (let i = 0; i < eventBindings.length; i++) {\n        let bind = eventBindings[i];\n        bind.callback(handledPayload, ref, joinRef || this.joinRef());\n      }\n    }\n\n    replyEventName(ref) {\n      return `chan_reply_${ref}`;\n    }\n\n    isClosed() {\n      return this.state === CHANNEL_STATES.closed;\n    }\n\n    isErrored() {\n      return this.state === CHANNEL_STATES.errored;\n    }\n\n    isJoined() {\n      return this.state === CHANNEL_STATES.joined;\n    }\n\n    isJoining() {\n      return this.state === CHANNEL_STATES.joining;\n    }\n\n    isLeaving() {\n      return this.state === CHANNEL_STATES.leaving;\n    }\n\n  }; // js/phoenix/ajax.js\n\n  var Ajax = class {\n    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {\n      if (global.XDomainRequest) {\n        let req = new global.XDomainRequest();\n        this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);\n      } else {\n        let req = new global.XMLHttpRequest();\n        this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);\n      }\n    }\n\n    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {\n      req.timeout = timeout;\n      req.open(method, endPoint);\n\n      req.onload = () => {\n        let response = this.parseJSON(req.responseText);\n        callback && callback(response);\n      };\n\n      if (ontimeout) {\n        req.ontimeout = ontimeout;\n      }\n\n      req.onprogress = () => {};\n\n      req.send(body);\n    }\n\n    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {\n      req.open(method, endPoint, true);\n      req.timeout = timeout;\n      req.setRequestHeader(\"Content-Type\", accept);\n\n      req.onerror = () => {\n        callback && callback(null);\n      };\n\n      req.onreadystatechange = () => {\n        if (req.readyState === XHR_STATES.complete && callback) {\n          let response = this.parseJSON(req.responseText);\n          callback(response);\n        }\n      };\n\n      if (ontimeout) {\n        req.ontimeout = ontimeout;\n      }\n\n      req.send(body);\n    }\n\n    static parseJSON(resp) {\n      if (!resp || resp === \"\") {\n        return null;\n      }\n\n      try {\n        return JSON.parse(resp);\n      } catch (e) {\n        console && console.log(\"failed to parse JSON response\", resp);\n        return null;\n      }\n    }\n\n    static serialize(obj, parentKey) {\n      let queryStr = [];\n\n      for (var key in obj) {\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue;\n        }\n\n        let paramKey = parentKey ? `${parentKey}[${key}]` : key;\n        let paramVal = obj[key];\n\n        if (typeof paramVal === \"object\") {\n          queryStr.push(this.serialize(paramVal, paramKey));\n        } else {\n          queryStr.push(encodeURIComponent(paramKey) + \"=\" + encodeURIComponent(paramVal));\n        }\n      }\n\n      return queryStr.join(\"&\");\n    }\n\n    static appendParams(url, params) {\n      if (Object.keys(params).length === 0) {\n        return url;\n      }\n\n      let prefix = url.match(/\\?/) ? \"&\" : \"?\";\n      return `${url}${prefix}${this.serialize(params)}`;\n    }\n\n  }; // js/phoenix/longpoll.js\n\n  var LongPoll = class {\n    constructor(endPoint) {\n      this.endPoint = null;\n      this.token = null;\n      this.skipHeartbeat = true;\n\n      this.onopen = function () {};\n\n      this.onerror = function () {};\n\n      this.onmessage = function () {};\n\n      this.onclose = function () {};\n\n      this.pollEndpoint = this.normalizeEndpoint(endPoint);\n      this.readyState = SOCKET_STATES.connecting;\n      this.poll();\n    }\n\n    normalizeEndpoint(endPoint) {\n      return endPoint.replace(\"ws://\", \"http://\").replace(\"wss://\", \"https://\").replace(new RegExp(\"(.*)/\" + TRANSPORTS.websocket), \"$1/\" + TRANSPORTS.longpoll);\n    }\n\n    endpointURL() {\n      return Ajax.appendParams(this.pollEndpoint, {\n        token: this.token\n      });\n    }\n\n    closeAndRetry() {\n      this.close();\n      this.readyState = SOCKET_STATES.connecting;\n    }\n\n    ontimeout() {\n      this.onerror(\"timeout\");\n      this.closeAndRetry();\n    }\n\n    poll() {\n      if (!(this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting)) {\n        return;\n      }\n\n      Ajax.request(\"GET\", this.endpointURL(), \"application/json\", null, this.timeout, this.ontimeout.bind(this), resp => {\n        if (resp) {\n          var {\n            status,\n            token,\n            messages\n          } = resp;\n          this.token = token;\n        } else {\n          status = 0;\n        }\n\n        switch (status) {\n          case 200:\n            messages.forEach(msg => {\n              setTimeout(() => {\n                this.onmessage({\n                  data: msg\n                });\n              }, 0);\n            });\n            this.poll();\n            break;\n\n          case 204:\n            this.poll();\n            break;\n\n          case 410:\n            this.readyState = SOCKET_STATES.open;\n            this.onopen();\n            this.poll();\n            break;\n\n          case 403:\n            this.onerror();\n            this.close();\n            break;\n\n          case 0:\n          case 500:\n            this.onerror();\n            this.closeAndRetry();\n            break;\n\n          default:\n            throw new Error(`unhandled poll status ${status}`);\n        }\n      });\n    }\n\n    send(body) {\n      Ajax.request(\"POST\", this.endpointURL(), \"application/json\", body, this.timeout, this.onerror.bind(this, \"timeout\"), resp => {\n        if (!resp || resp.status !== 200) {\n          this.onerror(resp && resp.status);\n          this.closeAndRetry();\n        }\n      });\n    }\n\n    close(_code, _reason) {\n      this.readyState = SOCKET_STATES.closed;\n      this.onclose();\n    }\n\n  }; // js/phoenix/presence.js\n\n  var Presence = class {\n    constructor(channel, opts = {}) {\n      let events = opts.events || {\n        state: \"presence_state\",\n        diff: \"presence_diff\"\n      };\n      this.state = {};\n      this.pendingDiffs = [];\n      this.channel = channel;\n      this.joinRef = null;\n      this.caller = {\n        onJoin: function () {},\n        onLeave: function () {},\n        onSync: function () {}\n      };\n      this.channel.on(events.state, newState => {\n        let {\n          onJoin,\n          onLeave,\n          onSync\n        } = this.caller;\n        this.joinRef = this.channel.joinRef();\n        this.state = Presence.syncState(this.state, newState, onJoin, onLeave);\n        this.pendingDiffs.forEach(diff => {\n          this.state = Presence.syncDiff(this.state, diff, onJoin, onLeave);\n        });\n        this.pendingDiffs = [];\n        onSync();\n      });\n      this.channel.on(events.diff, diff => {\n        let {\n          onJoin,\n          onLeave,\n          onSync\n        } = this.caller;\n\n        if (this.inPendingSyncState()) {\n          this.pendingDiffs.push(diff);\n        } else {\n          this.state = Presence.syncDiff(this.state, diff, onJoin, onLeave);\n          onSync();\n        }\n      });\n    }\n\n    onJoin(callback) {\n      this.caller.onJoin = callback;\n    }\n\n    onLeave(callback) {\n      this.caller.onLeave = callback;\n    }\n\n    onSync(callback) {\n      this.caller.onSync = callback;\n    }\n\n    list(by) {\n      return Presence.list(this.state, by);\n    }\n\n    inPendingSyncState() {\n      return !this.joinRef || this.joinRef !== this.channel.joinRef();\n    }\n\n    static syncState(currentState, newState, onJoin, onLeave) {\n      let state = this.clone(currentState);\n      let joins = {};\n      let leaves = {};\n      this.map(state, (key, presence) => {\n        if (!newState[key]) {\n          leaves[key] = presence;\n        }\n      });\n      this.map(newState, (key, newPresence) => {\n        let currentPresence = state[key];\n\n        if (currentPresence) {\n          let newRefs = newPresence.metas.map(m => m.phx_ref);\n          let curRefs = currentPresence.metas.map(m => m.phx_ref);\n          let joinedMetas = newPresence.metas.filter(m => curRefs.indexOf(m.phx_ref) < 0);\n          let leftMetas = currentPresence.metas.filter(m => newRefs.indexOf(m.phx_ref) < 0);\n\n          if (joinedMetas.length > 0) {\n            joins[key] = newPresence;\n            joins[key].metas = joinedMetas;\n          }\n\n          if (leftMetas.length > 0) {\n            leaves[key] = this.clone(currentPresence);\n            leaves[key].metas = leftMetas;\n          }\n        } else {\n          joins[key] = newPresence;\n        }\n      });\n      return this.syncDiff(state, {\n        joins,\n        leaves\n      }, onJoin, onLeave);\n    }\n\n    static syncDiff(state, diff, onJoin, onLeave) {\n      let {\n        joins,\n        leaves\n      } = this.clone(diff);\n\n      if (!onJoin) {\n        onJoin = function () {};\n      }\n\n      if (!onLeave) {\n        onLeave = function () {};\n      }\n\n      this.map(joins, (key, newPresence) => {\n        let currentPresence = state[key];\n        state[key] = this.clone(newPresence);\n\n        if (currentPresence) {\n          let joinedRefs = state[key].metas.map(m => m.phx_ref);\n          let curMetas = currentPresence.metas.filter(m => joinedRefs.indexOf(m.phx_ref) < 0);\n          state[key].metas.unshift(...curMetas);\n        }\n\n        onJoin(key, currentPresence, newPresence);\n      });\n      this.map(leaves, (key, leftPresence) => {\n        let currentPresence = state[key];\n\n        if (!currentPresence) {\n          return;\n        }\n\n        let refsToRemove = leftPresence.metas.map(m => m.phx_ref);\n        currentPresence.metas = currentPresence.metas.filter(p => {\n          return refsToRemove.indexOf(p.phx_ref) < 0;\n        });\n        onLeave(key, currentPresence, leftPresence);\n\n        if (currentPresence.metas.length === 0) {\n          delete state[key];\n        }\n      });\n      return state;\n    }\n\n    static list(presences, chooser) {\n      if (!chooser) {\n        chooser = function (key, pres) {\n          return pres;\n        };\n      }\n\n      return this.map(presences, (key, presence) => {\n        return chooser(key, presence);\n      });\n    }\n\n    static map(obj, func) {\n      return Object.getOwnPropertyNames(obj).map(key => func(key, obj[key]));\n    }\n\n    static clone(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n\n  }; // js/phoenix/serializer.js\n\n  var serializer_default = {\n    HEADER_LENGTH: 1,\n    META_LENGTH: 4,\n    KINDS: {\n      push: 0,\n      reply: 1,\n      broadcast: 2\n    },\n\n    encode(msg, callback) {\n      if (msg.payload.constructor === ArrayBuffer) {\n        return callback(this.binaryEncode(msg));\n      } else {\n        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];\n        return callback(JSON.stringify(payload));\n      }\n    },\n\n    decode(rawPayload, callback) {\n      if (rawPayload.constructor === ArrayBuffer) {\n        return callback(this.binaryDecode(rawPayload));\n      } else {\n        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);\n        return callback({\n          join_ref,\n          ref,\n          topic,\n          event,\n          payload\n        });\n      }\n    },\n\n    binaryEncode(message) {\n      let {\n        join_ref,\n        ref,\n        event,\n        topic,\n        payload\n      } = message;\n      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;\n      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);\n      let view = new DataView(header);\n      let offset = 0;\n      view.setUint8(offset++, this.KINDS.push);\n      view.setUint8(offset++, join_ref.length);\n      view.setUint8(offset++, ref.length);\n      view.setUint8(offset++, topic.length);\n      view.setUint8(offset++, event.length);\n      Array.from(join_ref, char => view.setUint8(offset++, char.charCodeAt(0)));\n      Array.from(ref, char => view.setUint8(offset++, char.charCodeAt(0)));\n      Array.from(topic, char => view.setUint8(offset++, char.charCodeAt(0)));\n      Array.from(event, char => view.setUint8(offset++, char.charCodeAt(0)));\n      var combined = new Uint8Array(header.byteLength + payload.byteLength);\n      combined.set(new Uint8Array(header), 0);\n      combined.set(new Uint8Array(payload), header.byteLength);\n      return combined.buffer;\n    },\n\n    binaryDecode(buffer) {\n      let view = new DataView(buffer);\n      let kind = view.getUint8(0);\n      let decoder = new TextDecoder();\n\n      switch (kind) {\n        case this.KINDS.push:\n          return this.decodePush(buffer, view, decoder);\n\n        case this.KINDS.reply:\n          return this.decodeReply(buffer, view, decoder);\n\n        case this.KINDS.broadcast:\n          return this.decodeBroadcast(buffer, view, decoder);\n      }\n    },\n\n    decodePush(buffer, view, decoder) {\n      let joinRefSize = view.getUint8(1);\n      let topicSize = view.getUint8(2);\n      let eventSize = view.getUint8(3);\n      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;\n      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));\n      offset = offset + joinRefSize;\n      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n      offset = offset + topicSize;\n      let event = decoder.decode(buffer.slice(offset, offset + eventSize));\n      offset = offset + eventSize;\n      let data = buffer.slice(offset, buffer.byteLength);\n      return {\n        join_ref: joinRef,\n        ref: null,\n        topic,\n        event,\n        payload: data\n      };\n    },\n\n    decodeReply(buffer, view, decoder) {\n      let joinRefSize = view.getUint8(1);\n      let refSize = view.getUint8(2);\n      let topicSize = view.getUint8(3);\n      let eventSize = view.getUint8(4);\n      let offset = this.HEADER_LENGTH + this.META_LENGTH;\n      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));\n      offset = offset + joinRefSize;\n      let ref = decoder.decode(buffer.slice(offset, offset + refSize));\n      offset = offset + refSize;\n      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n      offset = offset + topicSize;\n      let event = decoder.decode(buffer.slice(offset, offset + eventSize));\n      offset = offset + eventSize;\n      let data = buffer.slice(offset, buffer.byteLength);\n      let payload = {\n        status: event,\n        response: data\n      };\n      return {\n        join_ref: joinRef,\n        ref,\n        topic,\n        event: CHANNEL_EVENTS.reply,\n        payload\n      };\n    },\n\n    decodeBroadcast(buffer, view, decoder) {\n      let topicSize = view.getUint8(1);\n      let eventSize = view.getUint8(2);\n      let offset = this.HEADER_LENGTH + 2;\n      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n      offset = offset + topicSize;\n      let event = decoder.decode(buffer.slice(offset, offset + eventSize));\n      offset = offset + eventSize;\n      let data = buffer.slice(offset, buffer.byteLength);\n      return {\n        join_ref: null,\n        ref: null,\n        topic,\n        event,\n        payload: data\n      };\n    }\n\n  }; // js/phoenix/socket.js\n\n  var Socket = class {\n    constructor(endPoint, opts = {}) {\n      this.stateChangeCallbacks = {\n        open: [],\n        close: [],\n        error: [],\n        message: []\n      };\n      this.channels = [];\n      this.sendBuffer = [];\n      this.ref = 0;\n      this.timeout = opts.timeout || DEFAULT_TIMEOUT;\n      this.transport = opts.transport || global.WebSocket || LongPoll;\n      this.establishedConnections = 0;\n      this.defaultEncoder = serializer_default.encode.bind(serializer_default);\n      this.defaultDecoder = serializer_default.decode.bind(serializer_default);\n      this.closeWasClean = false;\n      this.binaryType = opts.binaryType || \"arraybuffer\";\n      this.connectClock = 1;\n\n      if (this.transport !== LongPoll) {\n        this.encode = opts.encode || this.defaultEncoder;\n        this.decode = opts.decode || this.defaultDecoder;\n      } else {\n        this.encode = this.defaultEncoder;\n        this.decode = this.defaultDecoder;\n      }\n\n      let awaitingConnectionOnPageShow = null;\n\n      if (phxWindow && phxWindow.addEventListener) {\n        phxWindow.addEventListener(\"pagehide\", _e => {\n          if (this.conn) {\n            this.disconnect();\n            awaitingConnectionOnPageShow = this.connectClock;\n          }\n        });\n        phxWindow.addEventListener(\"pageshow\", _e => {\n          if (awaitingConnectionOnPageShow === this.connectClock) {\n            awaitingConnectionOnPageShow = null;\n            this.connect();\n          }\n        });\n      }\n\n      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;\n\n      this.rejoinAfterMs = tries => {\n        if (opts.rejoinAfterMs) {\n          return opts.rejoinAfterMs(tries);\n        } else {\n          return [1e3, 2e3, 5e3][tries - 1] || 1e4;\n        }\n      };\n\n      this.reconnectAfterMs = tries => {\n        if (opts.reconnectAfterMs) {\n          return opts.reconnectAfterMs(tries);\n        } else {\n          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;\n        }\n      };\n\n      this.logger = opts.logger || null;\n      this.longpollerTimeout = opts.longpollerTimeout || 2e4;\n      this.params = closure(opts.params || {});\n      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n      this.vsn = opts.vsn || DEFAULT_VSN;\n      this.heartbeatTimer = null;\n      this.pendingHeartbeatRef = null;\n      this.reconnectTimer = new Timer(() => {\n        this.teardown(() => this.connect());\n      }, this.reconnectAfterMs);\n    }\n\n    replaceTransport(newTransport) {\n      this.disconnect();\n      this.transport = newTransport;\n    }\n\n    protocol() {\n      return location.protocol.match(/^https/) ? \"wss\" : \"ws\";\n    }\n\n    endPointURL() {\n      let uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params()), {\n        vsn: this.vsn\n      });\n\n      if (uri.charAt(0) !== \"/\") {\n        return uri;\n      }\n\n      if (uri.charAt(1) === \"/\") {\n        return `${this.protocol()}:${uri}`;\n      }\n\n      return `${this.protocol()}://${location.host}${uri}`;\n    }\n\n    disconnect(callback, code, reason) {\n      this.connectClock++;\n      this.closeWasClean = true;\n      this.reconnectTimer.reset();\n      this.teardown(callback, code, reason);\n    }\n\n    connect(params) {\n      this.connectClock++;\n\n      if (params) {\n        console && console.log(\"passing params to connect is deprecated. Instead pass :params to the Socket constructor\");\n        this.params = closure(params);\n      }\n\n      if (this.conn) {\n        return;\n      }\n\n      this.closeWasClean = false;\n      this.conn = new this.transport(this.endPointURL());\n      this.conn.binaryType = this.binaryType;\n      this.conn.timeout = this.longpollerTimeout;\n\n      this.conn.onopen = () => this.onConnOpen();\n\n      this.conn.onerror = error => this.onConnError(error);\n\n      this.conn.onmessage = event => this.onConnMessage(event);\n\n      this.conn.onclose = event => this.onConnClose(event);\n    }\n\n    log(kind, msg, data) {\n      this.logger(kind, msg, data);\n    }\n\n    hasLogger() {\n      return this.logger !== null;\n    }\n\n    onOpen(callback) {\n      let ref = this.makeRef();\n      this.stateChangeCallbacks.open.push([ref, callback]);\n      return ref;\n    }\n\n    onClose(callback) {\n      let ref = this.makeRef();\n      this.stateChangeCallbacks.close.push([ref, callback]);\n      return ref;\n    }\n\n    onError(callback) {\n      let ref = this.makeRef();\n      this.stateChangeCallbacks.error.push([ref, callback]);\n      return ref;\n    }\n\n    onMessage(callback) {\n      let ref = this.makeRef();\n      this.stateChangeCallbacks.message.push([ref, callback]);\n      return ref;\n    }\n\n    onConnOpen() {\n      if (this.hasLogger()) this.log(\"transport\", `connected to ${this.endPointURL()}`);\n      this.closeWasClean = false;\n      this.establishedConnections++;\n      this.flushSendBuffer();\n      this.reconnectTimer.reset();\n      this.resetHeartbeat();\n      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());\n    }\n\n    heartbeatTimeout() {\n      if (this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n\n        if (this.hasLogger()) {\n          this.log(\"transport\", \"heartbeat timeout. Attempting to re-establish connection\");\n        }\n\n        this.abnormalClose(\"heartbeat timeout\");\n      }\n    }\n\n    resetHeartbeat() {\n      if (this.conn && this.conn.skipHeartbeat) {\n        return;\n      }\n\n      this.pendingHeartbeatRef = null;\n      clearTimeout(this.heartbeatTimer);\n      setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n    }\n\n    teardown(callback, code, reason) {\n      if (!this.conn) {\n        return callback && callback();\n      }\n\n      this.waitForBufferDone(() => {\n        if (this.conn) {\n          if (code) {\n            this.conn.close(code, reason || \"\");\n          } else {\n            this.conn.close();\n          }\n        }\n\n        this.waitForSocketClosed(() => {\n          if (this.conn) {\n            this.conn.onclose = function () {};\n\n            this.conn = null;\n          }\n\n          callback && callback();\n        });\n      });\n    }\n\n    waitForBufferDone(callback, tries = 1) {\n      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {\n        callback();\n        return;\n      }\n\n      setTimeout(() => {\n        this.waitForBufferDone(callback, tries + 1);\n      }, 150 * tries);\n    }\n\n    waitForSocketClosed(callback, tries = 1) {\n      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {\n        callback();\n        return;\n      }\n\n      setTimeout(() => {\n        this.waitForSocketClosed(callback, tries + 1);\n      }, 150 * tries);\n    }\n\n    onConnClose(event) {\n      if (this.hasLogger()) this.log(\"transport\", \"close\", event);\n      this.triggerChanError();\n      clearTimeout(this.heartbeatTimer);\n\n      if (!this.closeWasClean) {\n        this.reconnectTimer.scheduleTimeout();\n      }\n\n      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));\n    }\n\n    onConnError(error) {\n      if (this.hasLogger()) this.log(\"transport\", error);\n      let transportBefore = this.transport;\n      let establishedBefore = this.establishedConnections;\n      this.stateChangeCallbacks.error.forEach(([, callback]) => {\n        callback(error, transportBefore, establishedBefore);\n      });\n\n      if (transportBefore === this.transport || establishedBefore > 0) {\n        this.triggerChanError();\n      }\n    }\n\n    triggerChanError() {\n      this.channels.forEach(channel => {\n        if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {\n          channel.trigger(CHANNEL_EVENTS.error);\n        }\n      });\n    }\n\n    connectionState() {\n      switch (this.conn && this.conn.readyState) {\n        case SOCKET_STATES.connecting:\n          return \"connecting\";\n\n        case SOCKET_STATES.open:\n          return \"open\";\n\n        case SOCKET_STATES.closing:\n          return \"closing\";\n\n        default:\n          return \"closed\";\n      }\n    }\n\n    isConnected() {\n      return this.connectionState() === \"open\";\n    }\n\n    remove(channel) {\n      this.off(channel.stateChangeRefs);\n      this.channels = this.channels.filter(c => c.joinRef() !== channel.joinRef());\n    }\n\n    off(refs) {\n      for (let key in this.stateChangeCallbacks) {\n        this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {\n          return refs.indexOf(ref) === -1;\n        });\n      }\n    }\n\n    channel(topic, chanParams = {}) {\n      let chan = new Channel(topic, chanParams, this);\n      this.channels.push(chan);\n      return chan;\n    }\n\n    push(data) {\n      if (this.hasLogger()) {\n        let {\n          topic,\n          event,\n          payload,\n          ref,\n          join_ref\n        } = data;\n        this.log(\"push\", `${topic} ${event} (${join_ref}, ${ref})`, payload);\n      }\n\n      if (this.isConnected()) {\n        this.encode(data, result => this.conn.send(result));\n      } else {\n        this.sendBuffer.push(() => this.encode(data, result => this.conn.send(result)));\n      }\n    }\n\n    makeRef() {\n      let newRef = this.ref + 1;\n\n      if (newRef === this.ref) {\n        this.ref = 0;\n      } else {\n        this.ref = newRef;\n      }\n\n      return this.ref.toString();\n    }\n\n    sendHeartbeat() {\n      if (this.pendingHeartbeatRef && !this.isConnected()) {\n        return;\n      }\n\n      this.pendingHeartbeatRef = this.makeRef();\n      this.push({\n        topic: \"phoenix\",\n        event: \"heartbeat\",\n        payload: {},\n        ref: this.pendingHeartbeatRef\n      });\n      this.heartbeatTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);\n    }\n\n    abnormalClose(reason) {\n      this.closeWasClean = false;\n\n      if (this.isConnected()) {\n        this.conn.close(WS_CLOSE_NORMAL, reason);\n      }\n    }\n\n    flushSendBuffer() {\n      if (this.isConnected() && this.sendBuffer.length > 0) {\n        this.sendBuffer.forEach(callback => callback());\n        this.sendBuffer = [];\n      }\n    }\n\n    onConnMessage(rawMessage) {\n      this.decode(rawMessage.data, msg => {\n        let {\n          topic,\n          event,\n          payload,\n          ref,\n          join_ref\n        } = msg;\n\n        if (ref && ref === this.pendingHeartbeatRef) {\n          clearTimeout(this.heartbeatTimer);\n          this.pendingHeartbeatRef = null;\n          setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n        }\n\n        if (this.hasLogger()) this.log(\"receive\", `${payload.status || \"\"} ${topic} ${event} ${ref && \"(\" + ref + \")\" || \"\"}`, payload);\n\n        for (let i = 0; i < this.channels.length; i++) {\n          const channel = this.channels[i];\n\n          if (!channel.isMember(topic, event, payload, join_ref)) {\n            continue;\n          }\n\n          channel.trigger(event, payload, ref, join_ref);\n        }\n\n        for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {\n          let [, callback] = this.stateChangeCallbacks.message[i];\n          callback(msg);\n        }\n      });\n    }\n\n    leaveOpenTopic(topic) {\n      let dupChannel = this.channels.find(c => c.topic === topic && (c.isJoined() || c.isJoining()));\n\n      if (dupChannel) {\n        if (this.hasLogger()) this.log(\"transport\", `leaving duplicate topic \"${topic}\"`);\n        dupChannel.leave();\n      }\n    }\n\n  };\n  return phoenix_exports;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../deps/phoenix/priv/static/phoenix.js\n");

/***/ }),

/***/ "../deps/phoenix_html/priv/static/phoenix_html.js":
/*!********************************************************!*\
  !*** ../deps/phoenix_html/priv/static/phoenix_html.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function () {\n  var PolyfillEvent = eventConstructor();\n\n  function eventConstructor() {\n    if (typeof window.CustomEvent === \"function\") return window.CustomEvent; // IE<=9 Support\n\n    function CustomEvent(event, params) {\n      params = params || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n    return CustomEvent;\n  }\n\n  function buildHiddenInput(name, value) {\n    var input = document.createElement(\"input\");\n    input.type = \"hidden\";\n    input.name = name;\n    input.value = value;\n    return input;\n  }\n\n  function handleClick(element, targetModifierKey) {\n    var to = element.getAttribute(\"data-to\"),\n        method = buildHiddenInput(\"_method\", element.getAttribute(\"data-method\")),\n        csrf = buildHiddenInput(\"_csrf_token\", element.getAttribute(\"data-csrf\")),\n        form = document.createElement(\"form\"),\n        target = element.getAttribute(\"target\");\n    form.method = element.getAttribute(\"data-method\") === \"get\" ? \"get\" : \"post\";\n    form.action = to;\n    form.style.display = \"hidden\";\n    if (target) form.target = target;else if (targetModifierKey) form.target = \"_blank\";\n    form.appendChild(csrf);\n    form.appendChild(method);\n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  window.addEventListener(\"click\", function (e) {\n    var element = e.target;\n\n    while (element && element.getAttribute) {\n      var phoenixLinkEvent = new PolyfillEvent('phoenix.link.click', {\n        \"bubbles\": true,\n        \"cancelable\": true\n      });\n\n      if (!element.dispatchEvent(phoenixLinkEvent)) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return false;\n      }\n\n      if (element.getAttribute(\"data-method\")) {\n        handleClick(element, e.metaKey || e.shiftKey);\n        e.preventDefault();\n        return false;\n      } else {\n        element = element.parentNode;\n      }\n    }\n  }, false);\n  window.addEventListener('phoenix.link.click', function (e) {\n    var message = e.target.getAttribute(\"data-confirm\");\n\n    if (message && !window.confirm(message)) {\n      e.preventDefault();\n    }\n  }, false);\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vZGVwcy9waG9lbml4X2h0bWwvcHJpdi9zdGF0aWMvcGhvZW5peF9odG1sLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2RlcHMvcGhvZW5peF9odG1sL3ByaXYvc3RhdGljL3Bob2VuaXhfaHRtbC5qcz80N2Q4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBQb2x5ZmlsbEV2ZW50ID0gZXZlbnRDb25zdHJ1Y3RvcigpO1xuXG4gIGZ1bmN0aW9uIGV2ZW50Q29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHdpbmRvdy5DdXN0b21FdmVudDtcbiAgICAvLyBJRTw9OSBTdXBwb3J0XG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHtidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkfTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICByZXR1cm4gZXZ0O1xuICAgIH1cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICAgIHJldHVybiBDdXN0b21FdmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSGlkZGVuSW5wdXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgaW5wdXQubmFtZSA9IG5hbWU7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhlbGVtZW50LCB0YXJnZXRNb2RpZmllcktleSkge1xuICAgIHZhciB0byA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10b1wiKSxcbiAgICAgICAgbWV0aG9kID0gYnVpbGRIaWRkZW5JbnB1dChcIl9tZXRob2RcIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSksXG4gICAgICAgIGNzcmYgPSBidWlsZEhpZGRlbklucHV0KFwiX2NzcmZfdG9rZW5cIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzcmZcIikpLFxuICAgICAgICBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAgIHRhcmdldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuXG4gICAgZm9ybS5tZXRob2QgPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSA9PT0gXCJnZXRcIikgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gICAgZm9ybS5hY3Rpb24gPSB0bztcbiAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSBcImhpZGRlblwiO1xuXG4gICAgaWYgKHRhcmdldCkgZm9ybS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgZWxzZSBpZiAodGFyZ2V0TW9kaWZpZXJLZXkpIGZvcm0udGFyZ2V0ID0gXCJfYmxhbmtcIjtcblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoY3NyZik7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChtZXRob2QpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG4gICAgZm9ybS5zdWJtaXQoKTtcbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG5cbiAgICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuICAgICAgdmFyIHBob2VuaXhMaW5rRXZlbnQgPSBuZXcgUG9seWZpbGxFdmVudCgncGhvZW5peC5saW5rLmNsaWNrJywge1xuICAgICAgICBcImJ1YmJsZXNcIjogdHJ1ZSwgXCJjYW5jZWxhYmxlXCI6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWVsZW1lbnQuZGlzcGF0Y2hFdmVudChwaG9lbml4TGlua0V2ZW50KSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikpIHtcbiAgICAgICAgaGFuZGxlQ2xpY2soZWxlbWVudCwgZS5tZXRhS2V5IHx8IGUuc2hpZnRLZXkpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9LCBmYWxzZSk7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Bob2VuaXgubGluay5jbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbmZpcm1cIik7XG4gICAgaWYobWVzc2FnZSAmJiAhd2luZG93LmNvbmZpcm0obWVzc2FnZSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbn0pKCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../deps/phoenix_html/priv/static/phoenix_html.js\n");

/***/ }),

/***/ "../deps/phoenix_live_view/priv/static/phoenix_live_view.js":
/*!******************************************************************!*\
  !*** ../deps/phoenix_live_view/priv/static/phoenix_live_view.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var LiveView = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropSymbols = Object.getOwnPropertySymbols;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __propIsEnum = Object.prototype.propertyIsEnumerable;\n\n  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value\n  }) : obj[key] = value;\n\n  var __spreadValues = (a, b) => {\n    for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n  };\n\n  var __markAsModule = target => __defProp(target, \"__esModule\", {\n    value: true\n  });\n\n  var __export = (target, all) => {\n    __markAsModule(target);\n\n    for (var name in all) __defProp(target, name, {\n      get: all[name],\n      enumerable: true\n    });\n  }; // js/phoenix_live_view/index.js\n\n\n  var phoenix_live_view_exports = {};\n\n  __export(phoenix_live_view_exports, {\n    LiveSocket: () => LiveSocket\n  }); // js/phoenix_live_view/constants.js\n\n\n  var CONSECUTIVE_RELOADS = \"consecutive-reloads\";\n  var MAX_RELOADS = 10;\n  var RELOAD_JITTER = [1e3, 3e3];\n  var FAILSAFE_JITTER = 3e4;\n  var PHX_EVENT_CLASSES = [\"phx-click-loading\", \"phx-change-loading\", \"phx-submit-loading\", \"phx-keydown-loading\", \"phx-keyup-loading\", \"phx-blur-loading\", \"phx-focus-loading\"];\n  var PHX_COMPONENT = \"data-phx-component\";\n  var PHX_LIVE_LINK = \"data-phx-link\";\n  var PHX_TRACK_STATIC = \"track-static\";\n  var PHX_LINK_STATE = \"data-phx-link-state\";\n  var PHX_REF = \"data-phx-ref\";\n  var PHX_TRACK_UPLOADS = \"track-uploads\";\n  var PHX_UPLOAD_REF = \"data-phx-upload-ref\";\n  var PHX_PREFLIGHTED_REFS = \"data-phx-preflighted-refs\";\n  var PHX_DONE_REFS = \"data-phx-done-refs\";\n  var PHX_DROP_TARGET = \"drop-target\";\n  var PHX_ACTIVE_ENTRY_REFS = \"data-phx-active-refs\";\n  var PHX_LIVE_FILE_UPDATED = \"phx:live-file:updated\";\n  var PHX_SKIP = \"data-phx-skip\";\n  var PHX_REMOVE = \"data-phx-remove\";\n  var PHX_PAGE_LOADING = \"page-loading\";\n  var PHX_CONNECTED_CLASS = \"phx-connected\";\n  var PHX_DISCONNECTED_CLASS = \"phx-disconnected\";\n  var PHX_NO_FEEDBACK_CLASS = \"phx-no-feedback\";\n  var PHX_ERROR_CLASS = \"phx-error\";\n  var PHX_PARENT_ID = \"data-phx-parent-id\";\n  var PHX_MAIN = \"data-phx-main\";\n  var PHX_ROOT_ID = \"data-phx-root-id\";\n  var PHX_TRIGGER_ACTION = \"trigger-action\";\n  var PHX_FEEDBACK_FOR = \"feedback-for\";\n  var PHX_HAS_FOCUSED = \"phx-has-focused\";\n  var FOCUSABLE_INPUTS = [\"text\", \"textarea\", \"number\", \"email\", \"password\", \"search\", \"tel\", \"url\", \"date\", \"time\"];\n  var CHECKABLE_INPUTS = [\"checkbox\", \"radio\"];\n  var PHX_HAS_SUBMITTED = \"phx-has-submitted\";\n  var PHX_SESSION = \"data-phx-session\";\n  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;\n  var PHX_STATIC = \"data-phx-static\";\n  var PHX_READONLY = \"data-phx-readonly\";\n  var PHX_DISABLED = \"data-phx-disabled\";\n  var PHX_DISABLE_WITH = \"disable-with\";\n  var PHX_DISABLE_WITH_RESTORE = \"data-phx-disable-with-restore\";\n  var PHX_HOOK = \"hook\";\n  var PHX_DEBOUNCE = \"debounce\";\n  var PHX_THROTTLE = \"throttle\";\n  var PHX_UPDATE = \"update\";\n  var PHX_KEY = \"key\";\n  var PHX_PRIVATE = \"phxPrivate\";\n  var PHX_AUTO_RECOVER = \"auto-recover\";\n  var PHX_LV_DEBUG = \"phx:live-socket:debug\";\n  var PHX_LV_PROFILE = \"phx:live-socket:profiling\";\n  var PHX_LV_LATENCY_SIM = \"phx:live-socket:latency-sim\";\n  var PHX_PROGRESS = \"progress\";\n  var LOADER_TIMEOUT = 1;\n  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;\n  var BINDING_PREFIX = \"phx-\";\n  var PUSH_TIMEOUT = 3e4;\n  var DEBOUNCE_TRIGGER = \"debounce-trigger\";\n  var THROTTLED = \"throttled\";\n  var DEBOUNCE_PREV_KEY = \"debounce-prev-key\";\n  var DEFAULTS = {\n    debounce: 300,\n    throttle: 300\n  };\n  var DYNAMICS = \"d\";\n  var STATIC = \"s\";\n  var COMPONENTS = \"c\";\n  var EVENTS = \"e\";\n  var REPLY = \"r\";\n  var TITLE = \"t\"; // js/phoenix_live_view/entry_uploader.js\n\n  var EntryUploader = class {\n    constructor(entry, chunkSize, liveSocket) {\n      this.liveSocket = liveSocket;\n      this.entry = entry;\n      this.offset = 0;\n      this.chunkSize = chunkSize;\n      this.chunkTimer = null;\n      this.uploadChannel = liveSocket.channel(`lvu:${entry.ref}`, {\n        token: entry.metadata()\n      });\n    }\n\n    error(reason) {\n      clearTimeout(this.chunkTimer);\n      this.uploadChannel.leave();\n      this.entry.error(reason);\n    }\n\n    upload() {\n      this.uploadChannel.onError(reason => this.error(reason));\n      this.uploadChannel.join().receive(\"ok\", _data => this.readNextChunk()).receive(\"error\", reason => this.error(reason));\n    }\n\n    isDone() {\n      return this.offset >= this.entry.file.size;\n    }\n\n    readNextChunk() {\n      let reader = new window.FileReader();\n      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);\n\n      reader.onload = e => {\n        if (e.target.error === null) {\n          this.offset += e.target.result.byteLength;\n          this.pushChunk(e.target.result);\n        } else {\n          return logError(\"Read error: \" + e.target.error);\n        }\n      };\n\n      reader.readAsArrayBuffer(blob);\n    }\n\n    pushChunk(chunk) {\n      if (!this.uploadChannel.isJoined()) {\n        return;\n      }\n\n      this.uploadChannel.push(\"chunk\", chunk).receive(\"ok\", () => {\n        this.entry.progress(this.offset / this.entry.file.size * 100);\n\n        if (!this.isDone()) {\n          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);\n        }\n      });\n    }\n\n  }; // js/phoenix_live_view/utils.js\n\n  var logError = (msg, obj) => console.error && console.error(msg, obj);\n\n  var isCid = cid => typeof cid === \"number\";\n\n  function detectDuplicateIds() {\n    let ids = new Set();\n    let elems = document.querySelectorAll(\"*[id]\");\n\n    for (let i = 0, len = elems.length; i < len; i++) {\n      if (ids.has(elems[i].id)) {\n        console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);\n      } else {\n        ids.add(elems[i].id);\n      }\n    }\n  }\n\n  var debug = (view, kind, msg, obj) => {\n    if (view.liveSocket.isDebugEnabled()) {\n      console.log(`${view.id} ${kind}: ${msg} - `, obj);\n    }\n  };\n\n  var closure = val => typeof val === \"function\" ? val : function () {\n    return val;\n  };\n\n  var clone = obj => {\n    return JSON.parse(JSON.stringify(obj));\n  };\n\n  var closestPhxBinding = (el, binding, borderEl) => {\n    do {\n      if (el.matches(`[${binding}]`)) {\n        return el;\n      }\n\n      el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));\n\n    return null;\n  };\n\n  var isObject = obj => {\n    return obj !== null && typeof obj === \"object\" && !(obj instanceof Array);\n  };\n\n  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);\n\n  var isEmpty = obj => {\n    for (let x in obj) {\n      return false;\n    }\n\n    return true;\n  };\n\n  var maybe = (el, callback) => el && callback(el);\n\n  var channelUploader = function (entries, onError, resp, liveSocket) {\n    entries.forEach(entry => {\n      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket);\n      entryUploader.upload();\n    });\n  }; // js/phoenix_live_view/browser.js\n\n\n  var Browser = {\n    canPushState() {\n      return typeof history.pushState !== \"undefined\";\n    },\n\n    dropLocal(localStorage, namespace, subkey) {\n      return localStorage.removeItem(this.localKey(namespace, subkey));\n    },\n\n    updateLocal(localStorage, namespace, subkey, initial, func) {\n      let current = this.getLocal(localStorage, namespace, subkey);\n      let key = this.localKey(namespace, subkey);\n      let newVal = current === null ? initial : func(current);\n      localStorage.setItem(key, JSON.stringify(newVal));\n      return newVal;\n    },\n\n    getLocal(localStorage, namespace, subkey) {\n      return JSON.parse(localStorage.getItem(this.localKey(namespace, subkey)));\n    },\n\n    updateCurrentState(callback) {\n      if (!this.canPushState()) {\n        return;\n      }\n\n      history.replaceState(callback(history.state || {}), \"\", window.location.href);\n    },\n\n    pushState(kind, meta, to) {\n      if (this.canPushState()) {\n        if (to !== window.location.href) {\n          if (meta.type == \"redirect\" && meta.scroll) {\n            let currentState = history.state || {};\n            currentState.scroll = meta.scroll;\n            history.replaceState(currentState, \"\", window.location.href);\n          }\n\n          delete meta.scroll;\n          history[kind + \"State\"](meta, \"\", to || null);\n          let hashEl = this.getHashTargetEl(window.location.hash);\n\n          if (hashEl) {\n            hashEl.scrollIntoView();\n          } else if (meta.type === \"redirect\") {\n            window.scroll(0, 0);\n          }\n        }\n      } else {\n        this.redirect(to);\n      }\n    },\n\n    setCookie(name, value) {\n      document.cookie = `${name}=${value}`;\n    },\n\n    getCookie(name) {\n      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), \"$1\");\n    },\n\n    redirect(toURL, flash) {\n      if (flash) {\n        Browser.setCookie(\"__phoenix_flash__\", flash + \"; max-age=60000; path=/\");\n      }\n\n      window.location = toURL;\n    },\n\n    localKey(namespace, subkey) {\n      return `${namespace}-${subkey}`;\n    },\n\n    getHashTargetEl(maybeHash) {\n      let hash = maybeHash.toString().substring(1);\n\n      if (hash === \"\") {\n        return;\n      }\n\n      return document.getElementById(hash) || document.querySelector(`a[name=\"${hash}\"]`);\n    }\n\n  };\n  var browser_default = Browser; // js/phoenix_live_view/dom.js\n\n  var DOM = {\n    byId(id) {\n      return document.getElementById(id) || logError(`no id found for ${id}`);\n    },\n\n    removeClass(el, className) {\n      el.classList.remove(className);\n\n      if (el.classList.length === 0) {\n        el.removeAttribute(\"class\");\n      }\n    },\n\n    all(node, query, callback) {\n      if (!node) {\n        return [];\n      }\n\n      let array = Array.from(node.querySelectorAll(query));\n      return callback ? array.forEach(callback) : array;\n    },\n\n    childNodeLength(html) {\n      let template = document.createElement(\"template\");\n      template.innerHTML = html;\n      return template.content.childElementCount;\n    },\n\n    isUploadInput(el) {\n      return el.type === \"file\" && el.getAttribute(PHX_UPLOAD_REF) !== null;\n    },\n\n    findUploadInputs(node) {\n      return this.all(node, `input[type=\"file\"][${PHX_UPLOAD_REF}]`);\n    },\n\n    findComponentNodeList(node, cid) {\n      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}=\"${cid}\"]`), node);\n    },\n\n    isPhxDestroyed(node) {\n      return node.id && DOM.private(node, \"destroyed\") ? true : false;\n    },\n\n    markPhxChildDestroyed(el) {\n      el.setAttribute(PHX_SESSION, \"\");\n      this.putPrivate(el, \"destroyed\", true);\n    },\n\n    findPhxChildrenInFragment(html, parentId) {\n      let template = document.createElement(\"template\");\n      template.innerHTML = html;\n      return this.findPhxChildren(template.content, parentId);\n    },\n\n    isIgnored(el, phxUpdate) {\n      return (el.getAttribute(phxUpdate) || el.getAttribute(\"data-phx-update\")) === \"ignore\";\n    },\n\n    isPhxUpdate(el, phxUpdate, updateTypes) {\n      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;\n    },\n\n    findPhxChildren(el, parentId) {\n      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}=\"${parentId}\"]`);\n    },\n\n    findParentCIDs(node, cids) {\n      let initial = new Set(cids);\n      return cids.reduce((acc, cid) => {\n        let selector = `[${PHX_COMPONENT}=\"${cid}\"] [${PHX_COMPONENT}]`;\n        this.filterWithinSameLiveView(this.all(node, selector), node).map(el => parseInt(el.getAttribute(PHX_COMPONENT))).forEach(childCID => acc.delete(childCID));\n        return acc;\n      }, initial);\n    },\n\n    filterWithinSameLiveView(nodes, parent) {\n      if (parent.querySelector(PHX_VIEW_SELECTOR)) {\n        return nodes.filter(el => this.withinSameLiveView(el, parent));\n      } else {\n        return nodes;\n      }\n    },\n\n    withinSameLiveView(node, parent) {\n      while (node = node.parentNode) {\n        if (node.isSameNode(parent)) {\n          return true;\n        }\n\n        if (node.getAttribute(PHX_SESSION) !== null) {\n          return false;\n        }\n      }\n    },\n\n    private(el, key) {\n      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];\n    },\n\n    deletePrivate(el, key) {\n      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];\n    },\n\n    putPrivate(el, key, value) {\n      if (!el[PHX_PRIVATE]) {\n        el[PHX_PRIVATE] = {};\n      }\n\n      el[PHX_PRIVATE][key] = value;\n    },\n\n    copyPrivates(target, source) {\n      if (source[PHX_PRIVATE]) {\n        target[PHX_PRIVATE] = clone(source[PHX_PRIVATE]);\n      }\n    },\n\n    putTitle(str) {\n      let titleEl = document.querySelector(\"title\");\n      let {\n        prefix,\n        suffix\n      } = titleEl.dataset;\n      document.title = `${prefix || \"\"}${str}${suffix || \"\"}`;\n    },\n\n    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, callback) {\n      let debounce = el.getAttribute(phxDebounce);\n      let throttle = el.getAttribute(phxThrottle);\n\n      if (debounce === \"\") {\n        debounce = defaultDebounce;\n      }\n\n      if (throttle === \"\") {\n        throttle = defaultThrottle;\n      }\n\n      let value = debounce || throttle;\n\n      switch (value) {\n        case null:\n          return callback();\n\n        case \"blur\":\n          if (this.once(el, \"debounce-blur\")) {\n            el.addEventListener(\"blur\", () => callback());\n          }\n\n          return;\n\n        default:\n          let timeout = parseInt(value);\n\n          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();\n\n          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);\n\n          if (isNaN(timeout)) {\n            return logError(`invalid throttle/debounce value: ${value}`);\n          }\n\n          if (throttle) {\n            let newKeyDown = false;\n\n            if (event.type === \"keydown\") {\n              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);\n              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);\n              newKeyDown = prevKey !== event.key;\n            }\n\n            if (!newKeyDown && this.private(el, THROTTLED)) {\n              return false;\n            } else {\n              callback();\n              this.putPrivate(el, THROTTLED, true);\n              setTimeout(() => this.triggerCycle(el, DEBOUNCE_TRIGGER), timeout);\n            }\n          } else {\n            setTimeout(() => this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle), timeout);\n          }\n\n          let form = el.form;\n\n          if (form && this.once(form, \"bind-debounce\")) {\n            form.addEventListener(\"submit\", () => {\n              Array.from(new FormData(form).entries(), ([name]) => {\n                let input = form.querySelector(`[name=\"${name}\"]`);\n                this.incCycle(input, DEBOUNCE_TRIGGER);\n                this.deletePrivate(input, THROTTLED);\n              });\n            });\n          }\n\n          if (this.once(el, \"bind-debounce\")) {\n            el.addEventListener(\"blur\", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));\n          }\n\n      }\n    },\n\n    triggerCycle(el, key, currentCycle) {\n      let [cycle, trigger] = this.private(el, key);\n\n      if (!currentCycle) {\n        currentCycle = cycle;\n      }\n\n      if (currentCycle === cycle) {\n        this.incCycle(el, key);\n        trigger();\n      }\n    },\n\n    once(el, key) {\n      if (this.private(el, key) === true) {\n        return false;\n      }\n\n      this.putPrivate(el, key, true);\n      return true;\n    },\n\n    incCycle(el, key, trigger = function () {}) {\n      let [currentCycle] = this.private(el, key) || [0, trigger];\n      currentCycle++;\n      this.putPrivate(el, key, [currentCycle, trigger]);\n      return currentCycle;\n    },\n\n    discardError(container, el, phxFeedbackFor) {\n      let field = el.getAttribute && el.getAttribute(phxFeedbackFor);\n      let input = field && container.querySelector(`[id=\"${field}\"], [name=\"${field}\"]`);\n\n      if (!input) {\n        return;\n      }\n\n      if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input.form, PHX_HAS_SUBMITTED))) {\n        el.classList.add(PHX_NO_FEEDBACK_CLASS);\n      }\n    },\n\n    showError(inputEl, phxFeedbackFor) {\n      if (inputEl.id || inputEl.name) {\n        this.all(inputEl.form, `[${phxFeedbackFor}=\"${inputEl.id}\"], [${phxFeedbackFor}=\"${inputEl.name}\"]`, el => {\n          this.removeClass(el, PHX_NO_FEEDBACK_CLASS);\n        });\n      }\n    },\n\n    isPhxChild(node) {\n      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);\n    },\n\n    dispatchEvent(target, eventString, detail = {}) {\n      let event = new CustomEvent(eventString, {\n        bubbles: true,\n        cancelable: true,\n        detail\n      });\n      target.dispatchEvent(event);\n    },\n\n    cloneNode(node, html) {\n      if (typeof html === \"undefined\") {\n        return node.cloneNode(true);\n      } else {\n        let cloned = node.cloneNode(false);\n        cloned.innerHTML = html;\n        return cloned;\n      }\n    },\n\n    mergeAttrs(target, source, opts = {}) {\n      let exclude = opts.exclude || [];\n      let isIgnored = opts.isIgnored;\n      let sourceAttrs = source.attributes;\n\n      for (let i = sourceAttrs.length - 1; i >= 0; i--) {\n        let name = sourceAttrs[i].name;\n\n        if (exclude.indexOf(name) < 0) {\n          target.setAttribute(name, source.getAttribute(name));\n        }\n      }\n\n      let targetAttrs = target.attributes;\n\n      for (let i = targetAttrs.length - 1; i >= 0; i--) {\n        let name = targetAttrs[i].name;\n\n        if (isIgnored) {\n          if (name.startsWith(\"data-\") && !source.hasAttribute(name)) {\n            target.removeAttribute(name);\n          }\n        } else {\n          if (!source.hasAttribute(name)) {\n            target.removeAttribute(name);\n          }\n        }\n      }\n    },\n\n    mergeFocusedInput(target, source) {\n      if (!(target instanceof HTMLSelectElement)) {\n        DOM.mergeAttrs(target, source, {\n          except: [\"value\"]\n        });\n      }\n\n      if (source.readOnly) {\n        target.setAttribute(\"readonly\", true);\n      } else {\n        target.removeAttribute(\"readonly\");\n      }\n    },\n\n    hasSelectionRange(el) {\n      return el.setSelectionRange && (el.type === \"text\" || el.type === \"textarea\");\n    },\n\n    restoreFocus(focused, selectionStart, selectionEnd) {\n      if (!DOM.isTextualInput(focused)) {\n        return;\n      }\n\n      let wasFocused = focused.matches(\":focus\");\n\n      if (focused.readOnly) {\n        focused.blur();\n      }\n\n      if (!wasFocused) {\n        focused.focus();\n      }\n\n      if (this.hasSelectionRange(focused)) {\n        focused.setSelectionRange(selectionStart, selectionEnd);\n      }\n    },\n\n    isFormInput(el) {\n      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== \"button\";\n    },\n\n    syncAttrsToProps(el) {\n      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {\n        el.checked = el.getAttribute(\"checked\") !== null;\n      }\n    },\n\n    syncPropsToAttrs(el) {\n      if (el instanceof HTMLSelectElement) {\n        let selectedItem = el.options.item(el.selectedIndex);\n\n        if (selectedItem && selectedItem.getAttribute(\"selected\") === null) {\n          selectedItem.setAttribute(\"selected\", \"\");\n        }\n      }\n    },\n\n    isTextualInput(el) {\n      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;\n    },\n\n    isNowTriggerFormExternal(el, phxTriggerExternal) {\n      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;\n    },\n\n    syncPendingRef(fromEl, toEl, disableWith) {\n      let ref = fromEl.getAttribute(PHX_REF);\n\n      if (ref === null) {\n        return true;\n      }\n\n      if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {\n        if (DOM.isUploadInput(fromEl)) {\n          DOM.mergeAttrs(fromEl, toEl, {\n            isIgnored: true\n          });\n        }\n\n        DOM.putPrivate(fromEl, PHX_REF, toEl);\n        return false;\n      } else {\n        PHX_EVENT_CLASSES.forEach(className => {\n          fromEl.classList.contains(className) && toEl.classList.add(className);\n        });\n        toEl.setAttribute(PHX_REF, ref);\n        return true;\n      }\n    },\n\n    cleanChildNodes(container, phxUpdate) {\n      if (DOM.isPhxUpdate(container, phxUpdate, [\"append\", \"prepend\"])) {\n        let toRemove = [];\n        container.childNodes.forEach(childNode => {\n          if (!childNode.id) {\n            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === \"\";\n\n            if (!isEmptyTextNode) {\n              logError(`only HTML element tags with an id are allowed inside containers with phx-update.\n\nremoving illegal node: \"${(childNode.outerHTML || childNode.nodeValue).trim()}\"\n\n`);\n            }\n\n            toRemove.push(childNode);\n          }\n        });\n        toRemove.forEach(childNode => childNode.remove());\n      }\n    },\n\n    replaceRootContainer(container, tagName, attrs) {\n      let retainedAttrs = new Set([\"id\", PHX_SESSION, PHX_STATIC, PHX_MAIN]);\n\n      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {\n        Array.from(container.attributes).filter(attr => !retainedAttrs.has(attr.name.toLowerCase())).forEach(attr => container.removeAttribute(attr.name));\n        Object.keys(attrs).filter(name => !retainedAttrs.has(name.toLowerCase())).forEach(attr => container.setAttribute(attr, attrs[attr]));\n        return container;\n      } else {\n        let newContainer = document.createElement(tagName);\n        Object.keys(attrs).forEach(attr => newContainer.setAttribute(attr, attrs[attr]));\n        retainedAttrs.forEach(attr => newContainer.setAttribute(attr, container.getAttribute(attr)));\n        newContainer.innerHTML = container.innerHTML;\n        container.replaceWith(newContainer);\n        return newContainer;\n      }\n    }\n\n  };\n  var dom_default = DOM; // js/phoenix_live_view/upload_entry.js\n\n  var UploadEntry = class {\n    static isActive(fileEl, file) {\n      let isNew = file._phxRef === void 0;\n      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(\",\");\n      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;\n      return file.size > 0 && (isNew || isActive);\n    }\n\n    static isPreflighted(fileEl, file) {\n      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(\",\");\n      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;\n      return isPreflighted && this.isActive(fileEl, file);\n    }\n\n    constructor(fileEl, file, view) {\n      this.ref = LiveUploader.genFileRef(file);\n      this.fileEl = fileEl;\n      this.file = file;\n      this.view = view;\n      this.meta = null;\n      this._isCancelled = false;\n      this._isDone = false;\n      this._progress = 0;\n      this._lastProgressSent = -1;\n\n      this._onDone = function () {};\n\n      this._onElUpdated = this.onElUpdated.bind(this);\n      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);\n    }\n\n    metadata() {\n      return this.meta;\n    }\n\n    progress(progress) {\n      this._progress = Math.floor(progress);\n\n      if (this._progress > this._lastProgressSent) {\n        if (this._progress >= 100) {\n          this._progress = 100;\n          this._lastProgressSent = 100;\n          this._isDone = true;\n          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {\n            LiveUploader.untrackFile(this.fileEl, this.file);\n\n            this._onDone();\n          });\n        } else {\n          this._lastProgressSent = this._progress;\n          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);\n        }\n      }\n    }\n\n    cancel() {\n      this._isCancelled = true;\n      this._isDone = true;\n\n      this._onDone();\n    }\n\n    isDone() {\n      return this._isDone;\n    }\n\n    error(reason = \"failed\") {\n      this.view.pushFileProgress(this.fileEl, this.ref, {\n        error: reason\n      });\n      LiveUploader.clearFiles(this.fileEl);\n    }\n\n    onDone(callback) {\n      this._onDone = () => {\n        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);\n        callback();\n      };\n    }\n\n    onElUpdated() {\n      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(\",\");\n\n      if (activeRefs.indexOf(this.ref) === -1) {\n        this.cancel();\n      }\n    }\n\n    toPreflightPayload() {\n      return {\n        last_modified: this.file.lastModified,\n        name: this.file.name,\n        size: this.file.size,\n        type: this.file.type,\n        ref: this.ref\n      };\n    }\n\n    uploader(uploaders) {\n      if (this.meta.uploader) {\n        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);\n        return {\n          name: this.meta.uploader,\n          callback\n        };\n      } else {\n        return {\n          name: \"channel\",\n          callback: channelUploader\n        };\n      }\n    }\n\n    zipPostFlight(resp) {\n      this.meta = resp.entries[this.ref];\n\n      if (!this.meta) {\n        logError(`no preflight upload response returned with ref ${this.ref}`, {\n          input: this.fileEl,\n          response: resp\n        });\n      }\n    }\n\n  }; // js/phoenix_live_view/live_uploader.js\n\n  var liveUploaderFileRef = 0;\n  var LiveUploader = class {\n    static genFileRef(file) {\n      let ref = file._phxRef;\n\n      if (ref !== void 0) {\n        return ref;\n      } else {\n        file._phxRef = (liveUploaderFileRef++).toString();\n        return file._phxRef;\n      }\n    }\n\n    static getEntryDataURL(inputEl, ref, callback) {\n      let file = this.activeFiles(inputEl).find(file2 => this.genFileRef(file2) === ref);\n      callback(URL.createObjectURL(file));\n    }\n\n    static hasUploadsInProgress(formEl) {\n      let active = 0;\n      dom_default.findUploadInputs(formEl).forEach(input => {\n        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {\n          active++;\n        }\n      });\n      return active > 0;\n    }\n\n    static serializeUploads(inputEl) {\n      let files = this.activeFiles(inputEl);\n      let fileData = {};\n      files.forEach(file => {\n        let entry = {\n          path: inputEl.name\n        };\n        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);\n        fileData[uploadRef] = fileData[uploadRef] || [];\n        entry.ref = this.genFileRef(file);\n        entry.name = file.name || entry.ref;\n        entry.type = file.type;\n        entry.size = file.size;\n        fileData[uploadRef].push(entry);\n      });\n      return fileData;\n    }\n\n    static clearFiles(inputEl) {\n      inputEl.value = null;\n      inputEl.removeAttribute(PHX_UPLOAD_REF);\n      dom_default.putPrivate(inputEl, \"files\", []);\n    }\n\n    static untrackFile(inputEl, file) {\n      dom_default.putPrivate(inputEl, \"files\", dom_default.private(inputEl, \"files\").filter(f => !Object.is(f, file)));\n    }\n\n    static trackFiles(inputEl, files) {\n      if (inputEl.getAttribute(\"multiple\") !== null) {\n        let newFiles = files.filter(file => !this.activeFiles(inputEl).find(f => Object.is(f, file)));\n        dom_default.putPrivate(inputEl, \"files\", this.activeFiles(inputEl).concat(newFiles));\n        inputEl.value = null;\n      } else {\n        dom_default.putPrivate(inputEl, \"files\", files);\n      }\n    }\n\n    static activeFileInputs(formEl) {\n      let fileInputs = dom_default.findUploadInputs(formEl);\n      return Array.from(fileInputs).filter(el => el.files && this.activeFiles(el).length > 0);\n    }\n\n    static activeFiles(input) {\n      return (dom_default.private(input, \"files\") || []).filter(f => UploadEntry.isActive(input, f));\n    }\n\n    static inputsAwaitingPreflight(formEl) {\n      let fileInputs = dom_default.findUploadInputs(formEl);\n      return Array.from(fileInputs).filter(input => this.filesAwaitingPreflight(input).length > 0);\n    }\n\n    static filesAwaitingPreflight(input) {\n      return this.activeFiles(input).filter(f => !UploadEntry.isPreflighted(input, f));\n    }\n\n    constructor(inputEl, view, onComplete) {\n      this.view = view;\n      this.onComplete = onComplete;\n      this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map(file => new UploadEntry(inputEl, file, view));\n      this.numEntriesInProgress = this._entries.length;\n    }\n\n    entries() {\n      return this._entries;\n    }\n\n    initAdapterUpload(resp, onError, liveSocket) {\n      this._entries = this._entries.map(entry => {\n        entry.zipPostFlight(resp);\n        entry.onDone(() => {\n          this.numEntriesInProgress--;\n\n          if (this.numEntriesInProgress === 0) {\n            this.onComplete();\n          }\n        });\n        return entry;\n      });\n\n      let groupedEntries = this._entries.reduce((acc, entry) => {\n        let {\n          name,\n          callback\n        } = entry.uploader(liveSocket.uploaders);\n        acc[name] = acc[name] || {\n          callback,\n          entries: []\n        };\n        acc[name].entries.push(entry);\n        return acc;\n      }, {});\n\n      for (let name in groupedEntries) {\n        let {\n          callback,\n          entries\n        } = groupedEntries[name];\n        callback(entries, onError, resp, liveSocket);\n      }\n    }\n\n  }; // js/phoenix_live_view/hooks.js\n\n  var Hooks = {\n    LiveFileUpload: {\n      activeRefs() {\n        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);\n      },\n\n      preflightedRefs() {\n        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);\n      },\n\n      mounted() {\n        this.preflightedWas = this.preflightedRefs();\n      },\n\n      updated() {\n        let newPreflights = this.preflightedRefs();\n\n        if (this.preflightedWas !== newPreflights) {\n          this.preflightedWas = newPreflights;\n\n          if (newPreflights === \"\") {\n            this.__view.cancelSubmit(this.el.form);\n          }\n        }\n\n        if (this.activeRefs() === \"\") {\n          this.el.value = null;\n        }\n\n        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));\n      }\n\n    },\n    LiveImgPreview: {\n      mounted() {\n        this.ref = this.el.getAttribute(\"data-phx-entry-ref\");\n        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));\n        LiveUploader.getEntryDataURL(this.inputEl, this.ref, url => {\n          this.url = url;\n          this.el.src = url;\n        });\n      },\n\n      destroyed() {\n        URL.revokeObjectURL(this.url);\n      }\n\n    }\n  };\n  var hooks_default = Hooks; // js/phoenix_live_view/dom_post_morph_restorer.js\n\n  var DOMPostMorphRestorer = class {\n    constructor(containerBefore, containerAfter, updateType) {\n      let idsBefore = new Set();\n      let idsAfter = new Set([...containerAfter.children].map(child => child.id));\n      let elementsToModify = [];\n      Array.from(containerBefore.children).forEach(child => {\n        if (child.id) {\n          idsBefore.add(child.id);\n\n          if (idsAfter.has(child.id)) {\n            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;\n            elementsToModify.push({\n              elementId: child.id,\n              previousElementId\n            });\n          }\n        }\n      });\n      this.containerId = containerAfter.id;\n      this.updateType = updateType;\n      this.elementsToModify = elementsToModify;\n      this.elementIdsToAdd = [...idsAfter].filter(id => !idsBefore.has(id));\n    }\n\n    perform() {\n      let container = dom_default.byId(this.containerId);\n      this.elementsToModify.forEach(elementToModify => {\n        if (elementToModify.previousElementId) {\n          maybe(document.getElementById(elementToModify.previousElementId), previousElem => {\n            maybe(document.getElementById(elementToModify.elementId), elem => {\n              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;\n\n              if (!isInRightPlace) {\n                previousElem.insertAdjacentElement(\"afterend\", elem);\n              }\n            });\n          });\n        } else {\n          maybe(document.getElementById(elementToModify.elementId), elem => {\n            let isInRightPlace = elem.previousElementSibling == null;\n\n            if (!isInRightPlace) {\n              container.insertAdjacentElement(\"afterbegin\", elem);\n            }\n          });\n        }\n      });\n\n      if (this.updateType == \"prepend\") {\n        this.elementIdsToAdd.reverse().forEach(elemId => {\n          maybe(document.getElementById(elemId), elem => container.insertAdjacentElement(\"afterbegin\", elem));\n        });\n      }\n    }\n\n  }; // node_modules/morphdom/dist/morphdom-esm.js\n\n  var DOCUMENT_FRAGMENT_NODE = 11;\n\n  function morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n      attr = toNodeAttrs[i];\n      attrName = attr.name;\n      attrNamespaceURI = attr.namespaceURI;\n      attrValue = attr.value;\n\n      if (attrNamespaceURI) {\n        attrName = attr.localName || attrName;\n        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n        if (fromValue !== attrValue) {\n          if (attr.prefix === \"xmlns\") {\n            attrName = attr.name;\n          }\n\n          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n        }\n      } else {\n        fromValue = fromNode.getAttribute(attrName);\n\n        if (fromValue !== attrValue) {\n          fromNode.setAttribute(attrName, attrValue);\n        }\n      }\n    }\n\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n      attr = fromNodeAttrs[d];\n      attrName = attr.name;\n      attrNamespaceURI = attr.namespaceURI;\n\n      if (attrNamespaceURI) {\n        attrName = attr.localName || attrName;\n\n        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n          fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n        }\n      } else {\n        if (!toNode.hasAttribute(attrName)) {\n          fromNode.removeAttribute(attrName);\n        }\n      }\n    }\n  }\n\n  var range;\n  var NS_XHTML = \"http://www.w3.org/1999/xhtml\";\n  var doc = typeof document === \"undefined\" ? void 0 : document;\n  var HAS_TEMPLATE_SUPPORT = !!doc && \"content\" in doc.createElement(\"template\");\n  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && \"createContextualFragment\" in doc.createRange();\n\n  function createFragmentFromTemplate(str) {\n    var template = doc.createElement(\"template\");\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n  }\n\n  function createFragmentFromRange(str) {\n    if (!range) {\n      range = doc.createRange();\n      range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n  }\n\n  function createFragmentFromWrap(str) {\n    var fragment = doc.createElement(\"body\");\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n  }\n\n  function toElement(str) {\n    str = str.trim();\n\n    if (HAS_TEMPLATE_SUPPORT) {\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n  }\n\n  function compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n      return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    if (fromCodeStart <= 90 && toCodeStart >= 97) {\n      return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {\n      return toNodeName === fromNodeName.toUpperCase();\n    } else {\n      return false;\n    }\n  }\n\n  function createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);\n  }\n\n  function moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n\n    while (curChild) {\n      var nextChild = curChild.nextSibling;\n      toEl.appendChild(curChild);\n      curChild = nextChild;\n    }\n\n    return toEl;\n  }\n\n  function syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n      fromEl[name] = toEl[name];\n\n      if (fromEl[name]) {\n        fromEl.setAttribute(name, \"\");\n      } else {\n        fromEl.removeAttribute(name);\n      }\n    }\n  }\n\n  var specialElHandlers = {\n    OPTION: function (fromEl, toEl) {\n      var parentNode = fromEl.parentNode;\n\n      if (parentNode) {\n        var parentName = parentNode.nodeName.toUpperCase();\n\n        if (parentName === \"OPTGROUP\") {\n          parentNode = parentNode.parentNode;\n          parentName = parentNode && parentNode.nodeName.toUpperCase();\n        }\n\n        if (parentName === \"SELECT\" && !parentNode.hasAttribute(\"multiple\")) {\n          if (fromEl.hasAttribute(\"selected\") && !toEl.selected) {\n            fromEl.setAttribute(\"selected\", \"selected\");\n            fromEl.removeAttribute(\"selected\");\n          }\n\n          parentNode.selectedIndex = -1;\n        }\n      }\n\n      syncBooleanAttrProp(fromEl, toEl, \"selected\");\n    },\n    INPUT: function (fromEl, toEl) {\n      syncBooleanAttrProp(fromEl, toEl, \"checked\");\n      syncBooleanAttrProp(fromEl, toEl, \"disabled\");\n\n      if (fromEl.value !== toEl.value) {\n        fromEl.value = toEl.value;\n      }\n\n      if (!toEl.hasAttribute(\"value\")) {\n        fromEl.removeAttribute(\"value\");\n      }\n    },\n    TEXTAREA: function (fromEl, toEl) {\n      var newValue = toEl.value;\n\n      if (fromEl.value !== newValue) {\n        fromEl.value = newValue;\n      }\n\n      var firstChild = fromEl.firstChild;\n\n      if (firstChild) {\n        var oldValue = firstChild.nodeValue;\n\n        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {\n          return;\n        }\n\n        firstChild.nodeValue = newValue;\n      }\n    },\n    SELECT: function (fromEl, toEl) {\n      if (!toEl.hasAttribute(\"multiple\")) {\n        var selectedIndex = -1;\n        var i = 0;\n        var curChild = fromEl.firstChild;\n        var optgroup;\n        var nodeName;\n\n        while (curChild) {\n          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n\n          if (nodeName === \"OPTGROUP\") {\n            optgroup = curChild;\n            curChild = optgroup.firstChild;\n          } else {\n            if (nodeName === \"OPTION\") {\n              if (curChild.hasAttribute(\"selected\")) {\n                selectedIndex = i;\n                break;\n              }\n\n              i++;\n            }\n\n            curChild = curChild.nextSibling;\n\n            if (!curChild && optgroup) {\n              curChild = optgroup.nextSibling;\n              optgroup = null;\n            }\n          }\n        }\n\n        fromEl.selectedIndex = selectedIndex;\n      }\n    }\n  };\n  var ELEMENT_NODE = 1;\n  var DOCUMENT_FRAGMENT_NODE$1 = 11;\n  var TEXT_NODE = 3;\n  var COMMENT_NODE = 8;\n\n  function noop() {}\n\n  function defaultGetNodeKey(node) {\n    if (node) {\n      return node.getAttribute && node.getAttribute(\"id\") || node.id;\n    }\n  }\n\n  function morphdomFactory(morphAttrs2) {\n    return function morphdom2(fromNode, toNode, options) {\n      if (!options) {\n        options = {};\n      }\n\n      if (typeof toNode === \"string\") {\n        if (fromNode.nodeName === \"#document\" || fromNode.nodeName === \"HTML\" || fromNode.nodeName === \"BODY\") {\n          var toNodeHtml = toNode;\n          toNode = doc.createElement(\"html\");\n          toNode.innerHTML = toNodeHtml;\n        } else {\n          toNode = toElement(toNode);\n        }\n      }\n\n      var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n      var onNodeAdded = options.onNodeAdded || noop;\n      var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n      var onElUpdated = options.onElUpdated || noop;\n      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n      var onNodeDiscarded = options.onNodeDiscarded || noop;\n      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n      var childrenOnly = options.childrenOnly === true;\n      var fromNodesLookup = Object.create(null);\n      var keyedRemovalList = [];\n\n      function addKeyedRemoval(key) {\n        keyedRemovalList.push(key);\n      }\n\n      function walkDiscardedChildNodes(node, skipKeyedNodes) {\n        if (node.nodeType === ELEMENT_NODE) {\n          var curChild = node.firstChild;\n\n          while (curChild) {\n            var key = void 0;\n\n            if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n              addKeyedRemoval(key);\n            } else {\n              onNodeDiscarded(curChild);\n\n              if (curChild.firstChild) {\n                walkDiscardedChildNodes(curChild, skipKeyedNodes);\n              }\n            }\n\n            curChild = curChild.nextSibling;\n          }\n        }\n      }\n\n      function removeNode(node, parentNode, skipKeyedNodes) {\n        if (onBeforeNodeDiscarded(node) === false) {\n          return;\n        }\n\n        if (parentNode) {\n          parentNode.removeChild(node);\n        }\n\n        onNodeDiscarded(node);\n        walkDiscardedChildNodes(node, skipKeyedNodes);\n      }\n\n      function indexTree(node) {\n        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n          var curChild = node.firstChild;\n\n          while (curChild) {\n            var key = getNodeKey(curChild);\n\n            if (key) {\n              fromNodesLookup[key] = curChild;\n            }\n\n            indexTree(curChild);\n            curChild = curChild.nextSibling;\n          }\n        }\n      }\n\n      indexTree(fromNode);\n\n      function handleNodeAdded(el) {\n        onNodeAdded(el);\n        var curChild = el.firstChild;\n\n        while (curChild) {\n          var nextSibling = curChild.nextSibling;\n          var key = getNodeKey(curChild);\n\n          if (key) {\n            var unmatchedFromEl = fromNodesLookup[key];\n\n            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n              morphEl(unmatchedFromEl, curChild);\n            } else {\n              handleNodeAdded(curChild);\n            }\n          } else {\n            handleNodeAdded(curChild);\n          }\n\n          curChild = nextSibling;\n        }\n      }\n\n      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n        while (curFromNodeChild) {\n          var fromNextSibling = curFromNodeChild.nextSibling;\n\n          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {\n            addKeyedRemoval(curFromNodeKey);\n          } else {\n            removeNode(curFromNodeChild, fromEl, true);\n          }\n\n          curFromNodeChild = fromNextSibling;\n        }\n      }\n\n      function morphEl(fromEl, toEl, childrenOnly2) {\n        var toElKey = getNodeKey(toEl);\n\n        if (toElKey) {\n          delete fromNodesLookup[toElKey];\n        }\n\n        if (!childrenOnly2) {\n          if (onBeforeElUpdated(fromEl, toEl) === false) {\n            return;\n          }\n\n          morphAttrs2(fromEl, toEl);\n          onElUpdated(fromEl);\n\n          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n            return;\n          }\n        }\n\n        if (fromEl.nodeName !== \"TEXTAREA\") {\n          morphChildren(fromEl, toEl);\n        } else {\n          specialElHandlers.TEXTAREA(fromEl, toEl);\n        }\n      }\n\n      function morphChildren(fromEl, toEl) {\n        var curToNodeChild = toEl.firstChild;\n        var curFromNodeChild = fromEl.firstChild;\n        var curToNodeKey;\n        var curFromNodeKey;\n        var fromNextSibling;\n        var toNextSibling;\n        var matchingFromEl;\n\n        outer: while (curToNodeChild) {\n          toNextSibling = curToNodeChild.nextSibling;\n          curToNodeKey = getNodeKey(curToNodeChild);\n\n          while (curFromNodeChild) {\n            fromNextSibling = curFromNodeChild.nextSibling;\n\n            if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n              curToNodeChild = toNextSibling;\n              curFromNodeChild = fromNextSibling;\n              continue outer;\n            }\n\n            curFromNodeKey = getNodeKey(curFromNodeChild);\n            var curFromNodeType = curFromNodeChild.nodeType;\n            var isCompatible = void 0;\n\n            if (curFromNodeType === curToNodeChild.nodeType) {\n              if (curFromNodeType === ELEMENT_NODE) {\n                if (curToNodeKey) {\n                  if (curToNodeKey !== curFromNodeKey) {\n                    if (matchingFromEl = fromNodesLookup[curToNodeKey]) {\n                      if (fromNextSibling === matchingFromEl) {\n                        isCompatible = false;\n                      } else {\n                        fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                        if (curFromNodeKey) {\n                          addKeyedRemoval(curFromNodeKey);\n                        } else {\n                          removeNode(curFromNodeChild, fromEl, true);\n                        }\n\n                        curFromNodeChild = matchingFromEl;\n                      }\n                    } else {\n                      isCompatible = false;\n                    }\n                  }\n                } else if (curFromNodeKey) {\n                  isCompatible = false;\n                }\n\n                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n\n                if (isCompatible) {\n                  morphEl(curFromNodeChild, curToNodeChild);\n                }\n              } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                isCompatible = true;\n\n                if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                  curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                }\n              }\n            }\n\n            if (isCompatible) {\n              curToNodeChild = toNextSibling;\n              curFromNodeChild = fromNextSibling;\n              continue outer;\n            }\n\n            if (curFromNodeKey) {\n              addKeyedRemoval(curFromNodeKey);\n            } else {\n              removeNode(curFromNodeChild, fromEl, true);\n            }\n\n            curFromNodeChild = fromNextSibling;\n          }\n\n          if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n            fromEl.appendChild(matchingFromEl);\n            morphEl(matchingFromEl, curToNodeChild);\n          } else {\n            var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n\n            if (onBeforeNodeAddedResult !== false) {\n              if (onBeforeNodeAddedResult) {\n                curToNodeChild = onBeforeNodeAddedResult;\n              }\n\n              if (curToNodeChild.actualize) {\n                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n              }\n\n              fromEl.appendChild(curToNodeChild);\n              handleNodeAdded(curToNodeChild);\n            }\n          }\n\n          curToNodeChild = toNextSibling;\n          curFromNodeChild = fromNextSibling;\n        }\n\n        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n        var specialElHandler = specialElHandlers[fromEl.nodeName];\n\n        if (specialElHandler) {\n          specialElHandler(fromEl, toEl);\n        }\n      }\n\n      var morphedNode = fromNode;\n      var morphedNodeType = morphedNode.nodeType;\n      var toNodeType = toNode.nodeType;\n\n      if (!childrenOnly) {\n        if (morphedNodeType === ELEMENT_NODE) {\n          if (toNodeType === ELEMENT_NODE) {\n            if (!compareNodeNames(fromNode, toNode)) {\n              onNodeDiscarded(fromNode);\n              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n            }\n          } else {\n            morphedNode = toNode;\n          }\n        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {\n          if (toNodeType === morphedNodeType) {\n            if (morphedNode.nodeValue !== toNode.nodeValue) {\n              morphedNode.nodeValue = toNode.nodeValue;\n            }\n\n            return morphedNode;\n          } else {\n            morphedNode = toNode;\n          }\n        }\n      }\n\n      if (morphedNode === toNode) {\n        onNodeDiscarded(fromNode);\n      } else {\n        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n          return;\n        }\n\n        morphEl(morphedNode, toNode, childrenOnly);\n\n        if (keyedRemovalList) {\n          for (var i = 0, len = keyedRemovalList.length; i < len; i++) {\n            var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n\n            if (elToRemove) {\n              removeNode(elToRemove, elToRemove.parentNode, false);\n            }\n          }\n        }\n      }\n\n      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n        if (morphedNode.actualize) {\n          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n        }\n\n        fromNode.parentNode.replaceChild(morphedNode, fromNode);\n      }\n\n      return morphedNode;\n    };\n  }\n\n  var morphdom = morphdomFactory(morphAttrs);\n  var morphdom_esm_default = morphdom; // js/phoenix_live_view/dom_patch.js\n\n  var DOMPatch = class {\n    static patchEl(fromEl, toEl, activeElement) {\n      morphdom_esm_default(fromEl, toEl, {\n        childrenOnly: false,\n        onBeforeElUpdated: (fromEl2, toEl2) => {\n          if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {\n            dom_default.mergeFocusedInput(fromEl2, toEl2);\n            return false;\n          }\n        }\n      });\n    }\n\n    constructor(view, container, id, html, targetCID) {\n      this.view = view;\n      this.liveSocket = view.liveSocket;\n      this.container = container;\n      this.id = id;\n      this.rootID = view.root.id;\n      this.html = html;\n      this.targetCID = targetCID;\n      this.cidPatch = isCid(this.targetCID);\n      this.callbacks = {\n        beforeadded: [],\n        beforeupdated: [],\n        beforephxChildAdded: [],\n        afteradded: [],\n        afterupdated: [],\n        afterdiscarded: [],\n        afterphxChildAdded: []\n      };\n    }\n\n    before(kind, callback) {\n      this.callbacks[`before${kind}`].push(callback);\n    }\n\n    after(kind, callback) {\n      this.callbacks[`after${kind}`].push(callback);\n    }\n\n    trackBefore(kind, ...args) {\n      this.callbacks[`before${kind}`].forEach(callback => callback(...args));\n    }\n\n    trackAfter(kind, ...args) {\n      this.callbacks[`after${kind}`].forEach(callback => callback(...args));\n    }\n\n    markPrunableContentForRemoval() {\n      dom_default.all(this.container, \"[phx-update=append] > *, [phx-update=prepend] > *\", el => {\n        el.setAttribute(PHX_REMOVE, \"\");\n      });\n    }\n\n    perform() {\n      let {\n        view,\n        liveSocket,\n        container,\n        html\n      } = this;\n      let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;\n\n      if (this.isCIDPatch() && !targetContainer) {\n        return;\n      }\n\n      let focused = liveSocket.getActiveElement();\n      let {\n        selectionStart,\n        selectionEnd\n      } = focused && dom_default.hasSelectionRange(focused) ? focused : {};\n      let phxUpdate = liveSocket.binding(PHX_UPDATE);\n      let phxFeedbackFor = liveSocket.binding(PHX_FEEDBACK_FOR);\n      let disableWith = liveSocket.binding(PHX_DISABLE_WITH);\n      let phxTriggerExternal = liveSocket.binding(PHX_TRIGGER_ACTION);\n      let added = [];\n      let updates = [];\n      let appendPrependUpdates = [];\n      let externalFormTriggered = null;\n      let diffHTML = liveSocket.time(\"premorph container prep\", () => {\n        return this.buildDiffHTML(container, html, phxUpdate, targetContainer);\n      });\n      this.trackBefore(\"added\", container);\n      this.trackBefore(\"updated\", container, container);\n      liveSocket.time(\"morphdom\", () => {\n        morphdom_esm_default(targetContainer, diffHTML, {\n          childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,\n          getNodeKey: node => {\n            return dom_default.isPhxDestroyed(node) ? null : node.id;\n          },\n          onBeforeNodeAdded: el => {\n            this.trackBefore(\"added\", el);\n            return el;\n          },\n          onNodeAdded: el => {\n            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {\n              externalFormTriggered = el;\n            }\n\n            dom_default.discardError(targetContainer, el, phxFeedbackFor);\n\n            if (dom_default.isPhxChild(el) && view.ownsElement(el)) {\n              this.trackAfter(\"phxChildAdded\", el);\n            }\n\n            added.push(el);\n          },\n          onNodeDiscarded: el => {\n            if (dom_default.isPhxChild(el)) {\n              liveSocket.destroyViewByEl(el);\n            }\n\n            this.trackAfter(\"discarded\", el);\n          },\n          onBeforeNodeDiscarded: el => {\n            if (el.getAttribute && el.getAttribute(PHX_REMOVE) !== null) {\n              return true;\n            }\n\n            if (el.parentNode !== null && dom_default.isPhxUpdate(el.parentNode, phxUpdate, [\"append\", \"prepend\"]) && el.id) {\n              return false;\n            }\n\n            if (this.skipCIDSibling(el)) {\n              return false;\n            }\n\n            return true;\n          },\n          onElUpdated: el => {\n            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {\n              externalFormTriggered = el;\n            }\n\n            updates.push(el);\n          },\n          onBeforeElUpdated: (fromEl, toEl) => {\n            dom_default.cleanChildNodes(toEl, phxUpdate);\n\n            if (this.skipCIDSibling(toEl)) {\n              return false;\n            }\n\n            if (dom_default.isIgnored(fromEl, phxUpdate)) {\n              this.trackBefore(\"updated\", fromEl, toEl);\n              dom_default.mergeAttrs(fromEl, toEl, {\n                isIgnored: true\n              });\n              updates.push(fromEl);\n              return false;\n            }\n\n            if (fromEl.type === \"number\" && fromEl.validity && fromEl.validity.badInput) {\n              return false;\n            }\n\n            if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {\n              if (dom_default.isUploadInput(fromEl)) {\n                this.trackBefore(\"updated\", fromEl, toEl);\n                updates.push(fromEl);\n              }\n\n              return false;\n            }\n\n            if (dom_default.isPhxChild(toEl)) {\n              let prevSession = fromEl.getAttribute(PHX_SESSION);\n              dom_default.mergeAttrs(fromEl, toEl, {\n                exclude: [PHX_STATIC]\n              });\n\n              if (prevSession !== \"\") {\n                fromEl.setAttribute(PHX_SESSION, prevSession);\n              }\n\n              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);\n              return false;\n            }\n\n            dom_default.copyPrivates(toEl, fromEl);\n            dom_default.discardError(targetContainer, toEl, phxFeedbackFor);\n            dom_default.syncPropsToAttrs(toEl);\n            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);\n\n            if (isFocusedFormEl && !this.forceFocusedSelectUpdate(fromEl, toEl)) {\n              this.trackBefore(\"updated\", fromEl, toEl);\n              dom_default.mergeFocusedInput(fromEl, toEl);\n              dom_default.syncAttrsToProps(fromEl);\n              updates.push(fromEl);\n              return false;\n            } else {\n              if (dom_default.isPhxUpdate(toEl, phxUpdate, [\"append\", \"prepend\"])) {\n                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));\n              }\n\n              dom_default.syncAttrsToProps(toEl);\n              this.trackBefore(\"updated\", fromEl, toEl);\n              return true;\n            }\n          }\n        });\n      });\n\n      if (liveSocket.isDebugEnabled()) {\n        detectDuplicateIds();\n      }\n\n      if (appendPrependUpdates.length > 0) {\n        liveSocket.time(\"post-morph append/prepend restoration\", () => {\n          appendPrependUpdates.forEach(update => update.perform());\n        });\n      }\n\n      liveSocket.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));\n      dom_default.dispatchEvent(document, \"phx:update\");\n      added.forEach(el => this.trackAfter(\"added\", el));\n      updates.forEach(el => this.trackAfter(\"updated\", el));\n\n      if (externalFormTriggered) {\n        liveSocket.disconnect();\n        externalFormTriggered.submit();\n      }\n\n      return true;\n    }\n\n    forceFocusedSelectUpdate(fromEl, toEl) {\n      let isSelect = [\"select\", \"select-one\", \"select-multiple\"].find(t => t === fromEl.type);\n      return fromEl.multiple === true || isSelect && fromEl.innerHTML != toEl.innerHTML;\n    }\n\n    isCIDPatch() {\n      return this.cidPatch;\n    }\n\n    skipCIDSibling(el) {\n      return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;\n    }\n\n    targetCIDContainer(html) {\n      if (!this.isCIDPatch()) {\n        return;\n      }\n\n      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);\n\n      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {\n        return first;\n      } else {\n        return first && first.parentNode;\n      }\n    }\n\n    buildDiffHTML(container, html, phxUpdate, targetContainer) {\n      let isCIDPatch = this.isCIDPatch();\n      let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();\n\n      if (!isCIDPatch || isCIDWithSingleRoot) {\n        return html;\n      } else {\n        let diffContainer = null;\n        let template = document.createElement(\"template\");\n        diffContainer = dom_default.cloneNode(targetContainer);\n        let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);\n        template.innerHTML = html;\n        rest.forEach(el => el.remove());\n        Array.from(diffContainer.childNodes).forEach(child => {\n          if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {\n            child.setAttribute(PHX_SKIP, \"\");\n            child.innerHTML = \"\";\n          }\n        });\n        Array.from(template.content.childNodes).forEach(el => diffContainer.insertBefore(el, firstComponent));\n        firstComponent.remove();\n        return diffContainer.outerHTML;\n      }\n    }\n\n  }; // js/phoenix_live_view/rendered.js\n\n  var Rendered = class {\n    static extract(diff) {\n      let {\n        [REPLY]: reply,\n        [EVENTS]: events,\n        [TITLE]: title\n      } = diff;\n      delete diff[REPLY];\n      delete diff[EVENTS];\n      delete diff[TITLE];\n      return {\n        diff,\n        title,\n        reply: reply || null,\n        events: events || []\n      };\n    }\n\n    constructor(viewId, rendered) {\n      this.viewId = viewId;\n      this.rendered = {};\n      this.mergeDiff(rendered);\n    }\n\n    parentViewId() {\n      return this.viewId;\n    }\n\n    toString(onlyCids) {\n      return this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);\n    }\n\n    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {\n      onlyCids = onlyCids ? new Set(onlyCids) : null;\n      let output = {\n        buffer: \"\",\n        components,\n        onlyCids\n      };\n      this.toOutputBuffer(rendered, output);\n      return output.buffer;\n    }\n\n    componentCIDs(diff) {\n      return Object.keys(diff[COMPONENTS] || {}).map(i => parseInt(i));\n    }\n\n    isComponentOnlyDiff(diff) {\n      if (!diff[COMPONENTS]) {\n        return false;\n      }\n\n      return Object.keys(diff).length === 1;\n    }\n\n    getComponent(diff, cid) {\n      return diff[COMPONENTS][cid];\n    }\n\n    mergeDiff(diff) {\n      let newc = diff[COMPONENTS];\n      let cache = {};\n      delete diff[COMPONENTS];\n      this.rendered = this.mutableMerge(this.rendered, diff);\n      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};\n\n      if (newc) {\n        let oldc = this.rendered[COMPONENTS];\n\n        for (let cid in newc) {\n          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);\n        }\n\n        for (var key in newc) {\n          oldc[key] = newc[key];\n        }\n\n        diff[COMPONENTS] = newc;\n      }\n    }\n\n    cachedFindComponent(cid, cdiff, oldc, newc, cache) {\n      if (cache[cid]) {\n        return cache[cid];\n      } else {\n        let ndiff,\n            stat,\n            scid = cdiff[STATIC];\n\n        if (isCid(scid)) {\n          let tdiff;\n\n          if (scid > 0) {\n            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);\n          } else {\n            tdiff = oldc[-scid];\n          }\n\n          stat = tdiff[STATIC];\n          ndiff = this.cloneMerge(tdiff, cdiff);\n          ndiff[STATIC] = stat;\n        } else {\n          ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);\n        }\n\n        cache[cid] = ndiff;\n        return ndiff;\n      }\n    }\n\n    mutableMerge(target, source) {\n      if (source[STATIC] !== void 0) {\n        return source;\n      } else {\n        this.doMutableMerge(target, source);\n        return target;\n      }\n    }\n\n    doMutableMerge(target, source) {\n      for (let key in source) {\n        let val = source[key];\n        let targetVal = target[key];\n\n        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {\n          this.doMutableMerge(targetVal, val);\n        } else {\n          target[key] = val;\n        }\n      }\n    }\n\n    cloneMerge(target, source) {\n      let merged = __spreadValues(__spreadValues({}, target), source);\n\n      for (let key in merged) {\n        let val = source[key];\n        let targetVal = target[key];\n\n        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {\n          merged[key] = this.cloneMerge(targetVal, val);\n        }\n      }\n\n      return merged;\n    }\n\n    componentToString(cid) {\n      return this.recursiveCIDToString(this.rendered[COMPONENTS], cid);\n    }\n\n    pruneCIDs(cids) {\n      cids.forEach(cid => delete this.rendered[COMPONENTS][cid]);\n    }\n\n    get() {\n      return this.rendered;\n    }\n\n    isNewFingerprint(diff = {}) {\n      return !!diff[STATIC];\n    }\n\n    toOutputBuffer(rendered, output) {\n      if (rendered[DYNAMICS]) {\n        return this.comprehensionToBuffer(rendered, output);\n      }\n\n      let {\n        [STATIC]: statics\n      } = rendered;\n      output.buffer += statics[0];\n\n      for (let i = 1; i < statics.length; i++) {\n        this.dynamicToBuffer(rendered[i - 1], output);\n        output.buffer += statics[i];\n      }\n    }\n\n    comprehensionToBuffer(rendered, output) {\n      let {\n        [DYNAMICS]: dynamics,\n        [STATIC]: statics\n      } = rendered;\n\n      for (let d = 0; d < dynamics.length; d++) {\n        let dynamic = dynamics[d];\n        output.buffer += statics[0];\n\n        for (let i = 1; i < statics.length; i++) {\n          this.dynamicToBuffer(dynamic[i - 1], output);\n          output.buffer += statics[i];\n        }\n      }\n    }\n\n    dynamicToBuffer(rendered, output) {\n      if (typeof rendered === \"number\") {\n        output.buffer += this.recursiveCIDToString(output.components, rendered, output.onlyCids);\n      } else if (isObject(rendered)) {\n        this.toOutputBuffer(rendered, output);\n      } else {\n        output.buffer += rendered;\n      }\n    }\n\n    recursiveCIDToString(components, cid, onlyCids) {\n      let component = components[cid] || logError(`no component for CID ${cid}`, components);\n      let template = document.createElement(\"template\");\n      template.innerHTML = this.recursiveToString(component, components, onlyCids);\n      let container = template.content;\n      let skip = onlyCids && !onlyCids.has(cid);\n      let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i) => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n          if (child.getAttribute(PHX_COMPONENT)) {\n            return [hasNodes, true];\n          }\n\n          child.setAttribute(PHX_COMPONENT, cid);\n\n          if (!child.id) {\n            child.id = `${this.parentViewId()}-${cid}-${i}`;\n          }\n\n          if (skip) {\n            child.setAttribute(PHX_SKIP, \"\");\n            child.innerHTML = \"\";\n          }\n\n          return [true, hasComponents];\n        } else {\n          if (child.nodeValue.trim() !== \"\") {\n            logError(`only HTML element tags are allowed at the root of components.\n\ngot: \"${child.nodeValue.trim()}\"\n\nwithin:\n`, template.innerHTML.trim());\n            child.replaceWith(this.createSpan(child.nodeValue, cid));\n            return [true, hasComponents];\n          } else {\n            child.remove();\n            return [hasNodes, hasComponents];\n          }\n        }\n      }, [false, false]);\n\n      if (!hasChildNodes && !hasChildComponents) {\n        logError(\"expected at least one HTML element tag inside a component, but the component is empty:\\n\", template.innerHTML.trim());\n        return this.createSpan(\"\", cid).outerHTML;\n      } else if (!hasChildNodes && hasChildComponents) {\n        logError(\"expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.\", template.innerHTML.trim());\n        return template.innerHTML;\n      } else {\n        return template.innerHTML;\n      }\n    }\n\n    createSpan(text, cid) {\n      let span = document.createElement(\"span\");\n      span.innerText = text;\n      span.setAttribute(PHX_COMPONENT, cid);\n      return span;\n    }\n\n  }; // js/phoenix_live_view/view_hook.js\n\n  var viewHookID = 1;\n  var ViewHook = class {\n    static makeID() {\n      return viewHookID++;\n    }\n\n    static elementID(el) {\n      return el.phxHookId;\n    }\n\n    constructor(view, el, callbacks) {\n      this.__view = view;\n      this.__liveSocket = view.liveSocket;\n      this.__callbacks = callbacks;\n      this.__listeners = new Set();\n      this.__isDisconnected = false;\n      this.el = el;\n      this.el.phxHookId = this.constructor.makeID();\n\n      for (let key in this.__callbacks) {\n        this[key] = this.__callbacks[key];\n      }\n    }\n\n    __mounted() {\n      this.mounted && this.mounted();\n    }\n\n    __updated() {\n      this.updated && this.updated();\n    }\n\n    __beforeUpdate() {\n      this.beforeUpdate && this.beforeUpdate();\n    }\n\n    __destroyed() {\n      this.destroyed && this.destroyed();\n    }\n\n    __reconnected() {\n      if (this.__isDisconnected) {\n        this.__isDisconnected = false;\n        this.reconnected && this.reconnected();\n      }\n    }\n\n    __disconnected() {\n      this.__isDisconnected = true;\n      this.disconnected && this.disconnected();\n    }\n\n    pushEvent(event, payload = {}, onReply = function () {}) {\n      return this.__view.pushHookEvent(null, event, payload, onReply);\n    }\n\n    pushEventTo(phxTarget, event, payload = {}, onReply = function () {}) {\n      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {\n        return view.pushHookEvent(targetCtx, event, payload, onReply);\n      });\n    }\n\n    handleEvent(event, callback) {\n      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);\n\n      window.addEventListener(`phx:hook:${event}`, callbackRef);\n\n      this.__listeners.add(callbackRef);\n\n      return callbackRef;\n    }\n\n    removeHandleEvent(callbackRef) {\n      let event = callbackRef(null, true);\n      window.removeEventListener(`phx:hook:${event}`, callbackRef);\n\n      this.__listeners.delete(callbackRef);\n    }\n\n    upload(name, files) {\n      return this.__view.dispatchUploads(name, files);\n    }\n\n    uploadTo(phxTarget, name, files) {\n      return this.__view.withinTargets(phxTarget, view => view.dispatchUploads(name, files));\n    }\n\n    __cleanup__() {\n      this.__listeners.forEach(callbackRef => this.removeHandleEvent(callbackRef));\n    }\n\n  }; // js/phoenix_live_view/view.js\n\n  var serializeForm = (form, meta = {}) => {\n    let formData = new FormData(form);\n    let toRemove = [];\n    formData.forEach((val, key, _index) => {\n      if (val instanceof File) {\n        toRemove.push(key);\n      }\n    });\n    toRemove.forEach(key => formData.delete(key));\n    let params = new URLSearchParams();\n\n    for (let [key, val] of formData.entries()) {\n      params.append(key, val);\n    }\n\n    for (let metaKey in meta) {\n      params.append(metaKey, meta[metaKey]);\n    }\n\n    return params.toString();\n  };\n\n  var View = class {\n    constructor(el, liveSocket, parentView, flash) {\n      this.liveSocket = liveSocket;\n      this.flash = flash;\n      this.parent = parentView;\n      this.root = parentView ? parentView.root : this;\n      this.el = el;\n      this.id = this.el.id;\n      this.ref = 0;\n      this.childJoins = 0;\n      this.loaderTimer = null;\n      this.pendingDiffs = [];\n      this.pruningCIDs = [];\n      this.redirect = false;\n      this.href = null;\n      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;\n      this.joinPending = true;\n      this.destroyed = false;\n\n      this.joinCallback = function () {};\n\n      this.stopCallback = function () {};\n\n      this.pendingJoinOps = this.parent ? null : [];\n      this.viewHooks = {};\n      this.uploaders = {};\n      this.formSubmits = [];\n      this.children = this.parent ? null : {};\n      this.root.children[this.id] = {};\n      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {\n        return {\n          redirect: this.redirect ? this.href : void 0,\n          url: this.redirect ? void 0 : this.href || void 0,\n          params: this.connectParams(),\n          session: this.getSession(),\n          static: this.getStatic(),\n          flash: this.flash\n        };\n      });\n      this.showLoader(this.liveSocket.loaderTimeout);\n      this.bindChannel();\n    }\n\n    setHref(href) {\n      this.href = href;\n    }\n\n    setRedirect(href) {\n      this.redirect = true;\n      this.href = href;\n    }\n\n    isMain() {\n      return this.liveSocket.main === this;\n    }\n\n    connectParams() {\n      let params = this.liveSocket.params(this.el);\n      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map(node => node.src || node.href).filter(url => typeof url === \"string\");\n\n      if (manifest.length > 0) {\n        params[\"_track_static\"] = manifest;\n      }\n\n      params[\"_mounts\"] = this.joinCount;\n      return params;\n    }\n\n    isConnected() {\n      return this.channel.canPush();\n    }\n\n    getSession() {\n      return this.el.getAttribute(PHX_SESSION);\n    }\n\n    getStatic() {\n      let val = this.el.getAttribute(PHX_STATIC);\n      return val === \"\" ? null : val;\n    }\n\n    destroy(callback = function () {}) {\n      this.destroyAllChildren();\n      this.destroyed = true;\n      delete this.root.children[this.id];\n\n      if (this.parent) {\n        delete this.root.children[this.parent.id][this.id];\n      }\n\n      clearTimeout(this.loaderTimer);\n\n      let onFinished = () => {\n        callback();\n\n        for (let id in this.viewHooks) {\n          this.destroyHook(this.viewHooks[id]);\n        }\n      };\n\n      dom_default.markPhxChildDestroyed(this.el);\n      this.log(\"destroyed\", () => [\"the child has been removed from the parent\"]);\n      this.channel.leave().receive(\"ok\", onFinished).receive(\"error\", onFinished).receive(\"timeout\", onFinished);\n    }\n\n    setContainerClasses(...classes) {\n      this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);\n      this.el.classList.add(...classes);\n    }\n\n    isLoading() {\n      return this.el.classList.contains(PHX_DISCONNECTED_CLASS);\n    }\n\n    showLoader(timeout) {\n      clearTimeout(this.loaderTimer);\n\n      if (timeout) {\n        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);\n      } else {\n        for (let id in this.viewHooks) {\n          this.viewHooks[id].__disconnected();\n        }\n\n        this.setContainerClasses(PHX_DISCONNECTED_CLASS);\n      }\n    }\n\n    hideLoader() {\n      clearTimeout(this.loaderTimer);\n      this.setContainerClasses(PHX_CONNECTED_CLASS);\n    }\n\n    triggerReconnected() {\n      for (let id in this.viewHooks) {\n        this.viewHooks[id].__reconnected();\n      }\n    }\n\n    log(kind, msgCallback) {\n      this.liveSocket.log(this, kind, msgCallback);\n    }\n\n    withinTargets(phxTarget, callback) {\n      if (phxTarget instanceof HTMLElement) {\n        return this.liveSocket.owner(phxTarget, view => callback(view, phxTarget));\n      }\n\n      if (/^(0|[1-9]\\d*)$/.test(phxTarget)) {\n        let targets = dom_default.findComponentNodeList(this.el, phxTarget);\n\n        if (targets.length === 0) {\n          logError(`no component found matching phx-target of ${phxTarget}`);\n        } else {\n          callback(this, targets[0]);\n        }\n      } else {\n        let targets = Array.from(document.querySelectorAll(phxTarget));\n\n        if (targets.length === 0) {\n          logError(`nothing found matching the phx-target selector \"${phxTarget}\"`);\n        }\n\n        targets.forEach(target => this.liveSocket.owner(target, view => callback(view, target)));\n      }\n    }\n\n    applyDiff(type, rawDiff, callback) {\n      this.log(type, () => [\"\", clone(rawDiff)]);\n      let {\n        diff,\n        reply,\n        events,\n        title\n      } = Rendered.extract(rawDiff);\n\n      if (title) {\n        dom_default.putTitle(title);\n      }\n\n      callback({\n        diff,\n        reply,\n        events\n      });\n      return reply;\n    }\n\n    onJoin(resp) {\n      let {\n        rendered,\n        container\n      } = resp;\n\n      if (container) {\n        let [tag, attrs] = container;\n        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);\n      }\n\n      this.childJoins = 0;\n      this.joinPending = true;\n      this.flash = null;\n      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);\n      this.applyDiff(\"mount\", rendered, ({\n        diff,\n        events\n      }) => {\n        this.rendered = new Rendered(this.id, diff);\n        let html = this.renderContainer(null, \"join\");\n        this.dropPendingRefs();\n        let forms = this.formsForRecovery(html);\n        this.joinCount++;\n\n        if (forms.length > 0) {\n          forms.forEach(([form, newForm, newCid], i) => {\n            this.pushFormRecovery(form, newCid, resp2 => {\n              if (i === forms.length - 1) {\n                this.onJoinComplete(resp2, html, events);\n              }\n            });\n          });\n        } else {\n          this.onJoinComplete(resp, html, events);\n        }\n      });\n    }\n\n    dropPendingRefs() {\n      dom_default.all(this.el, `[${PHX_REF}]`, el => el.removeAttribute(PHX_REF));\n    }\n\n    onJoinComplete({\n      live_patch\n    }, html, events) {\n      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {\n        return this.applyJoinPatch(live_patch, html, events);\n      }\n\n      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter(toEl => {\n        let fromEl = toEl.id && this.el.querySelector(`[id=\"${toEl.id}\"]`);\n        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);\n\n        if (phxStatic) {\n          toEl.setAttribute(PHX_STATIC, phxStatic);\n        }\n\n        return this.joinChild(toEl);\n      });\n\n      if (newChildren.length === 0) {\n        if (this.parent) {\n          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);\n          this.parent.ackJoin(this);\n        } else {\n          this.onAllChildJoinsComplete();\n          this.applyJoinPatch(live_patch, html, events);\n        }\n      } else {\n        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);\n      }\n    }\n\n    attachTrueDocEl() {\n      this.el = dom_default.byId(this.id);\n      this.el.setAttribute(PHX_ROOT_ID, this.root.id);\n    }\n\n    dispatchEvents(events) {\n      events.forEach(([event, payload]) => {\n        window.dispatchEvent(new CustomEvent(`phx:hook:${event}`, {\n          detail: payload\n        }));\n      });\n    }\n\n    applyJoinPatch(live_patch, html, events) {\n      this.attachTrueDocEl();\n      let patch = new DOMPatch(this, this.el, this.id, html, null);\n      patch.markPrunableContentForRemoval();\n      this.performPatch(patch, false);\n      this.joinNewChildren();\n      dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, hookEl => {\n        let hook = this.addHook(hookEl);\n\n        if (hook) {\n          hook.__mounted();\n        }\n      });\n      this.joinPending = false;\n      this.dispatchEvents(events);\n      this.applyPendingUpdates();\n\n      if (live_patch) {\n        let {\n          kind,\n          to\n        } = live_patch;\n        this.liveSocket.historyPatch(to, kind);\n      }\n\n      this.hideLoader();\n\n      if (this.joinCount > 1) {\n        this.triggerReconnected();\n      }\n\n      this.stopCallback();\n    }\n\n    triggerBeforeUpdateHook(fromEl, toEl) {\n      this.liveSocket.triggerDOM(\"onBeforeElUpdated\", [fromEl, toEl]);\n      let hook = this.getHook(fromEl);\n      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));\n\n      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {\n        hook.__beforeUpdate();\n\n        return hook;\n      }\n    }\n\n    performPatch(patch, pruneCids) {\n      let destroyedCIDs = [];\n      let phxChildrenAdded = false;\n      let updatedHookIds = new Set();\n      patch.after(\"added\", el => {\n        this.liveSocket.triggerDOM(\"onNodeAdded\", [el]);\n        let newHook = this.addHook(el);\n\n        if (newHook) {\n          newHook.__mounted();\n        }\n      });\n      patch.after(\"phxChildAdded\", _el => phxChildrenAdded = true);\n      patch.before(\"updated\", (fromEl, toEl) => {\n        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);\n\n        if (hook) {\n          updatedHookIds.add(fromEl.id);\n        }\n      });\n      patch.after(\"updated\", el => {\n        if (updatedHookIds.has(el.id)) {\n          this.getHook(el).__updated();\n        }\n      });\n      patch.after(\"discarded\", el => {\n        let cid = this.componentID(el);\n\n        if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {\n          destroyedCIDs.push(cid);\n        }\n\n        let hook = this.getHook(el);\n        hook && this.destroyHook(hook);\n      });\n      patch.perform();\n\n      if (pruneCids) {\n        this.maybePushComponentsDestroyed(destroyedCIDs);\n      }\n\n      return phxChildrenAdded;\n    }\n\n    joinNewChildren() {\n      dom_default.findPhxChildren(this.el, this.id).forEach(el => this.joinChild(el));\n    }\n\n    getChildById(id) {\n      return this.root.children[this.id][id];\n    }\n\n    getDescendentByEl(el) {\n      if (el.id === this.id) {\n        return this;\n      } else {\n        return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];\n      }\n    }\n\n    destroyDescendent(id) {\n      for (let parentId in this.root.children) {\n        for (let childId in this.root.children[parentId]) {\n          if (childId === id) {\n            return this.root.children[parentId][childId].destroy();\n          }\n        }\n      }\n    }\n\n    joinChild(el) {\n      let child = this.getChildById(el.id);\n\n      if (!child) {\n        let view = new View(el, this.liveSocket, this);\n        this.root.children[this.id][view.id] = view;\n        view.join();\n        this.childJoins++;\n        return true;\n      }\n    }\n\n    isJoinPending() {\n      return this.joinPending;\n    }\n\n    ackJoin(_child) {\n      this.childJoins--;\n\n      if (this.childJoins === 0) {\n        if (this.parent) {\n          this.parent.ackJoin(this);\n        } else {\n          this.onAllChildJoinsComplete();\n        }\n      }\n    }\n\n    onAllChildJoinsComplete() {\n      this.joinCallback();\n      this.pendingJoinOps.forEach(([view, op]) => {\n        if (!view.isDestroyed()) {\n          op();\n        }\n      });\n      this.pendingJoinOps = [];\n    }\n\n    update(diff, events) {\n      if (this.isJoinPending() || this.liveSocket.hasPendingLink()) {\n        return this.pendingDiffs.push({\n          diff,\n          events\n        });\n      }\n\n      this.rendered.mergeDiff(diff);\n      let phxChildrenAdded = false;\n\n      if (this.rendered.isComponentOnlyDiff(diff)) {\n        this.liveSocket.time(\"component patch complete\", () => {\n          let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));\n          parentCids.forEach(parentCID => {\n            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {\n              phxChildrenAdded = true;\n            }\n          });\n        });\n      } else if (!isEmpty(diff)) {\n        this.liveSocket.time(\"full patch complete\", () => {\n          let html = this.renderContainer(diff, \"update\");\n          let patch = new DOMPatch(this, this.el, this.id, html, null);\n          phxChildrenAdded = this.performPatch(patch, true);\n        });\n      }\n\n      this.dispatchEvents(events);\n\n      if (phxChildrenAdded) {\n        this.joinNewChildren();\n      }\n    }\n\n    renderContainer(diff, kind) {\n      return this.liveSocket.time(`toString diff (${kind})`, () => {\n        let tag = this.el.tagName;\n        let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;\n        let html = this.rendered.toString(cids);\n        return `<${tag}>${html}</${tag}>`;\n      });\n    }\n\n    componentPatch(diff, cid) {\n      if (isEmpty(diff)) return false;\n      let html = this.rendered.componentToString(cid);\n      let patch = new DOMPatch(this, this.el, this.id, html, cid);\n      let childrenAdded = this.performPatch(patch, true);\n      return childrenAdded;\n    }\n\n    getHook(el) {\n      return this.viewHooks[ViewHook.elementID(el)];\n    }\n\n    addHook(el) {\n      if (ViewHook.elementID(el) || !el.getAttribute) {\n        return;\n      }\n\n      let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));\n\n      if (hookName && !this.ownsElement(el)) {\n        return;\n      }\n\n      let callbacks = this.liveSocket.getHookCallbacks(hookName);\n\n      if (callbacks) {\n        if (!el.id) {\n          logError(`no DOM ID for hook \"${hookName}\". Hooks require a unique ID on each element.`, el);\n        }\n\n        let hook = new ViewHook(this, el, callbacks);\n        this.viewHooks[ViewHook.elementID(hook.el)] = hook;\n        return hook;\n      } else if (hookName !== null) {\n        logError(`unknown hook found for \"${hookName}\"`, el);\n      }\n    }\n\n    destroyHook(hook) {\n      hook.__destroyed();\n\n      hook.__cleanup__();\n\n      delete this.viewHooks[ViewHook.elementID(hook.el)];\n    }\n\n    applyPendingUpdates() {\n      this.pendingDiffs.forEach(({\n        diff,\n        events\n      }) => this.update(diff, events));\n      this.pendingDiffs = [];\n    }\n\n    onChannel(event, cb) {\n      this.liveSocket.onChannel(this.channel, event, resp => {\n        if (this.isJoinPending()) {\n          this.root.pendingJoinOps.push([this, () => cb(resp)]);\n        } else {\n          cb(resp);\n        }\n      });\n    }\n\n    bindChannel() {\n      this.liveSocket.onChannel(this.channel, \"diff\", rawDiff => {\n        this.applyDiff(\"update\", rawDiff, ({\n          diff,\n          events\n        }) => this.update(diff, events));\n      });\n      this.onChannel(\"redirect\", ({\n        to,\n        flash\n      }) => this.onRedirect({\n        to,\n        flash\n      }));\n      this.onChannel(\"live_patch\", redir => this.onLivePatch(redir));\n      this.onChannel(\"live_redirect\", redir => this.onLiveRedirect(redir));\n      this.channel.onError(reason => this.onError(reason));\n      this.channel.onClose(reason => this.onClose(reason));\n    }\n\n    destroyAllChildren() {\n      for (let id in this.root.children[this.id]) {\n        this.getChildById(id).destroy();\n      }\n    }\n\n    onLiveRedirect(redir) {\n      let {\n        to,\n        kind,\n        flash\n      } = redir;\n      let url = this.expandURL(to);\n      this.liveSocket.historyRedirect(url, kind, flash);\n    }\n\n    onLivePatch(redir) {\n      let {\n        to,\n        kind\n      } = redir;\n      this.href = this.expandURL(to);\n      this.liveSocket.historyPatch(to, kind);\n    }\n\n    expandURL(to) {\n      return to.startsWith(\"/\") ? `${window.location.protocol}//${window.location.host}${to}` : to;\n    }\n\n    onRedirect({\n      to,\n      flash\n    }) {\n      this.liveSocket.redirect(to, flash);\n    }\n\n    isDestroyed() {\n      return this.destroyed;\n    }\n\n    join(callback) {\n      if (!this.parent) {\n        this.stopCallback = this.liveSocket.withPageLoading({\n          to: this.href,\n          kind: \"initial\"\n        });\n      }\n\n      this.joinCallback = () => callback && callback(this.joinCount);\n\n      this.liveSocket.wrapPush(this, {\n        timeout: false\n      }, () => {\n        return this.channel.join().receive(\"ok\", data => !this.isDestroyed() && this.onJoin(data)).receive(\"error\", resp => !this.isDestroyed() && this.onJoinError(resp)).receive(\"timeout\", () => !this.isDestroyed() && this.onJoinError({\n          reason: \"timeout\"\n        }));\n      });\n    }\n\n    onJoinError(resp) {\n      if (resp.reason === \"unauthorized\" || resp.reason === \"stale\") {\n        this.log(\"error\", () => [\"unauthorized live_redirect. Falling back to page request\", resp]);\n        return this.onRedirect({\n          to: this.href\n        });\n      }\n\n      if (resp.redirect || resp.live_redirect) {\n        this.joinPending = false;\n        this.channel.leave();\n      }\n\n      if (resp.redirect) {\n        return this.onRedirect(resp.redirect);\n      }\n\n      if (resp.live_redirect) {\n        return this.onLiveRedirect(resp.live_redirect);\n      }\n\n      this.log(\"error\", () => [\"unable to join\", resp]);\n      return this.liveSocket.reloadWithJitter(this);\n    }\n\n    onClose(reason) {\n      if (this.isDestroyed()) {\n        return;\n      }\n\n      if (this.isJoinPending() && document.visibilityState !== \"hidden\" || this.liveSocket.hasPendingLink() && reason !== \"leave\") {\n        return this.liveSocket.reloadWithJitter(this);\n      }\n\n      this.destroyAllChildren();\n      this.liveSocket.dropActiveElement(this);\n\n      if (document.activeElement) {\n        document.activeElement.blur();\n      }\n\n      if (this.liveSocket.isUnloaded()) {\n        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);\n      }\n    }\n\n    onError(reason) {\n      this.onClose(reason);\n      this.log(\"error\", () => [\"view crashed\", reason]);\n\n      if (!this.liveSocket.isUnloaded()) {\n        this.displayError();\n      }\n    }\n\n    displayError() {\n      if (this.isMain()) {\n        dom_default.dispatchEvent(window, \"phx:page-loading-start\", {\n          to: this.href,\n          kind: \"error\"\n        });\n      }\n\n      this.showLoader();\n      this.setContainerClasses(PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);\n    }\n\n    pushWithReply(refGenerator, event, payload, onReply = function () {}) {\n      if (!this.isConnected()) {\n        return;\n      }\n\n      let [ref, [el]] = refGenerator ? refGenerator() : [null, []];\n\n      let onLoadingDone = function () {};\n\n      if (el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {\n        onLoadingDone = this.liveSocket.withPageLoading({\n          kind: \"element\",\n          target: el\n        });\n      }\n\n      if (typeof payload.cid !== \"number\") {\n        delete payload.cid;\n      }\n\n      return this.liveSocket.wrapPush(this, {\n        timeout: true\n      }, () => {\n        return this.channel.push(event, payload, PUSH_TIMEOUT).receive(\"ok\", resp => {\n          let hookReply = null;\n\n          if (ref !== null) {\n            this.undoRefs(ref);\n          }\n\n          if (resp.diff) {\n            hookReply = this.applyDiff(\"update\", resp.diff, ({\n              diff,\n              events\n            }) => {\n              this.update(diff, events);\n            });\n          }\n\n          if (resp.redirect) {\n            this.onRedirect(resp.redirect);\n          }\n\n          if (resp.live_patch) {\n            this.onLivePatch(resp.live_patch);\n          }\n\n          if (resp.live_redirect) {\n            this.onLiveRedirect(resp.live_redirect);\n          }\n\n          onLoadingDone();\n          onReply(resp, hookReply);\n        });\n      });\n    }\n\n    undoRefs(ref) {\n      dom_default.all(this.el, `[${PHX_REF}=\"${ref}\"]`, el => {\n        let disabledVal = el.getAttribute(PHX_DISABLED);\n        el.removeAttribute(PHX_REF);\n\n        if (el.getAttribute(PHX_READONLY) !== null) {\n          el.readOnly = false;\n          el.removeAttribute(PHX_READONLY);\n        }\n\n        if (disabledVal !== null) {\n          el.disabled = disabledVal === \"true\" ? true : false;\n          el.removeAttribute(PHX_DISABLED);\n        }\n\n        PHX_EVENT_CLASSES.forEach(className => dom_default.removeClass(el, className));\n        let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);\n\n        if (disableRestore !== null) {\n          el.innerText = disableRestore;\n          el.removeAttribute(PHX_DISABLE_WITH_RESTORE);\n        }\n\n        let toEl = dom_default.private(el, PHX_REF);\n\n        if (toEl) {\n          let hook = this.triggerBeforeUpdateHook(el, toEl);\n          DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());\n\n          if (hook) {\n            hook.__updated();\n          }\n\n          dom_default.deletePrivate(el, PHX_REF);\n        }\n      });\n    }\n\n    putRef(elements, event) {\n      let newRef = this.ref++;\n      let disableWith = this.binding(PHX_DISABLE_WITH);\n      elements.forEach(el => {\n        el.classList.add(`phx-${event}-loading`);\n        el.setAttribute(PHX_REF, newRef);\n        let disableText = el.getAttribute(disableWith);\n\n        if (disableText !== null) {\n          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {\n            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);\n          }\n\n          el.innerText = disableText;\n        }\n      });\n      return [newRef, elements];\n    }\n\n    componentID(el) {\n      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);\n      return cid ? parseInt(cid) : null;\n    }\n\n    targetComponentID(target, targetCtx) {\n      if (target.getAttribute(this.binding(\"target\"))) {\n        return this.closestComponentID(targetCtx);\n      } else {\n        return null;\n      }\n    }\n\n    closestComponentID(targetCtx) {\n      if (targetCtx) {\n        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), el => this.ownsElement(el) && this.componentID(el));\n      } else {\n        return null;\n      }\n    }\n\n    pushHookEvent(targetCtx, event, payload, onReply) {\n      if (!this.isConnected()) {\n        this.log(\"hook\", () => [\"unable to push hook event. LiveView not connected\", event, payload]);\n        return false;\n      }\n\n      let [ref, els] = this.putRef([], \"hook\");\n      this.pushWithReply(() => [ref, els], \"event\", {\n        type: \"hook\",\n        event,\n        value: payload,\n        cid: this.closestComponentID(targetCtx)\n      }, (resp, reply) => onReply(reply, ref));\n      return ref;\n    }\n\n    extractMeta(el, meta) {\n      let prefix = this.binding(\"value-\");\n\n      for (let i = 0; i < el.attributes.length; i++) {\n        let name = el.attributes[i].name;\n\n        if (name.startsWith(prefix)) {\n          meta[name.replace(prefix, \"\")] = el.getAttribute(name);\n        }\n      }\n\n      if (el.value !== void 0) {\n        meta.value = el.value;\n\n        if (el.tagName === \"INPUT\" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {\n          delete meta.value;\n        }\n      }\n\n      return meta;\n    }\n\n    pushEvent(type, el, targetCtx, phxEvent, meta) {\n      this.pushWithReply(() => this.putRef([el], type), \"event\", {\n        type,\n        event: phxEvent,\n        value: this.extractMeta(el, meta),\n        cid: this.targetComponentID(el, targetCtx)\n      });\n    }\n\n    pushKey(keyElement, targetCtx, kind, phxEvent, meta) {\n      this.pushWithReply(() => this.putRef([keyElement], kind), \"event\", {\n        type: kind,\n        event: phxEvent,\n        value: this.extractMeta(keyElement, meta),\n        cid: this.targetComponentID(keyElement, targetCtx)\n      });\n    }\n\n    pushFileProgress(fileEl, entryRef, progress, onReply = function () {}) {\n      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {\n        view.pushWithReply(null, \"progress\", {\n          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),\n          ref: fileEl.getAttribute(PHX_UPLOAD_REF),\n          entry_ref: entryRef,\n          progress,\n          cid: view.targetComponentID(fileEl.form, targetCtx)\n        }, onReply);\n      });\n    }\n\n    pushInput(inputEl, targetCtx, forceCid, phxEvent, eventTarget, callback) {\n      let uploads;\n      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);\n\n      let refGenerator = () => this.putRef([inputEl, inputEl.form], \"change\");\n\n      let formData = serializeForm(inputEl.form, {\n        _target: eventTarget.name\n      });\n\n      if (inputEl.files && inputEl.files.length > 0) {\n        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));\n      }\n\n      uploads = LiveUploader.serializeUploads(inputEl);\n      let event = {\n        type: \"form\",\n        event: phxEvent,\n        value: formData,\n        uploads,\n        cid\n      };\n      this.pushWithReply(refGenerator, \"event\", event, resp => {\n        dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));\n\n        if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute(\"data-phx-auto-upload\") !== null) {\n          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {\n            let [ref, _els] = refGenerator();\n            this.uploadFiles(inputEl.form, targetCtx, ref, cid, _uploads => {\n              callback && callback(resp);\n              this.triggerAwaitingSubmit(inputEl.form);\n            });\n          }\n        } else {\n          callback && callback(resp);\n        }\n      });\n    }\n\n    triggerAwaitingSubmit(formEl) {\n      let awaitingSubmit = this.getScheduledSubmit(formEl);\n\n      if (awaitingSubmit) {\n        let [_el, _ref, callback] = awaitingSubmit;\n        this.cancelSubmit(formEl);\n        callback();\n      }\n    }\n\n    getScheduledSubmit(formEl) {\n      return this.formSubmits.find(([el, _callback]) => el.isSameNode(formEl));\n    }\n\n    scheduleSubmit(formEl, ref, callback) {\n      if (this.getScheduledSubmit(formEl)) {\n        return true;\n      }\n\n      this.formSubmits.push([formEl, ref, callback]);\n    }\n\n    cancelSubmit(formEl) {\n      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {\n        if (el.isSameNode(formEl)) {\n          this.undoRefs(ref);\n          return false;\n        } else {\n          return true;\n        }\n      });\n    }\n\n    pushFormSubmit(formEl, targetCtx, phxEvent, onReply) {\n      let filterIgnored = el => {\n        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);\n        return !(userIgnored || closestPhxBinding(el, \"data-phx-update=ignore\", el.form));\n      };\n\n      let filterDisables = el => {\n        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));\n      };\n\n      let filterButton = el => el.tagName == \"BUTTON\";\n\n      let filterInput = el => [\"INPUT\", \"TEXTAREA\", \"SELECT\"].includes(el.tagName);\n\n      let refGenerator = () => {\n        let formElements = Array.from(formEl.elements);\n        let disables = formElements.filter(filterDisables);\n        let buttons = formElements.filter(filterButton).filter(filterIgnored);\n        let inputs = formElements.filter(filterInput).filter(filterIgnored);\n        buttons.forEach(button => {\n          button.setAttribute(PHX_DISABLED, button.disabled);\n          button.disabled = true;\n        });\n        inputs.forEach(input => {\n          input.setAttribute(PHX_READONLY, input.readOnly);\n          input.readOnly = true;\n\n          if (input.files) {\n            input.setAttribute(PHX_DISABLED, input.disabled);\n            input.disabled = true;\n          }\n        });\n        formEl.setAttribute(this.binding(PHX_PAGE_LOADING), \"\");\n        return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), \"submit\");\n      };\n\n      let cid = this.targetComponentID(formEl, targetCtx);\n\n      if (LiveUploader.hasUploadsInProgress(formEl)) {\n        let [ref, _els] = refGenerator();\n        return this.scheduleSubmit(formEl, ref, () => this.pushFormSubmit(formEl, targetCtx, phxEvent, onReply));\n      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {\n        let [ref, els] = refGenerator();\n\n        let proxyRefGen = () => [ref, els];\n\n        this.uploadFiles(formEl, targetCtx, ref, cid, _uploads => {\n          let formData = serializeForm(formEl, {});\n          this.pushWithReply(proxyRefGen, \"event\", {\n            type: \"form\",\n            event: phxEvent,\n            value: formData,\n            cid\n          }, onReply);\n        });\n      } else {\n        let formData = serializeForm(formEl);\n        this.pushWithReply(refGenerator, \"event\", {\n          type: \"form\",\n          event: phxEvent,\n          value: formData,\n          cid\n        }, onReply);\n      }\n    }\n\n    uploadFiles(formEl, targetCtx, ref, cid, onComplete) {\n      let joinCountAtUpload = this.joinCount;\n      let inputEls = LiveUploader.activeFileInputs(formEl);\n      let numFileInputsInProgress = inputEls.length;\n      inputEls.forEach(inputEl => {\n        let uploader = new LiveUploader(inputEl, this, () => {\n          numFileInputsInProgress--;\n\n          if (numFileInputsInProgress === 0) {\n            onComplete();\n          }\n        });\n        this.uploaders[inputEl] = uploader;\n        let entries = uploader.entries().map(entry => entry.toPreflightPayload());\n        let payload = {\n          ref: inputEl.getAttribute(PHX_UPLOAD_REF),\n          entries,\n          cid: this.targetComponentID(inputEl.form, targetCtx)\n        };\n        this.log(\"upload\", () => [\"sending preflight request\", payload]);\n        this.pushWithReply(null, \"allow_upload\", payload, resp => {\n          this.log(\"upload\", () => [\"got preflight response\", resp]);\n\n          if (resp.error) {\n            this.undoRefs(ref);\n            let [entry_ref, reason] = resp.error;\n            this.log(\"upload\", () => [`error for entry ${entry_ref}`, reason]);\n          } else {\n            let onError = callback => {\n              this.channel.onError(() => {\n                if (this.joinCount === joinCountAtUpload) {\n                  callback();\n                }\n              });\n            };\n\n            uploader.initAdapterUpload(resp, onError, this.liveSocket);\n          }\n        });\n      });\n    }\n\n    dispatchUploads(name, filesOrBlobs) {\n      let inputs = dom_default.findUploadInputs(this.el).filter(el => el.name === name);\n\n      if (inputs.length === 0) {\n        logError(`no live file inputs found matching the name \"${name}\"`);\n      } else if (inputs.length > 1) {\n        logError(`duplicate live file inputs found matching the name \"${name}\"`);\n      } else {\n        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, {\n          files: filesOrBlobs\n        });\n      }\n    }\n\n    pushFormRecovery(form, newCid, callback) {\n      this.liveSocket.withinOwners(form, (view, targetCtx) => {\n        let input = form.elements[0];\n        let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding(\"change\"));\n        view.pushInput(input, targetCtx, newCid, phxEvent, input, callback);\n      });\n    }\n\n    pushLinkPatch(href, targetEl, callback) {\n      let linkRef = this.liveSocket.setPendingLink(href);\n      let refGen = targetEl ? () => this.putRef([targetEl], \"click\") : null;\n      this.pushWithReply(refGen, \"live_patch\", {\n        url: href\n      }, resp => {\n        if (resp.link_redirect) {\n          this.liveSocket.replaceMain(href, null, callback, linkRef);\n        } else {\n          if (this.liveSocket.commitPendingLink(linkRef)) {\n            this.href = href;\n          }\n\n          this.applyPendingUpdates();\n          callback && callback(linkRef);\n        }\n      }).receive(\"timeout\", () => this.liveSocket.redirect(window.location.href));\n    }\n\n    formsForRecovery(html) {\n      if (this.joinCount === 0) {\n        return [];\n      }\n\n      let phxChange = this.binding(\"change\");\n      let template = document.createElement(\"template\");\n      template.innerHTML = html;\n      return dom_default.all(this.el, `form[${phxChange}]`).filter(form => form.id && this.ownsElement(form)).filter(form => form.elements.length > 0).filter(form => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== \"ignore\").map(form => {\n        let newForm = template.content.querySelector(`form[id=\"${form.id}\"][${phxChange}=\"${form.getAttribute(phxChange)}\"]`);\n\n        if (newForm) {\n          return [form, newForm, this.componentID(newForm)];\n        } else {\n          return [form, null, null];\n        }\n      }).filter(([form, newForm, newCid]) => newForm);\n    }\n\n    maybePushComponentsDestroyed(destroyedCIDs) {\n      let willDestroyCIDs = destroyedCIDs.filter(cid => {\n        return dom_default.findComponentNodeList(this.el, cid).length === 0;\n      });\n\n      if (willDestroyCIDs.length > 0) {\n        this.pruningCIDs.push(...willDestroyCIDs);\n        this.pushWithReply(null, \"cids_will_destroy\", {\n          cids: willDestroyCIDs\n        }, () => {\n          this.pruningCIDs = this.pruningCIDs.filter(cid => willDestroyCIDs.indexOf(cid) !== -1);\n          let completelyDestroyCIDs = willDestroyCIDs.filter(cid => {\n            return dom_default.findComponentNodeList(this.el, cid).length === 0;\n          });\n\n          if (completelyDestroyCIDs.length > 0) {\n            this.pushWithReply(null, \"cids_destroyed\", {\n              cids: completelyDestroyCIDs\n            }, resp => {\n              this.rendered.pruneCIDs(resp.cids);\n            });\n          }\n        });\n      }\n    }\n\n    ownsElement(el) {\n      return el.getAttribute(PHX_PARENT_ID) === this.id || maybe(el.closest(PHX_VIEW_SELECTOR), node => node.id) === this.id;\n    }\n\n    submitForm(form, targetCtx, phxEvent) {\n      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);\n      this.liveSocket.blurActiveElement(this);\n      this.pushFormSubmit(form, targetCtx, phxEvent, () => {\n        this.liveSocket.restorePreviouslyActiveFocus();\n      });\n    }\n\n    binding(kind) {\n      return this.liveSocket.binding(kind);\n    }\n\n  }; // js/phoenix_live_view/live_socket.js\n\n  var LiveSocket = class {\n    constructor(url, phxSocket, opts = {}) {\n      this.unloaded = false;\n\n      if (!phxSocket || phxSocket.constructor.name === \"Object\") {\n        throw new Error(`\n      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:\n\n          import {Socket} from \"phoenix\"\n          import LiveSocket from \"phoenix_live_view\"\n          let liveSocket = new LiveSocket(\"/live\", Socket, {...})\n      `);\n      }\n\n      this.socket = new phxSocket(url, opts);\n      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;\n      this.opts = opts;\n      this.params = closure(opts.params || {});\n      this.viewLogger = opts.viewLogger;\n      this.metadataCallbacks = opts.metadata || {};\n      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});\n      this.activeElement = null;\n      this.prevActive = null;\n      this.silenced = false;\n      this.main = null;\n      this.linkRef = 1;\n      this.roots = {};\n      this.href = window.location.href;\n      this.pendingLink = null;\n      this.currentLocation = clone(window.location);\n      this.hooks = opts.hooks || {};\n      this.uploaders = opts.uploaders || {};\n      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;\n      this.localStorage = opts.localStorage || window.localStorage;\n      this.sessionStorage = opts.sessionStorage || window.sessionStorage;\n      this.boundTopLevelEvents = false;\n      this.domCallbacks = Object.assign({\n        onNodeAdded: closure(),\n        onBeforeElUpdated: closure()\n      }, opts.dom || {});\n      window.addEventListener(\"pagehide\", _e => {\n        this.unloaded = true;\n      });\n      this.socket.onOpen(() => {\n        if (this.isUnloaded()) {\n          window.location.reload();\n        }\n      });\n    }\n\n    isProfileEnabled() {\n      return this.sessionStorage.getItem(PHX_LV_PROFILE) === \"true\";\n    }\n\n    isDebugEnabled() {\n      return this.sessionStorage.getItem(PHX_LV_DEBUG) === \"true\";\n    }\n\n    enableDebug() {\n      this.sessionStorage.setItem(PHX_LV_DEBUG, \"true\");\n    }\n\n    enableProfiling() {\n      this.sessionStorage.setItem(PHX_LV_PROFILE, \"true\");\n    }\n\n    disableDebug() {\n      this.sessionStorage.removeItem(PHX_LV_DEBUG);\n    }\n\n    disableProfiling() {\n      this.sessionStorage.removeItem(PHX_LV_PROFILE);\n    }\n\n    enableLatencySim(upperBoundMs) {\n      this.enableDebug();\n      console.log(\"latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable\");\n      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);\n    }\n\n    disableLatencySim() {\n      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);\n    }\n\n    getLatencySim() {\n      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);\n      return str ? parseInt(str) : null;\n    }\n\n    getSocket() {\n      return this.socket;\n    }\n\n    connect() {\n      let doConnect = () => {\n        if (this.joinRootViews()) {\n          this.bindTopLevelEvents();\n          this.socket.connect();\n        }\n      };\n\n      if ([\"complete\", \"loaded\", \"interactive\"].indexOf(document.readyState) >= 0) {\n        doConnect();\n      } else {\n        document.addEventListener(\"DOMContentLoaded\", () => doConnect());\n      }\n    }\n\n    disconnect(callback) {\n      this.socket.disconnect(callback);\n    }\n\n    triggerDOM(kind, args) {\n      this.domCallbacks[kind](...args);\n    }\n\n    time(name, func) {\n      if (!this.isProfileEnabled() || !console.time) {\n        return func();\n      }\n\n      console.time(name);\n      let result = func();\n      console.timeEnd(name);\n      return result;\n    }\n\n    log(view, kind, msgCallback) {\n      if (this.viewLogger) {\n        let [msg, obj] = msgCallback();\n        this.viewLogger(view, kind, msg, obj);\n      } else if (this.isDebugEnabled()) {\n        let [msg, obj] = msgCallback();\n        debug(view, kind, msg, obj);\n      }\n    }\n\n    onChannel(channel, event, cb) {\n      channel.on(event, data => {\n        let latency = this.getLatencySim();\n\n        if (!latency) {\n          cb(data);\n        } else {\n          console.log(`simulating ${latency}ms of latency from server to client`);\n          setTimeout(() => cb(data), latency);\n        }\n      });\n    }\n\n    wrapPush(view, opts, push) {\n      let latency = this.getLatencySim();\n      let oldJoinCount = view.joinCount;\n\n      if (!latency) {\n        if (opts.timeout) {\n          return push().receive(\"timeout\", () => {\n            if (view.joinCount === oldJoinCount && !view.isDestroyed()) {\n              this.reloadWithJitter(view, () => {\n                this.log(view, \"timeout\", () => [\"received timeout while communicating with server. Falling back to hard refresh for recovery\"]);\n              });\n            }\n          });\n        } else {\n          return push();\n        }\n      }\n\n      console.log(`simulating ${latency}ms of latency from client to server`);\n      let fakePush = {\n        receives: [],\n\n        receive(kind, cb) {\n          this.receives.push([kind, cb]);\n        }\n\n      };\n      setTimeout(() => {\n        if (view.isDestroyed()) {\n          return;\n        }\n\n        fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());\n      }, latency);\n      return fakePush;\n    }\n\n    reloadWithJitter(view, log) {\n      view.destroy();\n      this.disconnect();\n      let [minMs, maxMs] = RELOAD_JITTER;\n      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;\n      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, count => count + 1);\n      log ? log() : this.log(view, \"join\", () => [`encountered ${tries} consecutive reloads`]);\n\n      if (tries > MAX_RELOADS) {\n        this.log(view, \"join\", () => [`exceeded ${MAX_RELOADS} consecutive reloads. Entering failsafe mode`]);\n        afterMs = FAILSAFE_JITTER;\n      }\n\n      setTimeout(() => {\n        if (this.hasPendingLink()) {\n          window.location = this.pendingLink;\n        } else {\n          window.location.reload();\n        }\n      }, afterMs);\n    }\n\n    getHookCallbacks(name) {\n      return name && name.startsWith(\"Phoenix.\") ? hooks_default[name.split(\".\")[1]] : this.hooks[name];\n    }\n\n    isUnloaded() {\n      return this.unloaded;\n    }\n\n    isConnected() {\n      return this.socket.isConnected();\n    }\n\n    getBindingPrefix() {\n      return this.bindingPrefix;\n    }\n\n    binding(kind) {\n      return `${this.getBindingPrefix()}${kind}`;\n    }\n\n    channel(topic, params) {\n      return this.socket.channel(topic, params);\n    }\n\n    joinRootViews() {\n      let rootsFound = false;\n      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, rootEl => {\n        if (!this.getRootById(rootEl.id)) {\n          let view = this.newRootView(rootEl);\n          view.setHref(this.getHref());\n          view.join();\n\n          if (rootEl.getAttribute(PHX_MAIN)) {\n            this.main = view;\n          }\n        }\n\n        rootsFound = true;\n      });\n      return rootsFound;\n    }\n\n    redirect(to, flash) {\n      this.disconnect();\n      browser_default.redirect(to, flash);\n    }\n\n    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {\n      let oldMainEl = this.main.el;\n      let newMainEl = dom_default.cloneNode(oldMainEl, \"\");\n      this.main.showLoader(this.loaderTimeout);\n      this.main.destroy();\n      this.main = this.newRootView(newMainEl, flash);\n      this.main.setRedirect(href);\n      this.main.join(joinCount => {\n        if (joinCount === 1 && this.commitPendingLink(linkRef)) {\n          oldMainEl.replaceWith(newMainEl);\n          callback && callback();\n        }\n      });\n    }\n\n    isPhxView(el) {\n      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;\n    }\n\n    newRootView(el, flash) {\n      let view = new View(el, this, null, flash);\n      this.roots[view.id] = view;\n      return view;\n    }\n\n    owner(childEl, callback) {\n      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), el => this.getViewByEl(el));\n\n      if (view) {\n        callback(view);\n      }\n    }\n\n    withinOwners(childEl, callback) {\n      this.owner(childEl, view => {\n        let phxTarget = childEl.getAttribute(this.binding(\"target\"));\n\n        if (phxTarget === null) {\n          callback(view, childEl);\n        } else {\n          view.withinTargets(phxTarget, callback);\n        }\n      });\n    }\n\n    getViewByEl(el) {\n      let rootId = el.getAttribute(PHX_ROOT_ID);\n      return maybe(this.getRootById(rootId), root => root.getDescendentByEl(el));\n    }\n\n    getRootById(id) {\n      return this.roots[id];\n    }\n\n    destroyAllViews() {\n      for (let id in this.roots) {\n        this.roots[id].destroy();\n        delete this.roots[id];\n      }\n    }\n\n    destroyViewByEl(el) {\n      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));\n\n      if (root) {\n        root.destroyDescendent(el.id);\n      }\n    }\n\n    setActiveElement(target) {\n      if (this.activeElement === target) {\n        return;\n      }\n\n      this.activeElement = target;\n\n      let cancel = () => {\n        if (target === this.activeElement) {\n          this.activeElement = null;\n        }\n\n        target.removeEventListener(\"mouseup\", this);\n        target.removeEventListener(\"touchend\", this);\n      };\n\n      target.addEventListener(\"mouseup\", cancel);\n      target.addEventListener(\"touchend\", cancel);\n    }\n\n    getActiveElement() {\n      if (document.activeElement === document.body) {\n        return this.activeElement || document.activeElement;\n      } else {\n        return document.activeElement || document.body;\n      }\n    }\n\n    dropActiveElement(view) {\n      if (this.prevActive && view.ownsElement(this.prevActive)) {\n        this.prevActive = null;\n      }\n    }\n\n    restorePreviouslyActiveFocus() {\n      if (this.prevActive && this.prevActive !== document.body) {\n        this.prevActive.focus();\n      }\n    }\n\n    blurActiveElement() {\n      this.prevActive = this.getActiveElement();\n\n      if (this.prevActive !== document.body) {\n        this.prevActive.blur();\n      }\n    }\n\n    bindTopLevelEvents() {\n      if (this.boundTopLevelEvents) {\n        return;\n      }\n\n      this.boundTopLevelEvents = true;\n      document.body.addEventListener(\"click\", function () {});\n      window.addEventListener(\"pageshow\", e => {\n        if (e.persisted) {\n          this.getSocket().disconnect();\n          this.withPageLoading({\n            to: window.location.href,\n            kind: \"redirect\"\n          });\n          window.location.reload();\n        }\n      }, true);\n      this.bindNav();\n      this.bindClicks();\n      this.bindForms();\n      this.bind({\n        keyup: \"keyup\",\n        keydown: \"keydown\"\n      }, (e, type, view, target, targetCtx, phxEvent, _phxTarget) => {\n        let matchKey = target.getAttribute(this.binding(PHX_KEY));\n        let pressedKey = e.key && e.key.toLowerCase();\n\n        if (matchKey && matchKey.toLowerCase() !== pressedKey) {\n          return;\n        }\n\n        view.pushKey(target, targetCtx, type, phxEvent, __spreadValues({\n          key: e.key\n        }, this.eventMeta(type, e, target)));\n      });\n      this.bind({\n        blur: \"focusout\",\n        focus: \"focusin\"\n      }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {\n        if (!phxTarget) {\n          view.pushEvent(type, targetEl, targetCtx, phxEvent, this.eventMeta(type, e, targetEl));\n        }\n      });\n      this.bind({\n        blur: \"blur\",\n        focus: \"focus\"\n      }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {\n        if (phxTarget && !phxTarget !== \"window\") {\n          view.pushEvent(type, targetEl, targetCtx, phxEvent, this.eventMeta(type, e, targetEl));\n        }\n      });\n      window.addEventListener(\"dragover\", e => e.preventDefault());\n      window.addEventListener(\"drop\", e => {\n        e.preventDefault();\n        let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), trueTarget => {\n          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));\n        });\n        let dropTarget = dropTargetId && document.getElementById(dropTargetId);\n        let files = Array.from(e.dataTransfer.files || []);\n\n        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {\n          return;\n        }\n\n        LiveUploader.trackFiles(dropTarget, files);\n        dropTarget.dispatchEvent(new Event(\"input\", {\n          bubbles: true\n        }));\n      });\n      this.on(PHX_TRACK_UPLOADS, e => {\n        let uploadTarget = e.target;\n\n        if (!dom_default.isUploadInput(uploadTarget)) {\n          return;\n        }\n\n        let files = Array.from(e.detail.files || []).filter(f => f instanceof File || f instanceof Blob);\n        LiveUploader.trackFiles(uploadTarget, files);\n        uploadTarget.dispatchEvent(new Event(\"input\", {\n          bubbles: true\n        }));\n      });\n    }\n\n    eventMeta(eventName, e, targetEl) {\n      let callback = this.metadataCallbacks[eventName];\n      return callback ? callback(e, targetEl) : {};\n    }\n\n    setPendingLink(href) {\n      this.linkRef++;\n      this.pendingLink = href;\n      return this.linkRef;\n    }\n\n    commitPendingLink(linkRef) {\n      if (this.linkRef !== linkRef) {\n        return false;\n      } else {\n        this.href = this.pendingLink;\n        this.pendingLink = null;\n        return true;\n      }\n    }\n\n    getHref() {\n      return this.href;\n    }\n\n    hasPendingLink() {\n      return !!this.pendingLink;\n    }\n\n    bind(events, callback) {\n      for (let event in events) {\n        let browserEventName = events[event];\n        this.on(browserEventName, e => {\n          let binding = this.binding(event);\n          let windowBinding = this.binding(`window-${event}`);\n          let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);\n\n          if (targetPhxEvent) {\n            this.debounce(e.target, e, () => {\n              this.withinOwners(e.target, (view, targetCtx) => {\n                callback(e, event, view, e.target, targetCtx, targetPhxEvent, null);\n              });\n            });\n          } else {\n            dom_default.all(document, `[${windowBinding}]`, el => {\n              let phxEvent = el.getAttribute(windowBinding);\n              this.debounce(el, e, () => {\n                this.withinOwners(el, (view, targetCtx) => {\n                  callback(e, event, view, el, targetCtx, phxEvent, \"window\");\n                });\n              });\n            });\n          }\n        });\n      }\n    }\n\n    bindClicks() {\n      this.bindClick(\"click\", \"click\", false);\n      this.bindClick(\"mousedown\", \"capture-click\", true);\n    }\n\n    bindClick(eventName, bindingName, capture) {\n      let click = this.binding(bindingName);\n      window.addEventListener(eventName, e => {\n        if (!this.isConnected()) {\n          return;\n        }\n\n        let target = null;\n\n        if (capture) {\n          target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);\n        } else {\n          target = closestPhxBinding(e.target, click);\n        }\n\n        let phxEvent = target && target.getAttribute(click);\n\n        if (!phxEvent) {\n          return;\n        }\n\n        if (target.getAttribute(\"href\") === \"#\") {\n          e.preventDefault();\n        }\n\n        this.debounce(target, e, () => {\n          this.withinOwners(target, (view, targetCtx) => {\n            view.pushEvent(\"click\", target, targetCtx, phxEvent, this.eventMeta(\"click\", e, target));\n          });\n        });\n      }, capture);\n    }\n\n    bindNav() {\n      if (!browser_default.canPushState()) {\n        return;\n      }\n\n      if (history.scrollRestoration) {\n        history.scrollRestoration = \"manual\";\n      }\n\n      let scrollTimer = null;\n      window.addEventListener(\"scroll\", _e => {\n        clearTimeout(scrollTimer);\n        scrollTimer = setTimeout(() => {\n          browser_default.updateCurrentState(state => Object.assign(state, {\n            scroll: window.scrollY\n          }));\n        }, 100);\n      });\n      window.addEventListener(\"popstate\", event => {\n        if (!this.registerNewLocation(window.location)) {\n          return;\n        }\n\n        let {\n          type,\n          id,\n          root,\n          scroll\n        } = event.state || {};\n        let href = window.location.href;\n\n        if (this.main.isConnected() && type === \"patch\" && id === this.main.id) {\n          this.main.pushLinkPatch(href, null);\n        } else {\n          this.replaceMain(href, null, () => {\n            if (root) {\n              this.replaceRootHistory();\n            }\n\n            if (typeof scroll === \"number\") {\n              setTimeout(() => {\n                window.scrollTo(0, scroll);\n              }, 0);\n            }\n          });\n        }\n      }, false);\n      window.addEventListener(\"click\", e => {\n        let target = closestPhxBinding(e.target, PHX_LIVE_LINK);\n        let type = target && target.getAttribute(PHX_LIVE_LINK);\n        let wantsNewTab = e.metaKey || e.ctrlKey || e.button === 1;\n\n        if (!type || !this.isConnected() || !this.main || wantsNewTab) {\n          return;\n        }\n\n        let href = target.href;\n        let linkState = target.getAttribute(PHX_LINK_STATE);\n        e.preventDefault();\n\n        if (this.pendingLink === href) {\n          return;\n        }\n\n        if (type === \"patch\") {\n          this.pushHistoryPatch(href, linkState, target);\n        } else if (type === \"redirect\") {\n          this.historyRedirect(href, linkState);\n        } else {\n          throw new Error(`expected ${PHX_LIVE_LINK} to be \"patch\" or \"redirect\", got: ${type}`);\n        }\n      }, false);\n    }\n\n    withPageLoading(info, callback) {\n      dom_default.dispatchEvent(window, \"phx:page-loading-start\", info);\n\n      let done = () => dom_default.dispatchEvent(window, \"phx:page-loading-stop\", info);\n\n      return callback ? callback(done) : done;\n    }\n\n    pushHistoryPatch(href, linkState, targetEl) {\n      this.withPageLoading({\n        to: href,\n        kind: \"patch\"\n      }, done => {\n        this.main.pushLinkPatch(href, targetEl, linkRef => {\n          this.historyPatch(href, linkState, linkRef);\n          done();\n        });\n      });\n    }\n\n    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {\n      if (!this.commitPendingLink(linkRef)) {\n        return;\n      }\n\n      browser_default.pushState(linkState, {\n        type: \"patch\",\n        id: this.main.id\n      }, href);\n      this.registerNewLocation(window.location);\n    }\n\n    historyRedirect(href, linkState, flash) {\n      let scroll = window.scrollY;\n      this.withPageLoading({\n        to: href,\n        kind: \"redirect\"\n      }, done => {\n        this.replaceMain(href, flash, () => {\n          browser_default.pushState(linkState, {\n            type: \"redirect\",\n            id: this.main.id,\n            scroll\n          }, href);\n          this.registerNewLocation(window.location);\n          done();\n        });\n      });\n    }\n\n    replaceRootHistory() {\n      browser_default.pushState(\"replace\", {\n        root: true,\n        type: \"patch\",\n        id: this.main.id\n      });\n    }\n\n    registerNewLocation(newLocation) {\n      let {\n        pathname,\n        search\n      } = this.currentLocation;\n\n      if (pathname + search === newLocation.pathname + newLocation.search) {\n        return false;\n      } else {\n        this.currentLocation = clone(newLocation);\n        return true;\n      }\n    }\n\n    bindForms() {\n      let iterations = 0;\n      this.on(\"submit\", e => {\n        let phxEvent = e.target.getAttribute(this.binding(\"submit\"));\n\n        if (!phxEvent) {\n          return;\n        }\n\n        e.preventDefault();\n        e.target.disabled = true;\n        this.withinOwners(e.target, (view, targetCtx) => view.submitForm(e.target, targetCtx, phxEvent));\n      }, false);\n\n      for (let type of [\"change\", \"input\"]) {\n        this.on(type, e => {\n          let input = e.target;\n          let phxEvent = input.form && input.form.getAttribute(this.binding(\"change\"));\n\n          if (!phxEvent) {\n            return;\n          }\n\n          if (input.type === \"number\" && input.validity && input.validity.badInput) {\n            return;\n          }\n\n          let currentIterations = iterations;\n          iterations++;\n          let {\n            at,\n            type: lastType\n          } = dom_default.private(input, \"prev-iteration\") || {};\n\n          if (at === currentIterations - 1 && type !== lastType) {\n            return;\n          }\n\n          dom_default.putPrivate(input, \"prev-iteration\", {\n            at: currentIterations,\n            type\n          });\n          this.debounce(input, e, () => {\n            this.withinOwners(input.form, (view, targetCtx) => {\n              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);\n\n              if (!dom_default.isTextualInput(input)) {\n                this.setActiveElement(input);\n              }\n\n              view.pushInput(input, targetCtx, null, phxEvent, e.target);\n            });\n          });\n        }, false);\n      }\n    }\n\n    debounce(el, event, callback) {\n      let phxDebounce = this.binding(PHX_DEBOUNCE);\n      let phxThrottle = this.binding(PHX_THROTTLE);\n      let defaultDebounce = this.defaults.debounce.toString();\n      let defaultThrottle = this.defaults.throttle.toString();\n      dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, callback);\n    }\n\n    silenceEvents(callback) {\n      this.silenced = true;\n      callback();\n      this.silenced = false;\n    }\n\n    on(event, callback) {\n      window.addEventListener(event, e => {\n        if (!this.silenced) {\n          callback(e);\n        }\n      });\n    }\n\n  };\n  return phoenix_live_view_exports;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../deps/phoenix_live_view/priv/static/phoenix_live_view.js\n");

/***/ }),

/***/ "./css/app.scss":
/*!**********************!*\
  !*** ./css/app.scss ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jc3MvYXBwLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jc3MvYXBwLnNjc3M/OGQ2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./css/app.scss\n");

/***/ }),

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_app_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/app.scss */ \"./css/app.scss\");\n/* harmony import */ var _css_app_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_app_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phoenix_html */ \"../deps/phoenix_html/priv/static/phoenix_html.js\");\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(phoenix_html__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var phoenix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! phoenix */ \"../deps/phoenix/priv/static/phoenix.js\");\n/* harmony import */ var phoenix__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(phoenix__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var nprogress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! nprogress */ \"./node_modules/nprogress/nprogress.js\");\n/* harmony import */ var nprogress__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nprogress__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var phoenix_live_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! phoenix_live_view */ \"../deps/phoenix_live_view/priv/static/phoenix_live_view.js\");\n/* harmony import */ var phoenix_live_view__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(phoenix_live_view__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash.throttle */ \"./node_modules/lodash.throttle/index.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _jscolor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./jscolor.js */ \"./js/jscolor.js\");\n/* harmony import */ var _jscolor_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_jscolor_js__WEBPACK_IMPORTED_MODULE_6__);\n// We need to import the CSS so that webpack will load it.\n// The MiniCssExtractPlugin is used to separate it out into\n// its own CSS file.\n // webpack automatically bundles all modules in your\n// entry points. Those entry points can be configured\n// in \"webpack.config.js\".\n//\n// Import deps with the dep name or local files with a relative path, for example:\n//\n//     import {Socket} from \"phoenix\"\n//     import socket from \"./socket\"\n//\n\n\n\n\n\n\n\nvar throttleMs = 100;\nvar Hooks = {};\nHooks.ColorSelector = {\n  mounted: function mounted() {\n    var _this = this;\n\n    this.el.addEventListener(\"build\", lodash_throttle__WEBPACK_IMPORTED_MODULE_5___default()(function (e) {\n      var ev = e.detail;\n      var hex = ev.toHEXString();\n\n      _this.pushEvent(\"color\", {\n        hex: hex\n      });\n    }, throttleMs));\n  }\n};\nHooks.BrightnessSlider = {\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.el.addEventListener(\"input\", lodash_throttle__WEBPACK_IMPORTED_MODULE_5___default()(function (e) {\n      var value = parseInt(e.target.value);\n\n      _this2.pushEvent(\"brightness\", {\n        value: value\n      });\n    }, throttleMs));\n  }\n};\nHooks.WhiteSlider = {\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.el.addEventListener(\"input\", lodash_throttle__WEBPACK_IMPORTED_MODULE_5___default()(function (e) {\n      var value = parseInt(e.target.value);\n\n      _this3.pushEvent(\"white-slider\", {\n        value: value\n      });\n    }, throttleMs));\n  }\n};\n\nwindow.update = function (colorEvent) {\n  var event = new CustomEvent('build', {\n    detail: colorEvent\n  });\n  colorEvent.previewElement.dispatchEvent(event);\n};\n\nvar csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\");\nvar liveSocket = new phoenix_live_view__WEBPACK_IMPORTED_MODULE_4__[\"LiveSocket\"](\"/live\", phoenix__WEBPACK_IMPORTED_MODULE_2__[\"Socket\"], {\n  hooks: Hooks,\n  params: {\n    _csrf_token: csrfToken\n  }\n}); // Show progress bar on live navigation and form submits\n\nwindow.addEventListener(\"phx:page-loading-start\", function (info) {\n  return nprogress__WEBPACK_IMPORTED_MODULE_3___default.a.start();\n});\nwindow.addEventListener(\"phx:page-loading-stop\", function (info) {\n  return nprogress__WEBPACK_IMPORTED_MODULE_3___default.a.done();\n}); // connect if there are any LiveViews on the page\n\nliveSocket.connect(); // expose liveSocket on window for web console debug logs and latency simulation:\n// >> liveSocket.enableDebug()\n// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session\n// >> liveSocket.disableLatencySim()\n\nwindow.liveSocket = liveSocket;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9hcHAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9hcHAuanM/NzQ3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBuZWVkIHRvIGltcG9ydCB0aGUgQ1NTIHNvIHRoYXQgd2VicGFjayB3aWxsIGxvYWQgaXQuXG4vLyBUaGUgTWluaUNzc0V4dHJhY3RQbHVnaW4gaXMgdXNlZCB0byBzZXBhcmF0ZSBpdCBvdXQgaW50b1xuLy8gaXRzIG93biBDU1MgZmlsZS5cbmltcG9ydCBcIi4uL2Nzcy9hcHAuc2Nzc1wiXG5cbi8vIHdlYnBhY2sgYXV0b21hdGljYWxseSBidW5kbGVzIGFsbCBtb2R1bGVzIGluIHlvdXJcbi8vIGVudHJ5IHBvaW50cy4gVGhvc2UgZW50cnkgcG9pbnRzIGNhbiBiZSBjb25maWd1cmVkXG4vLyBpbiBcIndlYnBhY2suY29uZmlnLmpzXCIuXG4vL1xuLy8gSW1wb3J0IGRlcHMgd2l0aCB0aGUgZGVwIG5hbWUgb3IgbG9jYWwgZmlsZXMgd2l0aCBhIHJlbGF0aXZlIHBhdGgsIGZvciBleGFtcGxlOlxuLy9cbi8vICAgICBpbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuLy8gICAgIGltcG9ydCBzb2NrZXQgZnJvbSBcIi4vc29ja2V0XCJcbi8vXG5pbXBvcnQgXCJwaG9lbml4X2h0bWxcIlxuaW1wb3J0IHtTb2NrZXR9IGZyb20gXCJwaG9lbml4XCJcbmltcG9ydCBOUHJvZ3Jlc3MgZnJvbSBcIm5wcm9ncmVzc1wiXG5pbXBvcnQge0xpdmVTb2NrZXR9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG5pbXBvcnQgdGhyb3R0bGUgZnJvbSAnbG9kYXNoLnRocm90dGxlJ1xuaW1wb3J0IFwiLi9qc2NvbG9yLmpzXCJcblxubGV0IHRocm90dGxlTXMgPSAxMDA7XG5sZXQgSG9va3MgPSB7fVxuXG5Ib29rcy5Db2xvclNlbGVjdG9yID0ge1xuICBtb3VudGVkKCkge1xuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJ1aWxkXCIsIHRocm90dGxlKGUgPT4ge1xuICAgICAgY29uc3QgZXYgPSBlLmRldGFpbFxuICAgICAgY29uc3QgaGV4ID0gZXYudG9IRVhTdHJpbmcoKVxuICAgICAgdGhpcy5wdXNoRXZlbnQoXCJjb2xvclwiLCB7aGV4OiBoZXh9KVxuICAgIH0sIHRocm90dGxlTXMpKVxuICB9XG59XG5cbkhvb2tzLkJyaWdodG5lc3NTbGlkZXIgPSB7XG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhyb3R0bGUoZSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlKVxuICAgICAgdGhpcy5wdXNoRXZlbnQoXCJicmlnaHRuZXNzXCIsIHt2YWx1ZTogdmFsdWV9KVxuICAgIH0sIHRocm90dGxlTXMpKVxuICB9XG59XG5cbkhvb2tzLldoaXRlU2xpZGVyID0ge1xuICBtb3VudGVkKCkge1xuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRocm90dGxlKGUgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUludChlLnRhcmdldC52YWx1ZSlcbiAgICAgIHRoaXMucHVzaEV2ZW50KFwid2hpdGUtc2xpZGVyXCIsIHt2YWx1ZTogdmFsdWV9KVxuICAgIH0sIHRocm90dGxlTXMpKVxuICB9XG59XG5cbndpbmRvdy51cGRhdGUgPSBmdW5jdGlvbihjb2xvckV2ZW50KSB7XG4gIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdidWlsZCcsIHtkZXRhaWw6IGNvbG9yRXZlbnR9KTtcbiAgY29sb3JFdmVudC5wcmV2aWV3RWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxubGV0IGNzcmZUb2tlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J2NzcmYtdG9rZW4nXVwiKS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpXG5sZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7aG9va3M6IEhvb2tzLCBwYXJhbXM6IHtfY3NyZl90b2tlbjogY3NyZlRva2VufX0pXG5cbi8vIFNob3cgcHJvZ3Jlc3MgYmFyIG9uIGxpdmUgbmF2aWdhdGlvbiBhbmQgZm9ybSBzdWJtaXRzXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwgaW5mbyA9PiBOUHJvZ3Jlc3Muc3RhcnQoKSlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4OnBhZ2UtbG9hZGluZy1zdG9wXCIsIGluZm8gPT4gTlByb2dyZXNzLmRvbmUoKSlcblxuLy8gY29ubmVjdCBpZiB0aGVyZSBhcmUgYW55IExpdmVWaWV3cyBvbiB0aGUgcGFnZVxubGl2ZVNvY2tldC5jb25uZWN0KClcblxuLy8gZXhwb3NlIGxpdmVTb2NrZXQgb24gd2luZG93IGZvciB3ZWIgY29uc29sZSBkZWJ1ZyBsb2dzIGFuZCBsYXRlbmN5IHNpbXVsYXRpb246XG4vLyA+PiBsaXZlU29ja2V0LmVuYWJsZURlYnVnKClcbi8vID4+IGxpdmVTb2NrZXQuZW5hYmxlTGF0ZW5jeVNpbSgxMDAwKSAgLy8gZW5hYmxlZCBmb3IgZHVyYXRpb24gb2YgYnJvd3NlciBzZXNzaW9uXG4vLyA+PiBsaXZlU29ja2V0LmRpc2FibGVMYXRlbmN5U2ltKClcbndpbmRvdy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBUEE7QUFVQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFOQTtBQVNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQU5BO0FBQ0E7QUFRQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/app.js\n");

/***/ }),

/***/ "./js/jscolor.js":
/*!***********************!*\
  !*** ./js/jscolor.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\r\n * jscolor - JavaScript Color Picker\r\n *\r\n * @link    http://jscolor.com\r\n * @license For open source use: GPLv3\r\n *          For commercial use: JSColor Commercial License\r\n * @author  Jan Odvarko - East Desire\r\n * @version 2.3.3\r\n *\r\n * See usage examples at http://jscolor.com/examples/\r\n */\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nif (!window.jscolor) {\n  window.jscolor = function () {\n    // BEGIN window.jscolor\n    var jsc = {\n      initialized: false,\n      instances: [],\n      // created instances of jscolor\n      triggerQueue: [],\n      // events waiting to be triggered after init\n      register: function register() {\n        document.addEventListener('DOMContentLoaded', jsc.init, false);\n        document.addEventListener('mousedown', jsc.onDocumentMouseDown, false);\n        document.addEventListener('keyup', jsc.onDocumentKeyUp, false);\n        window.addEventListener('resize', jsc.onWindowResize, false);\n      },\n      init: function init() {\n        if (jsc.initialized) {\n          return;\n        }\n\n        jsc.pub.install();\n        jsc.initialized = true; // trigger events waiting in the queue\n\n        while (jsc.triggerQueue.length) {\n          var ev = jsc.triggerQueue.shift();\n          jsc.triggerGlobal(ev);\n        }\n      },\n      installBySelector: function installBySelector(selector, rootNode) {\n        rootNode = rootNode ? jsc.node(rootNode) : document;\n\n        if (!rootNode) {\n          throw new Error('Missing root node');\n        }\n\n        var elms = rootNode.querySelectorAll(selector); // for backward compatibility with DEPRECATED installation/configuration using className\n\n        var matchClass = new RegExp('(^|\\\\s)(' + jsc.pub.lookupClass + ')(\\\\s*(\\\\{[^}]*\\\\})|\\\\s|$)', 'i');\n\n        for (var i = 0; i < elms.length; i += 1) {\n          if (elms[i].jscolor && elms[i].jscolor instanceof jsc.pub) {\n            continue; // jscolor already installed on this element\n          }\n\n          if (elms[i].type !== undefined && elms[i].type.toLowerCase() == 'color' && jsc.isColorAttrSupported) {\n            continue; // skips inputs of type 'color' if supported by the browser\n          }\n\n          var dataOpts, m;\n\n          if ((dataOpts = jsc.getDataAttr(elms[i], 'jscolor')) !== null || elms[i].className && (m = elms[i].className.match(matchClass)) // installation using className (DEPRECATED)\n          ) {\n              var targetElm = elms[i];\n              var optsStr = '';\n\n              if (dataOpts !== null) {\n                optsStr = dataOpts;\n              } else if (m) {\n                // installation using className (DEPRECATED)\n                console.warn('Installation using class name is DEPRECATED. Use data-jscolor=\"\" attribute instead.' + jsc.docsRef);\n\n                if (m[4]) {\n                  optsStr = m[4];\n                }\n              }\n\n              var opts = null;\n\n              if (optsStr.trim()) {\n                try {\n                  opts = jsc.parseOptionsStr(optsStr);\n                } catch (e) {\n                  console.warn(e + '\\n' + optsStr);\n                }\n              }\n\n              try {\n                new jsc.pub(targetElm, opts);\n              } catch (e) {\n                console.warn(e);\n              }\n            }\n        }\n      },\n      parseOptionsStr: function parseOptionsStr(str) {\n        var opts = null;\n\n        try {\n          opts = JSON.parse(str);\n        } catch (eParse) {\n          if (!jsc.pub.looseJSON) {\n            throw new Error('Could not parse jscolor options as JSON: ' + eParse);\n          } else {\n            // loose JSON syntax is enabled -> try to evaluate the options string as JavaScript object\n            try {\n              opts = new Function('var opts = (' + str + '); return typeof opts === \"object\" ? opts : {};')();\n            } catch (eEval) {\n              throw new Error('Could not evaluate jscolor options: ' + eEval);\n            }\n          }\n        }\n\n        return opts;\n      },\n      getInstances: function getInstances() {\n        var inst = [];\n\n        for (var i = 0; i < jsc.instances.length; i += 1) {\n          // if the targetElement still exists, the instance is considered \"alive\"\n          if (jsc.instances[i] && jsc.instances[i].targetElement) {\n            inst.push(jsc.instances[i]);\n          }\n        }\n\n        return inst;\n      },\n      createEl: function createEl(tagName) {\n        var el = document.createElement(tagName);\n        jsc.setData(el, 'gui', true);\n        return el;\n      },\n      node: function node(nodeOrSelector) {\n        if (!nodeOrSelector) {\n          return null;\n        }\n\n        if (typeof nodeOrSelector === 'string') {\n          // query selector\n          var sel = nodeOrSelector;\n          var el = null;\n\n          try {\n            el = document.querySelector(sel);\n          } catch (e) {\n            console.warn(e);\n            return null;\n          }\n\n          if (!el) {\n            console.warn('No element matches the selector: %s', sel);\n          }\n\n          return el;\n        }\n\n        if (jsc.isNode(nodeOrSelector)) {\n          // DOM node\n          return nodeOrSelector;\n        }\n\n        console.warn('Invalid node of type %s: %s', _typeof(nodeOrSelector), nodeOrSelector);\n        return null;\n      },\n      // See https://stackoverflow.com/questions/384286/\n      isNode: function isNode(val) {\n        if ((typeof Node === \"undefined\" ? \"undefined\" : _typeof(Node)) === 'object') {\n          return val instanceof Node;\n        }\n\n        return val && _typeof(val) === 'object' && typeof val.nodeType === 'number' && typeof val.nodeName === 'string';\n      },\n      nodeName: function nodeName(node) {\n        if (node && node.nodeName) {\n          return node.nodeName.toLowerCase();\n        }\n\n        return false;\n      },\n      removeChildren: function removeChildren(node) {\n        while (node.firstChild) {\n          node.removeChild(node.firstChild);\n        }\n      },\n      isTextInput: function isTextInput(el) {\n        return el && jsc.nodeName(el) === 'input' && el.type.toLowerCase() === 'text';\n      },\n      isButton: function isButton(el) {\n        if (!el) {\n          return false;\n        }\n\n        var n = jsc.nodeName(el);\n        return n === 'button' || n === 'input' && ['button', 'submit', 'reset'].indexOf(el.type.toLowerCase()) > -1;\n      },\n      isButtonEmpty: function isButtonEmpty(el) {\n        switch (jsc.nodeName(el)) {\n          case 'input':\n            return !el.value || el.value.trim() === '';\n\n          case 'button':\n            return el.textContent.trim() === '';\n        }\n\n        return null; // could not determine element's text\n      },\n      // See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n      isPassiveEventSupported: function () {\n        var supported = false;\n\n        try {\n          var opts = Object.defineProperty({}, 'passive', {\n            get: function get() {\n              supported = true;\n            }\n          });\n          window.addEventListener('testPassive', null, opts);\n          window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n\n        return supported;\n      }(),\n      isColorAttrSupported: function () {\n        var elm = document.createElement('input');\n\n        if (elm.setAttribute) {\n          elm.setAttribute('type', 'color');\n\n          if (elm.type.toLowerCase() == 'color') {\n            return true;\n          }\n        }\n\n        return false;\n      }(),\n      dataProp: '_data_jscolor',\n      // usage:\n      //   setData(obj, prop, value)\n      //   setData(obj, {prop:value, ...})\n      //\n      setData: function setData() {\n        var obj = arguments[0];\n\n        if (arguments.length === 3) {\n          // setting a single property\n          var data = obj.hasOwnProperty(jsc.dataProp) ? obj[jsc.dataProp] : obj[jsc.dataProp] = {};\n          var prop = arguments[1];\n          var value = arguments[2];\n          data[prop] = value;\n          return true;\n        } else if (arguments.length === 2 && _typeof(arguments[1]) === 'object') {\n          // setting multiple properties\n          var data = obj.hasOwnProperty(jsc.dataProp) ? obj[jsc.dataProp] : obj[jsc.dataProp] = {};\n          var map = arguments[1];\n\n          for (var prop in map) {\n            if (map.hasOwnProperty(prop)) {\n              data[prop] = map[prop];\n            }\n          }\n\n          return true;\n        }\n\n        throw new Error('Invalid arguments');\n      },\n      // usage:\n      //   removeData(obj, prop, [prop...])\n      //\n      removeData: function removeData() {\n        var obj = arguments[0];\n\n        if (!obj.hasOwnProperty(jsc.dataProp)) {\n          return true; // data object does not exist\n        }\n\n        for (var i = 1; i < arguments.length; i += 1) {\n          var prop = arguments[i];\n          delete obj[jsc.dataProp][prop];\n        }\n\n        return true;\n      },\n      getData: function getData(obj, prop, setDefault) {\n        if (!obj.hasOwnProperty(jsc.dataProp)) {\n          // data object does not exist\n          if (setDefault !== undefined) {\n            obj[jsc.dataProp] = {}; // create data object\n          } else {\n            return undefined; // no value to return\n          }\n        }\n\n        var data = obj[jsc.dataProp];\n\n        if (!data.hasOwnProperty(prop) && setDefault !== undefined) {\n          data[prop] = setDefault;\n        }\n\n        return data[prop];\n      },\n      getDataAttr: function getDataAttr(el, name) {\n        var attrName = 'data-' + name;\n        var attrValue = el.getAttribute(attrName);\n        return attrValue;\n      },\n      _attachedGroupEvents: {},\n      attachGroupEvent: function attachGroupEvent(groupName, el, evnt, func) {\n        if (!jsc._attachedGroupEvents.hasOwnProperty(groupName)) {\n          jsc._attachedGroupEvents[groupName] = [];\n        }\n\n        jsc._attachedGroupEvents[groupName].push([el, evnt, func]);\n\n        el.addEventListener(evnt, func, false);\n      },\n      detachGroupEvents: function detachGroupEvents(groupName) {\n        if (jsc._attachedGroupEvents.hasOwnProperty(groupName)) {\n          for (var i = 0; i < jsc._attachedGroupEvents[groupName].length; i += 1) {\n            var evt = jsc._attachedGroupEvents[groupName][i];\n            evt[0].removeEventListener(evt[1], evt[2], false);\n          }\n\n          delete jsc._attachedGroupEvents[groupName];\n        }\n      },\n      preventDefault: function preventDefault(e) {\n        if (e.preventDefault) {\n          e.preventDefault();\n        }\n\n        e.returnValue = false;\n      },\n      captureTarget: function captureTarget(target) {\n        // IE\n        if (target.setCapture) {\n          jsc._capturedTarget = target;\n\n          jsc._capturedTarget.setCapture();\n        }\n      },\n      releaseTarget: function releaseTarget() {\n        // IE\n        if (jsc._capturedTarget) {\n          jsc._capturedTarget.releaseCapture();\n\n          jsc._capturedTarget = null;\n        }\n      },\n      triggerEvent: function triggerEvent(el, eventName, bubbles, cancelable) {\n        if (!el) {\n          return;\n        }\n\n        var ev = null;\n\n        if (typeof Event === 'function') {\n          ev = new Event(eventName, {\n            bubbles: bubbles,\n            cancelable: cancelable\n          });\n        } else {\n          // IE\n          ev = document.createEvent('Event');\n          ev.initEvent(eventName, bubbles, cancelable);\n        }\n\n        if (!ev) {\n          return false;\n        } // so that we know that the event was triggered internally\n\n\n        jsc.setData(ev, 'internal', true);\n        el.dispatchEvent(ev);\n        return true;\n      },\n      triggerInputEvent: function triggerInputEvent(el, eventName, bubbles, cancelable) {\n        if (!el) {\n          return;\n        }\n\n        if (jsc.isTextInput(el)) {\n          jsc.triggerEvent(el, eventName, bubbles, cancelable);\n        }\n      },\n      eventKey: function eventKey(ev) {\n        var keys = {\n          9: 'Tab',\n          13: 'Enter',\n          27: 'Escape'\n        };\n\n        if (typeof ev.code === 'string') {\n          return ev.code;\n        } else if (ev.keyCode !== undefined && keys.hasOwnProperty(ev.keyCode)) {\n          return keys[ev.keyCode];\n        }\n\n        return null;\n      },\n      strList: function strList(str) {\n        if (!str) {\n          return [];\n        }\n\n        return str.replace(/^\\s+|\\s+$/g, '').split(/\\s+/);\n      },\n      // The className parameter (str) can only contain a single class name\n      hasClass: function hasClass(elm, className) {\n        if (!className) {\n          return false;\n        }\n\n        if (elm.classList !== undefined) {\n          return elm.classList.contains(className);\n        } // polyfill\n\n\n        return -1 != (' ' + elm.className.replace(/\\s+/g, ' ') + ' ').indexOf(' ' + className + ' ');\n      },\n      // The className parameter (str) can contain multiple class names separated by whitespace\n      addClass: function addClass(elm, className) {\n        var classNames = jsc.strList(className);\n\n        if (elm.classList !== undefined) {\n          for (var i = 0; i < classNames.length; i += 1) {\n            elm.classList.add(classNames[i]);\n          }\n\n          return;\n        } // polyfill\n\n\n        for (var i = 0; i < classNames.length; i += 1) {\n          if (!jsc.hasClass(elm, classNames[i])) {\n            elm.className += (elm.className ? ' ' : '') + classNames[i];\n          }\n        }\n      },\n      // The className parameter (str) can contain multiple class names separated by whitespace\n      removeClass: function removeClass(elm, className) {\n        var classNames = jsc.strList(className);\n\n        if (elm.classList !== undefined) {\n          for (var i = 0; i < classNames.length; i += 1) {\n            elm.classList.remove(classNames[i]);\n          }\n\n          return;\n        } // polyfill\n\n\n        for (var i = 0; i < classNames.length; i += 1) {\n          var repl = new RegExp('^\\\\s*' + classNames[i] + '\\\\s*|' + '\\\\s*' + classNames[i] + '\\\\s*$|' + '\\\\s+' + classNames[i] + '(\\\\s+)', 'g');\n          elm.className = elm.className.replace(repl, '$1');\n        }\n      },\n      getCompStyle: function getCompStyle(elm) {\n        var compStyle = window.getComputedStyle ? window.getComputedStyle(elm) : elm.currentStyle; // Note: In Firefox, getComputedStyle returns null in a hidden iframe,\n        // that's why we need to check if the returned value is non-empty\n\n        if (!compStyle) {\n          return {};\n        }\n\n        return compStyle;\n      },\n      // Note:\n      //   Setting a property to NULL reverts it to the state before it was first set\n      //   with the 'reversible' flag enabled\n      //\n      setStyle: function setStyle(elm, styles, important, reversible) {\n        // using '' for standard priority (IE10 apparently doesn't like value undefined)\n        var priority = important ? 'important' : '';\n        var origStyle = null;\n\n        for (var prop in styles) {\n          if (styles.hasOwnProperty(prop)) {\n            var setVal = null;\n\n            if (styles[prop] === null) {\n              // reverting a property value\n              if (!origStyle) {\n                // get the original style object, but dont't try to create it if it doesn't exist\n                origStyle = jsc.getData(elm, 'origStyle');\n              }\n\n              if (origStyle && origStyle.hasOwnProperty(prop)) {\n                // we have property's original value -> use it\n                setVal = origStyle[prop];\n              }\n            } else {\n              // setting a property value\n              if (reversible) {\n                if (!origStyle) {\n                  // get the original style object and if it doesn't exist, create it\n                  origStyle = jsc.getData(elm, 'origStyle', {});\n                }\n\n                if (!origStyle.hasOwnProperty(prop)) {\n                  // original property value not yet stored -> store it\n                  origStyle[prop] = elm.style[prop];\n                }\n              }\n\n              setVal = styles[prop];\n            }\n\n            if (setVal !== null) {\n              elm.style.setProperty(prop, setVal, priority);\n            }\n          }\n        }\n      },\n      linearGradient: function () {\n        function getFuncName() {\n          var stdName = 'linear-gradient';\n          var prefixes = ['', '-webkit-', '-moz-', '-o-', '-ms-'];\n          var helper = document.createElement('div');\n\n          for (var i = 0; i < prefixes.length; i += 1) {\n            var tryFunc = prefixes[i] + stdName;\n            var tryVal = tryFunc + '(to right, rgba(0,0,0,0), rgba(0,0,0,0))';\n            helper.style.background = tryVal;\n\n            if (helper.style.background) {\n              // CSS background successfully set -> function name is supported\n              return tryFunc;\n            }\n          }\n\n          return stdName; // fallback to standard 'linear-gradient' without vendor prefix\n        }\n\n        var funcName = getFuncName();\n        return function () {\n          return funcName + '(' + Array.prototype.join.call(arguments, ', ') + ')';\n        };\n      }(),\n      setBorderRadius: function setBorderRadius(elm, value) {\n        jsc.setStyle(elm, {\n          'border-radius': value || '0'\n        });\n      },\n      setBoxShadow: function setBoxShadow(elm, value) {\n        jsc.setStyle(elm, {\n          'box-shadow': value || 'none'\n        });\n      },\n      getElementPos: function getElementPos(e, relativeToViewport) {\n        var x = 0,\n            y = 0;\n        var rect = e.getBoundingClientRect();\n        x = rect.left;\n        y = rect.top;\n\n        if (!relativeToViewport) {\n          var viewPos = jsc.getViewPos();\n          x += viewPos[0];\n          y += viewPos[1];\n        }\n\n        return [x, y];\n      },\n      getElementSize: function getElementSize(e) {\n        return [e.offsetWidth, e.offsetHeight];\n      },\n      // get pointer's X/Y coordinates relative to viewport\n      getAbsPointerPos: function getAbsPointerPos(e) {\n        var x = 0,\n            y = 0;\n\n        if (typeof e.changedTouches !== 'undefined' && e.changedTouches.length) {\n          // touch devices\n          x = e.changedTouches[0].clientX;\n          y = e.changedTouches[0].clientY;\n        } else if (typeof e.clientX === 'number') {\n          x = e.clientX;\n          y = e.clientY;\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      },\n      // get pointer's X/Y coordinates relative to target element\n      getRelPointerPos: function getRelPointerPos(e) {\n        var target = e.target || e.srcElement;\n        var targetRect = target.getBoundingClientRect();\n        var x = 0,\n            y = 0;\n        var clientX = 0,\n            clientY = 0;\n\n        if (typeof e.changedTouches !== 'undefined' && e.changedTouches.length) {\n          // touch devices\n          clientX = e.changedTouches[0].clientX;\n          clientY = e.changedTouches[0].clientY;\n        } else if (typeof e.clientX === 'number') {\n          clientX = e.clientX;\n          clientY = e.clientY;\n        }\n\n        x = clientX - targetRect.left;\n        y = clientY - targetRect.top;\n        return {\n          x: x,\n          y: y\n        };\n      },\n      getViewPos: function getViewPos() {\n        var doc = document.documentElement;\n        return [(window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0), (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0)];\n      },\n      getViewSize: function getViewSize() {\n        var doc = document.documentElement;\n        return [window.innerWidth || doc.clientWidth, window.innerHeight || doc.clientHeight];\n      },\n      // r: 0-255\n      // g: 0-255\n      // b: 0-255\n      //\n      // returns: [ 0-360, 0-100, 0-100 ]\n      //\n      RGB_HSV: function RGB_HSV(r, g, b) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        var n = Math.min(Math.min(r, g), b);\n        var v = Math.max(Math.max(r, g), b);\n        var m = v - n;\n\n        if (m === 0) {\n          return [null, 0, 100 * v];\n        }\n\n        var h = r === n ? 3 + (b - g) / m : g === n ? 5 + (r - b) / m : 1 + (g - r) / m;\n        return [60 * (h === 6 ? 0 : h), 100 * (m / v), 100 * v];\n      },\n      // h: 0-360\n      // s: 0-100\n      // v: 0-100\n      //\n      // returns: [ 0-255, 0-255, 0-255 ]\n      //\n      HSV_RGB: function HSV_RGB(h, s, v) {\n        var u = 255 * (v / 100);\n\n        if (h === null) {\n          return [u, u, u];\n        }\n\n        h /= 60;\n        s /= 100;\n        var i = Math.floor(h);\n        var f = i % 2 ? h - i : 1 - (h - i);\n        var m = u * (1 - s);\n        var n = u * (1 - s * f);\n\n        switch (i) {\n          case 6:\n          case 0:\n            return [u, n, m];\n\n          case 1:\n            return [n, u, m];\n\n          case 2:\n            return [m, u, n];\n\n          case 3:\n            return [m, n, u];\n\n          case 4:\n            return [n, m, u];\n\n          case 5:\n            return [u, m, n];\n        }\n      },\n      parseColorString: function parseColorString(str) {\n        var ret = {\n          rgba: null,\n          format: null // 'hex' | 'rgb' | 'rgba'\n\n        };\n        var m;\n\n        if (m = str.match(/^\\W*([0-9A-F]{3}([0-9A-F]{3})?)\\W*$/i)) {\n          // HEX notation\n          ret.format = 'hex';\n\n          if (m[1].length === 6) {\n            // 6-char notation\n            ret.rgba = [parseInt(m[1].substr(0, 2), 16), parseInt(m[1].substr(2, 2), 16), parseInt(m[1].substr(4, 2), 16), null];\n          } else {\n            // 3-char notation\n            ret.rgba = [parseInt(m[1].charAt(0) + m[1].charAt(0), 16), parseInt(m[1].charAt(1) + m[1].charAt(1), 16), parseInt(m[1].charAt(2) + m[1].charAt(2), 16), null];\n          }\n\n          return ret;\n        } else if (m = str.match(/^\\W*rgba?\\(([^)]*)\\)\\W*$/i)) {\n          // rgb(...) or rgba(...) notation\n          var params = m[1].split(',');\n          var re = /^\\s*(\\d+|\\d*\\.\\d+|\\d+\\.\\d*)\\s*$/;\n          var mR, mG, mB, mA;\n\n          if (params.length >= 3 && (mR = params[0].match(re)) && (mG = params[1].match(re)) && (mB = params[2].match(re))) {\n            ret.format = 'rgb';\n            ret.rgba = [parseFloat(mR[1]) || 0, parseFloat(mG[1]) || 0, parseFloat(mB[1]) || 0, null];\n\n            if (params.length >= 4 && (mA = params[3].match(re))) {\n              ret.format = 'rgba';\n              ret.rgba[3] = parseFloat(mA[1]) || 0;\n            }\n\n            return ret;\n          }\n        }\n\n        return false;\n      },\n      // Canvas scaling for retina displays\n      //\n      // adapted from https://www.html5rocks.com/en/tutorials/canvas/hidpi/\n      //\n      scaleCanvasForHighDPR: function scaleCanvasForHighDPR(canvas) {\n        var dpr = window.devicePixelRatio || 1;\n        canvas.width *= dpr;\n        canvas.height *= dpr;\n        var ctx = canvas.getContext('2d');\n        ctx.scale(dpr, dpr);\n      },\n      genColorPreviewCanvas: function genColorPreviewCanvas(color, separatorPos, specWidth, scaleForHighDPR) {\n        var sepW = Math.round(jsc.pub.previewSeparator.length);\n        var sqSize = jsc.pub.chessboardSize;\n        var sqColor1 = jsc.pub.chessboardColor1;\n        var sqColor2 = jsc.pub.chessboardColor2;\n        var cWidth = specWidth ? specWidth : sqSize * 2;\n        var cHeight = sqSize * 2;\n        var canvas = jsc.createEl('canvas');\n        var ctx = canvas.getContext('2d');\n        canvas.width = cWidth;\n        canvas.height = cHeight;\n\n        if (scaleForHighDPR) {\n          jsc.scaleCanvasForHighDPR(canvas);\n        } // transparency chessboard - background\n\n\n        ctx.fillStyle = sqColor1;\n        ctx.fillRect(0, 0, cWidth, cHeight); // transparency chessboard - squares\n\n        ctx.fillStyle = sqColor2;\n\n        for (var x = 0; x < cWidth; x += sqSize * 2) {\n          ctx.fillRect(x, 0, sqSize, sqSize);\n          ctx.fillRect(x + sqSize, sqSize, sqSize, sqSize);\n        }\n\n        if (color) {\n          // actual color in foreground\n          ctx.fillStyle = color;\n          ctx.fillRect(0, 0, cWidth, cHeight);\n        }\n\n        var start = null;\n\n        switch (separatorPos) {\n          case 'left':\n            start = 0;\n            ctx.clearRect(0, 0, sepW / 2, cHeight);\n            break;\n\n          case 'right':\n            start = cWidth - sepW;\n            ctx.clearRect(cWidth - sepW / 2, 0, sepW / 2, cHeight);\n            break;\n        }\n\n        if (start !== null) {\n          ctx.lineWidth = 1;\n\n          for (var i = 0; i < jsc.pub.previewSeparator.length; i += 1) {\n            ctx.beginPath();\n            ctx.strokeStyle = jsc.pub.previewSeparator[i];\n            ctx.moveTo(0.5 + start + i, 0);\n            ctx.lineTo(0.5 + start + i, cHeight);\n            ctx.stroke();\n          }\n        }\n\n        return {\n          canvas: canvas,\n          width: cWidth,\n          height: cHeight\n        };\n      },\n      // if position or width is not set => fill the entire element (0%-100%)\n      genColorPreviewGradient: function genColorPreviewGradient(color, position, width) {\n        var params = [];\n\n        if (position && width) {\n          params = ['to ' + {\n            'left': 'right',\n            'right': 'left'\n          }[position], color + ' 0%', color + ' ' + width + 'px', 'rgba(0,0,0,0) ' + (width + 1) + 'px', 'rgba(0,0,0,0) 100%'];\n        } else {\n          params = ['to right', color + ' 0%', color + ' 100%'];\n        }\n\n        return jsc.linearGradient.apply(this, params);\n      },\n      redrawPosition: function redrawPosition() {\n        if (jsc.picker && jsc.picker.owner) {\n          var thisObj = jsc.picker.owner;\n          var tp, vp;\n\n          if (thisObj.fixed) {\n            // Fixed elements are positioned relative to viewport,\n            // therefore we can ignore the scroll offset\n            tp = jsc.getElementPos(thisObj.targetElement, true); // target pos\n\n            vp = [0, 0]; // view pos\n          } else {\n            tp = jsc.getElementPos(thisObj.targetElement); // target pos\n\n            vp = jsc.getViewPos(); // view pos\n          }\n\n          var ts = jsc.getElementSize(thisObj.targetElement); // target size\n\n          var vs = jsc.getViewSize(); // view size\n\n          var ps = jsc.getPickerOuterDims(thisObj); // picker size\n\n          var a, b, c;\n\n          switch (thisObj.position.toLowerCase()) {\n            case 'left':\n              a = 1;\n              b = 0;\n              c = -1;\n              break;\n\n            case 'right':\n              a = 1;\n              b = 0;\n              c = 1;\n              break;\n\n            case 'top':\n              a = 0;\n              b = 1;\n              c = -1;\n              break;\n\n            default:\n              a = 0;\n              b = 1;\n              c = 1;\n              break;\n          }\n\n          var l = (ts[b] + ps[b]) / 2; // compute picker position\n\n          if (!thisObj.smartPosition) {\n            var pp = [tp[a], tp[b] + ts[b] - l + l * c];\n          } else {\n            var pp = [-vp[a] + tp[a] + ps[a] > vs[a] ? -vp[a] + tp[a] + ts[a] / 2 > vs[a] / 2 && tp[a] + ts[a] - ps[a] >= 0 ? tp[a] + ts[a] - ps[a] : tp[a] : tp[a], -vp[b] + tp[b] + ts[b] + ps[b] - l + l * c > vs[b] ? -vp[b] + tp[b] + ts[b] / 2 > vs[b] / 2 && tp[b] + ts[b] - l - l * c >= 0 ? tp[b] + ts[b] - l - l * c : tp[b] + ts[b] - l + l * c : tp[b] + ts[b] - l + l * c >= 0 ? tp[b] + ts[b] - l + l * c : tp[b] + ts[b] - l - l * c];\n          }\n\n          var x = pp[a];\n          var y = pp[b];\n          var positionValue = thisObj.fixed ? 'fixed' : 'absolute';\n          var contractShadow = (pp[0] + ps[0] > tp[0] || pp[0] < tp[0] + ts[0]) && pp[1] + ps[1] < tp[1] + ts[1];\n\n          jsc._drawPosition(thisObj, x, y, positionValue, contractShadow);\n        }\n      },\n      _drawPosition: function _drawPosition(thisObj, x, y, positionValue, contractShadow) {\n        var vShadow = contractShadow ? 0 : thisObj.shadowBlur; // px\n\n        jsc.picker.wrap.style.position = positionValue;\n        jsc.picker.wrap.style.left = x + 'px';\n        jsc.picker.wrap.style.top = y + 'px';\n        jsc.setBoxShadow(jsc.picker.boxS, thisObj.shadow ? new jsc.BoxShadow(0, vShadow, thisObj.shadowBlur, 0, thisObj.shadowColor) : null);\n      },\n      getPickerDims: function getPickerDims(thisObj) {\n        var dims = [2 * thisObj.controlBorderWidth + 2 * thisObj.padding + thisObj.width, 2 * thisObj.controlBorderWidth + 2 * thisObj.padding + thisObj.height];\n        var sliderSpace = 2 * thisObj.controlBorderWidth + 2 * jsc.getControlPadding(thisObj) + thisObj.sliderSize;\n\n        if (jsc.getSliderChannel(thisObj)) {\n          dims[0] += sliderSpace;\n        }\n\n        if (thisObj.hasAlphaChannel()) {\n          dims[0] += sliderSpace;\n        }\n\n        if (thisObj.closeButton) {\n          dims[1] += 2 * thisObj.controlBorderWidth + thisObj.padding + thisObj.buttonHeight;\n        }\n\n        return dims;\n      },\n      getPickerOuterDims: function getPickerOuterDims(thisObj) {\n        var dims = jsc.getPickerDims(thisObj);\n        return [dims[0] + 2 * thisObj.borderWidth, dims[1] + 2 * thisObj.borderWidth];\n      },\n      getControlPadding: function getControlPadding(thisObj) {\n        return Math.max(thisObj.padding / 2, 2 * thisObj.pointerBorderWidth + thisObj.pointerThickness - thisObj.controlBorderWidth);\n      },\n      getPadYChannel: function getPadYChannel(thisObj) {\n        switch (thisObj.mode.charAt(1).toLowerCase()) {\n          case 'v':\n            return 'v';\n            break;\n        }\n\n        return 's';\n      },\n      getSliderChannel: function getSliderChannel(thisObj) {\n        if (thisObj.mode.length > 2) {\n          switch (thisObj.mode.charAt(2).toLowerCase()) {\n            case 's':\n              return 's';\n              break;\n\n            case 'v':\n              return 'v';\n              break;\n          }\n        }\n\n        return null;\n      },\n      onDocumentMouseDown: function onDocumentMouseDown(e) {\n        var target = e.target || e.srcElement;\n\n        if (target.jscolor && target.jscolor instanceof jsc.pub) {\n          // clicked targetElement -> show picker\n          if (target.jscolor.showOnClick && !target.disabled) {\n            target.jscolor.show();\n          }\n        } else if (jsc.getData(target, 'gui')) {\n          // clicked jscolor's GUI element\n          var control = jsc.getData(target, 'control');\n\n          if (control) {\n            // jscolor's control\n            jsc.onControlPointerStart(e, target, jsc.getData(target, 'control'), 'mouse');\n          }\n        } else {\n          // mouse is outside the picker's controls -> hide the color picker!\n          if (jsc.picker && jsc.picker.owner) {\n            jsc.picker.owner.tryHide();\n          }\n        }\n      },\n      onDocumentKeyUp: function onDocumentKeyUp(e) {\n        if (['Tab', 'Escape'].indexOf(jsc.eventKey(e)) !== -1) {\n          if (jsc.picker && jsc.picker.owner) {\n            jsc.picker.owner.tryHide();\n          }\n        }\n      },\n      onWindowResize: function onWindowResize(e) {\n        jsc.redrawPosition();\n      },\n      onParentScroll: function onParentScroll(e) {\n        // hide the picker when one of the parent elements is scrolled\n        if (jsc.picker && jsc.picker.owner) {\n          jsc.picker.owner.tryHide();\n        }\n      },\n      onPickerTouchStart: function onPickerTouchStart(e) {\n        var target = e.target || e.srcElement;\n\n        if (jsc.getData(target, 'control')) {\n          jsc.onControlPointerStart(e, target, jsc.getData(target, 'control'), 'touch');\n        }\n      },\n      // calls function specified in picker's property\n      triggerCallback: function triggerCallback(thisObj, prop) {\n        if (!thisObj[prop]) {\n          return; // callback func not specified\n        }\n\n        var callback = null;\n\n        if (typeof thisObj[prop] === 'string') {\n          // string with code\n          try {\n            callback = new Function(thisObj[prop]);\n          } catch (e) {\n            console.error(e);\n          }\n        } else {\n          // function\n          callback = thisObj[prop];\n        }\n\n        if (callback) {\n          callback.call(thisObj);\n        }\n      },\n      // Triggers a color change related event(s) on all picker instances.\n      // It is possible to specify multiple events separated with a space.\n      triggerGlobal: function triggerGlobal(eventNames) {\n        var inst = jsc.getInstances();\n\n        for (var i = 0; i < inst.length; i += 1) {\n          inst[i].trigger(eventNames);\n        }\n      },\n      _pointerMoveEvent: {\n        mouse: 'mousemove',\n        touch: 'touchmove'\n      },\n      _pointerEndEvent: {\n        mouse: 'mouseup',\n        touch: 'touchend'\n      },\n      _pointerOrigin: null,\n      _capturedTarget: null,\n      onControlPointerStart: function onControlPointerStart(e, target, controlName, pointerType) {\n        var thisObj = jsc.getData(target, 'instance');\n        jsc.preventDefault(e);\n        jsc.captureTarget(target);\n\n        var registerDragEvents = function registerDragEvents(doc, offset) {\n          jsc.attachGroupEvent('drag', doc, jsc._pointerMoveEvent[pointerType], jsc.onDocumentPointerMove(e, target, controlName, pointerType, offset));\n          jsc.attachGroupEvent('drag', doc, jsc._pointerEndEvent[pointerType], jsc.onDocumentPointerEnd(e, target, controlName, pointerType));\n        };\n\n        registerDragEvents(document, [0, 0]);\n\n        if (window.parent && window.frameElement) {\n          var rect = window.frameElement.getBoundingClientRect();\n          var ofs = [-rect.left, -rect.top];\n          registerDragEvents(window.parent.window.document, ofs);\n        }\n\n        var abs = jsc.getAbsPointerPos(e);\n        var rel = jsc.getRelPointerPos(e);\n        jsc._pointerOrigin = {\n          x: abs.x - rel.x,\n          y: abs.y - rel.y\n        };\n\n        switch (controlName) {\n          case 'pad':\n            // if the value slider is at the bottom, move it up\n            if (jsc.getSliderChannel(thisObj) === 'v' && thisObj.channels.v === 0) {\n              thisObj.fromHSVA(null, null, 100, null);\n            }\n\n            jsc.setPad(thisObj, e, 0, 0);\n            break;\n\n          case 'sld':\n            jsc.setSld(thisObj, e, 0);\n            break;\n\n          case 'asld':\n            jsc.setASld(thisObj, e, 0);\n            break;\n        }\n\n        thisObj.trigger('input');\n      },\n      onDocumentPointerMove: function onDocumentPointerMove(e, target, controlName, pointerType, offset) {\n        return function (e) {\n          var thisObj = jsc.getData(target, 'instance');\n\n          switch (controlName) {\n            case 'pad':\n              jsc.setPad(thisObj, e, offset[0], offset[1]);\n              break;\n\n            case 'sld':\n              jsc.setSld(thisObj, e, offset[1]);\n              break;\n\n            case 'asld':\n              jsc.setASld(thisObj, e, offset[1]);\n              break;\n          }\n\n          thisObj.trigger('input');\n        };\n      },\n      onDocumentPointerEnd: function onDocumentPointerEnd(e, target, controlName, pointerType) {\n        return function (e) {\n          var thisObj = jsc.getData(target, 'instance');\n          jsc.detachGroupEvents('drag');\n          jsc.releaseTarget(); // Always trigger changes AFTER detaching outstanding mouse handlers,\n          // in case some color change occured in user-defined onChange/onInput handler\n          // would intrude into current mouse events\n\n          thisObj.trigger('input');\n          thisObj.trigger('change');\n        };\n      },\n      setPad: function setPad(thisObj, e, ofsX, ofsY) {\n        var pointerAbs = jsc.getAbsPointerPos(e);\n        var x = ofsX + pointerAbs.x - jsc._pointerOrigin.x - thisObj.padding - thisObj.controlBorderWidth;\n        var y = ofsY + pointerAbs.y - jsc._pointerOrigin.y - thisObj.padding - thisObj.controlBorderWidth;\n        var xVal = x * (360 / (thisObj.width - 1));\n        var yVal = 100 - y * (100 / (thisObj.height - 1));\n\n        switch (jsc.getPadYChannel(thisObj)) {\n          case 's':\n            thisObj.fromHSVA(xVal, yVal, null, null);\n            break;\n\n          case 'v':\n            thisObj.fromHSVA(xVal, null, yVal, null);\n            break;\n        }\n      },\n      setSld: function setSld(thisObj, e, ofsY) {\n        var pointerAbs = jsc.getAbsPointerPos(e);\n        var y = ofsY + pointerAbs.y - jsc._pointerOrigin.y - thisObj.padding - thisObj.controlBorderWidth;\n        var yVal = 100 - y * (100 / (thisObj.height - 1));\n\n        switch (jsc.getSliderChannel(thisObj)) {\n          case 's':\n            thisObj.fromHSVA(null, yVal, null, null);\n            break;\n\n          case 'v':\n            thisObj.fromHSVA(null, null, yVal, null);\n            break;\n        }\n      },\n      setASld: function setASld(thisObj, e, ofsY) {\n        var pointerAbs = jsc.getAbsPointerPos(e);\n        var y = ofsY + pointerAbs.y - jsc._pointerOrigin.y - thisObj.padding - thisObj.controlBorderWidth;\n        var yVal = 1.0 - y * (1.0 / (thisObj.height - 1));\n\n        if (yVal < 1.0) {\n          // if format is flexible and the current format doesn't support alpha, switch to a suitable one\n          if (thisObj.format.toLowerCase() === 'any' && thisObj.getFormat() !== 'rgba') {\n            thisObj._currentFormat = 'rgba';\n          }\n        }\n\n        thisObj.fromHSVA(null, null, null, yVal);\n      },\n      createPalette: function createPalette() {\n        var paletteObj = {\n          elm: null,\n          draw: null\n        };\n        var canvas = jsc.createEl('canvas');\n        var ctx = canvas.getContext('2d');\n\n        var drawFunc = function drawFunc(width, height, type) {\n          canvas.width = width;\n          canvas.height = height;\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          var hGrad = ctx.createLinearGradient(0, 0, canvas.width, 0);\n          hGrad.addColorStop(0 / 6, '#F00');\n          hGrad.addColorStop(1 / 6, '#FF0');\n          hGrad.addColorStop(2 / 6, '#0F0');\n          hGrad.addColorStop(3 / 6, '#0FF');\n          hGrad.addColorStop(4 / 6, '#00F');\n          hGrad.addColorStop(5 / 6, '#F0F');\n          hGrad.addColorStop(6 / 6, '#F00');\n          ctx.fillStyle = hGrad;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n          var vGrad = ctx.createLinearGradient(0, 0, 0, canvas.height);\n\n          switch (type.toLowerCase()) {\n            case 's':\n              vGrad.addColorStop(0, 'rgba(255,255,255,0)');\n              vGrad.addColorStop(1, 'rgba(255,255,255,1)');\n              break;\n\n            case 'v':\n              vGrad.addColorStop(0, 'rgba(0,0,0,0)');\n              vGrad.addColorStop(1, 'rgba(0,0,0,1)');\n              break;\n          }\n\n          ctx.fillStyle = vGrad;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        };\n\n        paletteObj.elm = canvas;\n        paletteObj.draw = drawFunc;\n        return paletteObj;\n      },\n      createSliderGradient: function createSliderGradient() {\n        var sliderObj = {\n          elm: null,\n          draw: null\n        };\n        var canvas = jsc.createEl('canvas');\n        var ctx = canvas.getContext('2d');\n\n        var drawFunc = function drawFunc(width, height, color1, color2) {\n          canvas.width = width;\n          canvas.height = height;\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          var grad = ctx.createLinearGradient(0, 0, 0, canvas.height);\n          grad.addColorStop(0, color1);\n          grad.addColorStop(1, color2);\n          ctx.fillStyle = grad;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        };\n\n        sliderObj.elm = canvas;\n        sliderObj.draw = drawFunc;\n        return sliderObj;\n      },\n      createASliderGradient: function createASliderGradient() {\n        var sliderObj = {\n          elm: null,\n          draw: null\n        };\n        var canvas = jsc.createEl('canvas');\n        var ctx = canvas.getContext('2d');\n\n        var drawFunc = function drawFunc(width, height, color) {\n          canvas.width = width;\n          canvas.height = height;\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          var sqSize = canvas.width / 2;\n          var sqColor1 = jsc.pub.chessboardColor1;\n          var sqColor2 = jsc.pub.chessboardColor2; // dark gray background\n\n          ctx.fillStyle = sqColor1;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n          for (var y = 0; y < canvas.height; y += sqSize * 2) {\n            // light gray squares\n            ctx.fillStyle = sqColor2;\n            ctx.fillRect(0, y, sqSize, sqSize);\n            ctx.fillRect(sqSize, y + sqSize, sqSize, sqSize);\n          }\n\n          var grad = ctx.createLinearGradient(0, 0, 0, canvas.height);\n          grad.addColorStop(0, color);\n          grad.addColorStop(1, 'rgba(0,0,0,0)');\n          ctx.fillStyle = grad;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        };\n\n        sliderObj.elm = canvas;\n        sliderObj.draw = drawFunc;\n        return sliderObj;\n      },\n      BoxShadow: function () {\n        var BoxShadow = function BoxShadow(hShadow, vShadow, blur, spread, color, inset) {\n          this.hShadow = hShadow;\n          this.vShadow = vShadow;\n          this.blur = blur;\n          this.spread = spread;\n          this.color = color;\n          this.inset = !!inset;\n        };\n\n        BoxShadow.prototype.toString = function () {\n          var vals = [Math.round(this.hShadow) + 'px', Math.round(this.vShadow) + 'px', Math.round(this.blur) + 'px', Math.round(this.spread) + 'px', this.color];\n\n          if (this.inset) {\n            vals.push('inset');\n          }\n\n          return vals.join(' ');\n        };\n\n        return BoxShadow;\n      }(),\n      flags: {\n        leaveValue: 1 << 0,\n        leaveAlpha: 1 << 1,\n        leavePreview: 1 << 2\n      },\n      enumOpts: {\n        format: ['auto', 'any', 'hex', 'rgb', 'rgba'],\n        previewPosition: ['left', 'right'],\n        mode: ['hsv', 'hvs', 'hs', 'hv'],\n        position: ['left', 'right', 'top', 'bottom'],\n        alphaChannel: ['auto', true, false]\n      },\n      deprecatedOpts: {\n        // <old_option>: <new_option>  (<new_option> can be null)\n        'styleElement': 'previewElement',\n        'onFineChange': 'onInput',\n        'overwriteImportant': 'forceStyle',\n        'closable': 'closeButton',\n        'insetWidth': 'controlBorderWidth',\n        'insetColor': 'controlBorderColor',\n        'refine': null\n      },\n      docsRef: ' ' + 'See https://jscolor.com/docs/',\n      //\n      // Usage:\n      // var myPicker = new JSColor(<targetElement> [, <options>])\n      //\n      // (constructor is accessible via both 'jscolor' and 'JSColor' name)\n      //\n      pub: function pub(targetElement, opts) {\n        var THIS = this;\n\n        if (!opts) {\n          opts = {};\n        }\n\n        this.channels = {\n          r: 255,\n          // red [0-255]\n          g: 255,\n          // green [0-255]\n          b: 255,\n          // blue [0-255]\n          h: 0,\n          // hue [0-360]\n          s: 0,\n          // saturation [0-100]\n          v: 100,\n          // value (brightness) [0-100]\n          a: 1.0 // alpha (opacity) [0.0 - 1.0]\n\n        }; // General options\n        //\n\n        this.format = 'auto'; // 'auto' | 'any' | 'hex' | 'rgb' | 'rgba' - Format of the input/output value\n\n        this.value = undefined; // INITIAL color value in any supported format. To change it later, use method fromString(), fromHSVA(), fromRGBA() or channel()\n\n        this.alpha = undefined; // INITIAL alpha value. To change it later, call method channel('A', <value>)\n\n        this.onChange = undefined; // called when color changes. Value can be either a function or a string with JS code.\n\n        this.onInput = undefined; // called repeatedly as the color is being changed, e.g. while dragging a slider. Value can be either a function or a string with JS code.\n\n        this.valueElement = undefined; // element that will be used to display and input the color value\n\n        this.alphaElement = undefined; // element that will be used to display and input the alpha (opacity) value\n\n        this.previewElement = undefined; // element that will preview the picked color using CSS background\n\n        this.previewPosition = 'left'; // 'left' | 'right' - position of the color preview in previewElement\n\n        this.previewSize = 32; // (px) width of the color preview displayed in previewElement\n\n        this.previewPadding = 8; // (px) space between color preview and content of the previewElement\n\n        this.required = true; // whether the associated text input must always contain a color value. If false, the input can be left empty.\n\n        this.hash = true; // whether to prefix the HEX color code with # symbol (only applicable for HEX format)\n\n        this.uppercase = true; // whether to show the HEX color code in upper case (only applicable for HEX format)\n\n        this.forceStyle = true; // whether to overwrite CSS style of the previewElement using !important flag\n        // Color Picker options\n        //\n\n        this.width = 181; // width of color palette (in px)\n\n        this.height = 101; // height of color palette (in px)\n\n        this.mode = 'HSV'; // 'HSV' | 'HVS' | 'HS' | 'HV' - layout of the color picker controls\n\n        this.alphaChannel = 'auto'; // 'auto' | true | false - if alpha channel is enabled, the alpha slider will be visible. If 'auto', it will be determined according to color format\n\n        this.position = 'bottom'; // 'left' | 'right' | 'top' | 'bottom' - position relative to the target element\n\n        this.smartPosition = true; // automatically change picker position when there is not enough space for it\n\n        this.showOnClick = true; // whether to show the picker when user clicks its target element\n\n        this.hideOnLeave = true; // whether to automatically hide the picker when user leaves its target element (e.g. upon clicking the document)\n\n        this.sliderSize = 16; // px\n\n        this.crossSize = 8; // px\n\n        this.closeButton = false; // whether to display the Close button\n\n        this.closeText = 'Close';\n        this.buttonColor = 'rgba(0,0,0,1)'; // CSS color\n\n        this.buttonHeight = 18; // px\n\n        this.padding = 12; // px\n\n        this.backgroundColor = 'rgba(255,255,255,1)'; // CSS color\n\n        this.borderWidth = 1; // px\n\n        this.borderColor = 'rgba(187,187,187,1)'; // CSS color\n\n        this.borderRadius = 8; // px\n\n        this.controlBorderWidth = 1; // px\n\n        this.controlBorderColor = 'rgba(187,187,187,1)'; // CSS color\n\n        this.shadow = true; // whether to display a shadow\n\n        this.shadowBlur = 15; // px\n\n        this.shadowColor = 'rgba(0,0,0,0.2)'; // CSS color\n\n        this.pointerColor = 'rgba(76,76,76,1)'; // CSS color\n\n        this.pointerBorderWidth = 1; // px\n\n        this.pointerBorderColor = 'rgba(255,255,255,1)'; // CSS color\n\n        this.pointerThickness = 2; // px\n\n        this.zIndex = 5000;\n        this.container = undefined; // where to append the color picker (BODY element by default)\n        // Experimental\n        //\n\n        this.minS = 0; // min allowed saturation (0 - 100)\n\n        this.maxS = 100; // max allowed saturation (0 - 100)\n\n        this.minV = 0; // min allowed value (brightness) (0 - 100)\n\n        this.maxV = 100; // max allowed value (brightness) (0 - 100)\n\n        this.minA = 0.0; // min allowed alpha (opacity) (0.0 - 1.0)\n\n        this.maxA = 1.0; // max allowed alpha (opacity) (0.0 - 1.0)\n        // let's process the DEPRECATED 'options' property (this will be later removed)\n\n        if (jsc.pub.options) {\n          // let's set custom default options, if specified\n          for (var opt in jsc.pub.options) {\n            if (jsc.pub.options.hasOwnProperty(opt)) {\n              try {\n                setOption(opt, jsc.pub.options[opt]);\n              } catch (e) {\n                console.warn(e);\n              }\n            }\n          }\n        } // let's apply configuration presets\n        //\n\n\n        var presetsArr = [];\n\n        if (opts.preset) {\n          if (typeof opts.preset === 'string') {\n            presetsArr = opts.preset.split(/\\s+/);\n          } else if (Array.isArray(opts.preset)) {\n            presetsArr = opts.preset.slice(); // slice() to clone\n          } else {\n            console.warn('Unrecognized preset value');\n          }\n        } // always use the 'default' preset. If it's not listed, append it to the end.\n\n\n        if (presetsArr.indexOf('default') === -1) {\n          presetsArr.push('default');\n        } // let's apply the presets in reverse order, so that should there be any overlapping options,\n        // the formerly listed preset will override the latter\n\n\n        for (var i = presetsArr.length - 1; i >= 0; i -= 1) {\n          var pres = presetsArr[i];\n\n          if (!pres) {\n            continue; // preset is empty string\n          }\n\n          if (!jsc.pub.presets.hasOwnProperty(pres)) {\n            console.warn('Unknown preset: %s', pres);\n            continue;\n          }\n\n          for (var opt in jsc.pub.presets[pres]) {\n            if (jsc.pub.presets[pres].hasOwnProperty(opt)) {\n              try {\n                setOption(opt, jsc.pub.presets[pres][opt]);\n              } catch (e) {\n                console.warn(e);\n              }\n            }\n          }\n        } // let's set specific options for this color picker\n\n\n        var nonProperties = [// these options won't be set as instance properties\n        'preset'];\n\n        for (var opt in opts) {\n          if (opts.hasOwnProperty(opt)) {\n            if (nonProperties.indexOf(opt) === -1) {\n              try {\n                setOption(opt, opts[opt]);\n              } catch (e) {\n                console.warn(e);\n              }\n            }\n          }\n        } // Getter: option(name)\n        // Setter: option(name, value)\n        //         option({name:value, ...})\n        //\n\n\n        this.option = function () {\n          if (!arguments.length) {\n            throw new Error('No option specified');\n          }\n\n          if (arguments.length === 1 && typeof arguments[0] === 'string') {\n            // getting a single option\n            try {\n              return getOption(arguments[0]);\n            } catch (e) {\n              console.warn(e);\n            }\n\n            return false;\n          } else if (arguments.length >= 2 && typeof arguments[0] === 'string') {\n            // setting a single option\n            try {\n              if (!setOption(arguments[0], arguments[1])) {\n                return false;\n              }\n            } catch (e) {\n              console.warn(e);\n              return false;\n            }\n\n            this.redraw(); // immediately redraws the picker, if it's displayed\n\n            this.exposeColor(); // in case some preview-related or format-related option was changed\n\n            return true;\n          } else if (arguments.length === 1 && _typeof(arguments[0]) === 'object') {\n            // setting multiple options\n            var opts = arguments[0];\n            var success = true;\n\n            for (var opt in opts) {\n              if (opts.hasOwnProperty(opt)) {\n                try {\n                  if (!setOption(opt, opts[opt])) {\n                    success = false;\n                  }\n                } catch (e) {\n                  console.warn(e);\n                  success = false;\n                }\n              }\n            }\n\n            this.redraw(); // immediately redraws the picker, if it's displayed\n\n            this.exposeColor(); // in case some preview-related or format-related option was changed\n\n            return success;\n          }\n\n          throw new Error('Invalid arguments');\n        }; // Getter: channel(name)\n        // Setter: channel(name, value)\n        //\n\n\n        this.channel = function (name, value) {\n          if (typeof name !== 'string') {\n            throw new Error('Invalid value for channel name: ' + name);\n          }\n\n          if (value === undefined) {\n            // getting channel value\n            if (!this.channels.hasOwnProperty(name.toLowerCase())) {\n              console.warn('Getting unknown channel: ' + name);\n              return false;\n            }\n\n            return this.channels[name.toLowerCase()];\n          } else {\n            // setting channel value\n            var res = false;\n\n            switch (name.toLowerCase()) {\n              case 'r':\n                res = this.fromRGBA(value, null, null, null);\n                break;\n\n              case 'g':\n                res = this.fromRGBA(null, value, null, null);\n                break;\n\n              case 'b':\n                res = this.fromRGBA(null, null, value, null);\n                break;\n\n              case 'h':\n                res = this.fromHSVA(value, null, null, null);\n                break;\n\n              case 's':\n                res = this.fromHSVA(null, value, null, null);\n                break;\n\n              case 'v':\n                res = this.fromHSVA(null, null, value, null);\n                break;\n\n              case 'a':\n                res = this.fromHSVA(null, null, null, value);\n                break;\n\n              default:\n                console.warn('Setting unknown channel: ' + name);\n                return false;\n            }\n\n            if (res) {\n              this.redraw(); // immediately redraws the picker, if it's displayed\n\n              return true;\n            }\n          }\n\n          return false;\n        }; // Triggers given input event(s) by:\n        // - executing on<Event> callback specified as picker's option\n        // - triggering standard DOM event listeners attached to the value element\n        //\n        // It is possible to specify multiple events separated with a space.\n        //\n\n\n        this.trigger = function (eventNames) {\n          var evs = jsc.strList(eventNames);\n\n          for (var i = 0; i < evs.length; i += 1) {\n            var ev = evs[i].toLowerCase(); // trigger a callback\n\n            var callbackProp = null;\n\n            switch (ev) {\n              case 'input':\n                callbackProp = 'onInput';\n                break;\n\n              case 'change':\n                callbackProp = 'onChange';\n                break;\n            }\n\n            if (callbackProp) {\n              jsc.triggerCallback(this, callbackProp);\n            } // trigger standard DOM event listeners on the value element\n\n\n            jsc.triggerInputEvent(this.valueElement, ev, true, true);\n          }\n        }; // h: 0-360\n        // s: 0-100\n        // v: 0-100\n        // a: 0.0-1.0\n        //\n\n\n        this.fromHSVA = function (h, s, v, a, flags) {\n          // null = don't change\n          if (h === undefined) {\n            h = null;\n          }\n\n          if (s === undefined) {\n            s = null;\n          }\n\n          if (v === undefined) {\n            v = null;\n          }\n\n          if (a === undefined) {\n            a = null;\n          }\n\n          if (h !== null) {\n            if (isNaN(h)) {\n              return false;\n            }\n\n            this.channels.h = Math.max(0, Math.min(360, h));\n          }\n\n          if (s !== null) {\n            if (isNaN(s)) {\n              return false;\n            }\n\n            this.channels.s = Math.max(0, Math.min(100, this.maxS, s), this.minS);\n          }\n\n          if (v !== null) {\n            if (isNaN(v)) {\n              return false;\n            }\n\n            this.channels.v = Math.max(0, Math.min(100, this.maxV, v), this.minV);\n          }\n\n          if (a !== null) {\n            if (isNaN(a)) {\n              return false;\n            }\n\n            this.channels.a = this.hasAlphaChannel() ? Math.max(0, Math.min(1, this.maxA, a), this.minA) : 1.0; // if alpha channel is disabled, the color should stay 100% opaque\n          }\n\n          var rgb = jsc.HSV_RGB(this.channels.h, this.channels.s, this.channels.v);\n          this.channels.r = rgb[0];\n          this.channels.g = rgb[1];\n          this.channels.b = rgb[2];\n          this.exposeColor(flags);\n          return true;\n        }; // r: 0-255\n        // g: 0-255\n        // b: 0-255\n        // a: 0.0-1.0\n        //\n\n\n        this.fromRGBA = function (r, g, b, a, flags) {\n          // null = don't change\n          if (r === undefined) {\n            r = null;\n          }\n\n          if (g === undefined) {\n            g = null;\n          }\n\n          if (b === undefined) {\n            b = null;\n          }\n\n          if (a === undefined) {\n            a = null;\n          }\n\n          if (r !== null) {\n            if (isNaN(r)) {\n              return false;\n            }\n\n            r = Math.max(0, Math.min(255, r));\n          }\n\n          if (g !== null) {\n            if (isNaN(g)) {\n              return false;\n            }\n\n            g = Math.max(0, Math.min(255, g));\n          }\n\n          if (b !== null) {\n            if (isNaN(b)) {\n              return false;\n            }\n\n            b = Math.max(0, Math.min(255, b));\n          }\n\n          if (a !== null) {\n            if (isNaN(a)) {\n              return false;\n            }\n\n            this.channels.a = this.hasAlphaChannel() ? Math.max(0, Math.min(1, this.maxA, a), this.minA) : 1.0; // if alpha channel is disabled, the color should stay 100% opaque\n          }\n\n          var hsv = jsc.RGB_HSV(r === null ? this.channels.r : r, g === null ? this.channels.g : g, b === null ? this.channels.b : b);\n\n          if (hsv[0] !== null) {\n            this.channels.h = Math.max(0, Math.min(360, hsv[0]));\n          }\n\n          if (hsv[2] !== 0) {\n            // fully black color stays black through entire saturation range, so let's not change saturation\n            this.channels.s = Math.max(0, this.minS, Math.min(100, this.maxS, hsv[1]));\n          }\n\n          this.channels.v = Math.max(0, this.minV, Math.min(100, this.maxV, hsv[2])); // update RGB according to final HSV, as some values might be trimmed\n\n          var rgb = jsc.HSV_RGB(this.channels.h, this.channels.s, this.channels.v);\n          this.channels.r = rgb[0];\n          this.channels.g = rgb[1];\n          this.channels.b = rgb[2];\n          this.exposeColor(flags);\n          return true;\n        }; // DEPRECATED. Use .fromHSVA() instead\n        //\n\n\n        this.fromHSV = function (h, s, v, flags) {\n          console.warn('fromHSV() method is DEPRECATED. Using fromHSVA() instead.' + jsc.docsRef);\n          return this.fromHSVA(h, s, v, null, flags);\n        }; // DEPRECATED. Use .fromRGBA() instead\n        //\n\n\n        this.fromRGB = function (r, g, b, flags) {\n          console.warn('fromRGB() method is DEPRECATED. Using fromRGBA() instead.' + jsc.docsRef);\n          return this.fromRGBA(r, g, b, null, flags);\n        };\n\n        this.fromString = function (str, flags) {\n          if (!this.required && str.trim() === '') {\n            // setting empty string to an optional color input\n            this.setPreviewElementBg(null);\n            this.setValueElementValue('');\n            return true;\n          }\n\n          var color = jsc.parseColorString(str);\n\n          if (!color) {\n            return false; // could not parse\n          }\n\n          if (this.format.toLowerCase() === 'any') {\n            this._currentFormat = color.format; // adapt format\n\n            if (this.getFormat() !== 'rgba') {\n              color.rgba[3] = 1.0; // when switching to a format that doesn't support alpha, set full opacity\n            }\n\n            this.redraw(); // to show/hide the alpha slider according to current format\n          }\n\n          this.fromRGBA(color.rgba[0], color.rgba[1], color.rgba[2], color.rgba[3], flags);\n          return true;\n        };\n\n        this.toString = function (format) {\n          if (format === undefined) {\n            format = this.getFormat(); // format not specified -> use the current format\n          }\n\n          switch (format.toLowerCase()) {\n            case 'hex':\n              return this.toHEXString();\n              break;\n\n            case 'rgb':\n              return this.toRGBString();\n              break;\n\n            case 'rgba':\n              return this.toRGBAString();\n              break;\n          }\n\n          return false;\n        };\n\n        this.toHEXString = function () {\n          return '#' + (('0' + Math.round(this.channels.r).toString(16)).substr(-2) + ('0' + Math.round(this.channels.g).toString(16)).substr(-2) + ('0' + Math.round(this.channels.b).toString(16)).substr(-2)).toUpperCase();\n        };\n\n        this.toRGBString = function () {\n          return 'rgb(' + Math.round(this.channels.r) + ',' + Math.round(this.channels.g) + ',' + Math.round(this.channels.b) + ')';\n        };\n\n        this.toRGBAString = function () {\n          return 'rgba(' + Math.round(this.channels.r) + ',' + Math.round(this.channels.g) + ',' + Math.round(this.channels.b) + ',' + Math.round(this.channels.a * 100) / 100 + ')';\n        };\n\n        this.toGrayscale = function () {\n          return 0.213 * this.channels.r + 0.715 * this.channels.g + 0.072 * this.channels.b;\n        };\n\n        this.toCanvas = function () {\n          return jsc.genColorPreviewCanvas(this.toRGBAString()).canvas;\n        };\n\n        this.toDataURL = function () {\n          return this.toCanvas().toDataURL();\n        };\n\n        this.toBackground = function () {\n          return jsc.pub.background(this.toRGBAString());\n        };\n\n        this.isLight = function () {\n          return this.toGrayscale() > 255 / 2;\n        };\n\n        this.hide = function () {\n          if (isPickerOwner()) {\n            detachPicker();\n          }\n        };\n\n        this.show = function () {\n          drawPicker();\n        };\n\n        this.redraw = function () {\n          if (isPickerOwner()) {\n            drawPicker();\n          }\n        };\n\n        this.getFormat = function () {\n          return this._currentFormat;\n        };\n\n        this.hasAlphaChannel = function () {\n          if (this.alphaChannel === 'auto') {\n            return this.format.toLowerCase() === 'any' || // format can change on the fly (e.g. from hex to rgba), so let's consider the alpha channel enabled\n            this.getFormat() === 'rgba' || // the current format supports alpha channel\n            this.alpha !== undefined || // initial alpha value is set, so we're working with alpha channel\n            this.alphaElement !== undefined // the alpha value is redirected, so we're working with alpha channel\n            ;\n          }\n\n          return this.alphaChannel; // the alpha channel is explicitly set\n        };\n\n        this.processValueInput = function (str) {\n          if (!this.fromString(str)) {\n            // could not parse the color value - let's just expose the current color\n            this.exposeColor();\n          }\n        };\n\n        this.processAlphaInput = function (str) {\n          if (!this.fromHSVA(null, null, null, parseFloat(str))) {\n            // could not parse the alpha value - let's just expose the current color\n            this.exposeColor();\n          }\n        };\n\n        this.exposeColor = function (flags) {\n          if (!(flags & jsc.flags.leaveValue) && this.valueElement) {\n            var value = this.toString();\n\n            if (this.getFormat() === 'hex') {\n              if (!this.uppercase) {\n                value = value.toLowerCase();\n              }\n\n              if (!this.hash) {\n                value = value.replace(/^#/, '');\n              }\n            }\n\n            this.setValueElementValue(value);\n          }\n\n          if (!(flags & jsc.flags.leaveAlpha) && this.alphaElement) {\n            var value = Math.round(this.channels.a * 100) / 100;\n            this.setAlphaElementValue(value);\n          }\n\n          if (!(flags & jsc.flags.leavePreview) && this.previewElement) {\n            var previewPos = null; // 'left' | 'right' (null -> fill the entire element)\n\n            if (jsc.isTextInput(this.previewElement) || // text input\n            jsc.isButton(this.previewElement) && !jsc.isButtonEmpty(this.previewElement) // button with text\n            ) {\n                previewPos = this.previewPosition;\n              }\n\n            this.setPreviewElementBg(this.toRGBAString());\n          }\n\n          if (isPickerOwner()) {\n            redrawPad();\n            redrawSld();\n            redrawASld();\n          }\n        };\n\n        this.setPreviewElementBg = function (color) {\n          if (!this.previewElement) {\n            return;\n          }\n\n          var position = null; // color preview position:  null | 'left' | 'right'\n\n          var width = null; // color preview width:  px | null = fill the entire element\n\n          if (jsc.isTextInput(this.previewElement) || // text input\n          jsc.isButton(this.previewElement) && !jsc.isButtonEmpty(this.previewElement) // button with text\n          ) {\n              position = this.previewPosition;\n              width = this.previewSize;\n            }\n\n          var backgrounds = [];\n\n          if (!color) {\n            // there is no color preview to display -> let's remove any previous background image\n            backgrounds.push({\n              image: 'none',\n              position: 'left top',\n              size: 'auto',\n              repeat: 'no-repeat',\n              origin: 'padding-box'\n            });\n          } else {\n            // CSS gradient for background color preview\n            backgrounds.push({\n              image: jsc.genColorPreviewGradient(color, position, width ? width - jsc.pub.previewSeparator.length : null),\n              position: 'left top',\n              size: 'auto',\n              repeat: position ? 'repeat-y' : 'repeat',\n              origin: 'padding-box'\n            }); // data URL of generated PNG image with a gray transparency chessboard\n\n            var preview = jsc.genColorPreviewCanvas('rgba(0,0,0,0)', position ? {\n              'left': 'right',\n              'right': 'left'\n            }[position] : null, width, true);\n            backgrounds.push({\n              image: 'url(\\'' + preview.canvas.toDataURL() + '\\')',\n              position: (position || 'left') + ' top',\n              size: preview.width + 'px ' + preview.height + 'px',\n              repeat: position ? 'repeat-y' : 'repeat',\n              origin: 'padding-box'\n            });\n          }\n\n          var bg = {\n            image: [],\n            position: [],\n            size: [],\n            repeat: [],\n            origin: []\n          };\n\n          for (var i = 0; i < backgrounds.length; i += 1) {\n            bg.image.push(backgrounds[i].image);\n            bg.position.push(backgrounds[i].position);\n            bg.size.push(backgrounds[i].size);\n            bg.repeat.push(backgrounds[i].repeat);\n            bg.origin.push(backgrounds[i].origin);\n          } // set previewElement's background-images\n\n\n          var sty = {\n            'background-image': bg.image.join(', '),\n            'background-position': bg.position.join(', '),\n            'background-size': bg.size.join(', '),\n            'background-repeat': bg.repeat.join(', '),\n            'background-origin': bg.origin.join(', ')\n          };\n          jsc.setStyle(this.previewElement, sty, this.forceStyle); // set/restore previewElement's padding\n\n          var padding = {\n            left: null,\n            right: null\n          };\n\n          if (position) {\n            padding[position] = this.previewSize + this.previewPadding + 'px';\n          }\n\n          var sty = {\n            'padding-left': padding.left,\n            'padding-right': padding.right\n          };\n          jsc.setStyle(this.previewElement, sty, this.forceStyle, true);\n        };\n\n        this.setValueElementValue = function (str) {\n          if (this.valueElement) {\n            if (jsc.nodeName(this.valueElement) === 'input') {\n              this.valueElement.value = str;\n            } else {\n              this.valueElement.innerHTML = str;\n            }\n          }\n        };\n\n        this.setAlphaElementValue = function (str) {\n          if (this.alphaElement) {\n            if (jsc.nodeName(this.alphaElement) === 'input') {\n              this.alphaElement.value = str;\n            } else {\n              this.alphaElement.innerHTML = str;\n            }\n          }\n        };\n\n        this._processParentElementsInDOM = function () {\n          if (this._linkedElementsProcessed) {\n            return;\n          }\n\n          this._linkedElementsProcessed = true;\n          var elm = this.targetElement;\n\n          do {\n            // If the target element or one of its parent nodes has fixed position,\n            // then use fixed positioning instead\n            var compStyle = jsc.getCompStyle(elm);\n\n            if (compStyle.position && compStyle.position.toLowerCase() === 'fixed') {\n              this.fixed = true;\n            }\n\n            if (elm !== this.targetElement) {\n              // Ensure to attach onParentScroll only once to each parent element\n              // (multiple targetElements can share the same parent nodes)\n              //\n              // Note: It's not just offsetParents that can be scrollable,\n              // that's why we loop through all parent nodes\n              if (!jsc.getData(elm, 'hasScrollListener')) {\n                elm.addEventListener('scroll', jsc.onParentScroll, false);\n                jsc.setData(elm, 'hasScrollListener', true);\n              }\n            }\n          } while ((elm = elm.parentNode) && jsc.nodeName(elm) !== 'body');\n        };\n\n        this.tryHide = function () {\n          if (this.hideOnLeave) {\n            this.hide();\n          }\n        };\n\n        function setOption(option, value) {\n          if (typeof option !== 'string') {\n            throw new Error('Invalid value for option name: ' + option);\n          } // enum option\n\n\n          if (jsc.enumOpts.hasOwnProperty(option)) {\n            if (typeof value === 'string') {\n              // enum string values are case insensitive\n              value = value.toLowerCase();\n            }\n\n            if (jsc.enumOpts[option].indexOf(value) === -1) {\n              throw new Error('Option \\'' + option + '\\' has invalid value: ' + value);\n            }\n          } // deprecated option\n\n\n          if (jsc.deprecatedOpts.hasOwnProperty(option)) {\n            var oldOpt = option;\n            var newOpt = jsc.deprecatedOpts[option];\n\n            if (newOpt) {\n              // if we have a new name for this option, let's log a warning and use the new name\n              console.warn('Option \\'%s\\' is DEPRECATED, using \\'%s\\' instead.' + jsc.docsRef, oldOpt, newOpt);\n              option = newOpt;\n            } else {\n              // new name not available for the option\n              throw new Error('Option \\'' + option + '\\' is DEPRECATED');\n            }\n          }\n\n          if (!(option in THIS)) {\n            throw new Error('Unrecognized configuration option: ' + option);\n          }\n\n          THIS[option] = value;\n          return true;\n        }\n\n        function getOption(option) {\n          // deprecated option\n          if (jsc.deprecatedOpts.hasOwnProperty(option)) {\n            var oldOpt = option;\n            var newOpt = jsc.deprecatedOpts[option];\n\n            if (newOpt) {\n              // if we have a new name for this option, let's log a warning and use the new name\n              console.warn('Option \\'%s\\' is DEPRECATED, using \\'%s\\' instead.' + jsc.docsRef, oldOpt, newOpt);\n              option = newOpt;\n            } else {\n              // new name not available for the option\n              throw new Error('Option \\'' + option + '\\' is DEPRECATED');\n            }\n          }\n\n          if (!(option in THIS)) {\n            throw new Error('Unrecognized configuration option: ' + option);\n          }\n\n          return THIS[option];\n        }\n\n        function detachPicker() {\n          jsc.removeClass(THIS.targetElement, jsc.pub.activeClassName);\n          jsc.picker.wrap.parentNode.removeChild(jsc.picker.wrap);\n          delete jsc.picker.owner;\n        }\n\n        function drawPicker() {\n          // At this point, when drawing the picker, we know what the parent elements are\n          // and we can do all related DOM operations, such as registering events on them\n          // or checking their positioning\n          THIS._processParentElementsInDOM();\n\n          if (!jsc.picker) {\n            jsc.picker = {\n              owner: null,\n              // owner picker instance\n              wrap: jsc.createEl('div'),\n              box: jsc.createEl('div'),\n              boxS: jsc.createEl('div'),\n              // shadow area\n              boxB: jsc.createEl('div'),\n              // border\n              pad: jsc.createEl('div'),\n              padB: jsc.createEl('div'),\n              // border\n              padM: jsc.createEl('div'),\n              // mouse/touch area\n              padPal: jsc.createPalette(),\n              cross: jsc.createEl('div'),\n              crossBY: jsc.createEl('div'),\n              // border Y\n              crossBX: jsc.createEl('div'),\n              // border X\n              crossLY: jsc.createEl('div'),\n              // line Y\n              crossLX: jsc.createEl('div'),\n              // line X\n              sld: jsc.createEl('div'),\n              // slider\n              sldB: jsc.createEl('div'),\n              // border\n              sldM: jsc.createEl('div'),\n              // mouse/touch area\n              sldGrad: jsc.createSliderGradient(),\n              sldPtrS: jsc.createEl('div'),\n              // slider pointer spacer\n              sldPtrIB: jsc.createEl('div'),\n              // slider pointer inner border\n              sldPtrMB: jsc.createEl('div'),\n              // slider pointer middle border\n              sldPtrOB: jsc.createEl('div'),\n              // slider pointer outer border\n              asld: jsc.createEl('div'),\n              // alpha slider\n              asldB: jsc.createEl('div'),\n              // border\n              asldM: jsc.createEl('div'),\n              // mouse/touch area\n              asldGrad: jsc.createASliderGradient(),\n              asldPtrS: jsc.createEl('div'),\n              // slider pointer spacer\n              asldPtrIB: jsc.createEl('div'),\n              // slider pointer inner border\n              asldPtrMB: jsc.createEl('div'),\n              // slider pointer middle border\n              asldPtrOB: jsc.createEl('div'),\n              // slider pointer outer border\n              btn: jsc.createEl('div'),\n              btnT: jsc.createEl('span') // text\n\n            };\n            jsc.picker.pad.appendChild(jsc.picker.padPal.elm);\n            jsc.picker.padB.appendChild(jsc.picker.pad);\n            jsc.picker.cross.appendChild(jsc.picker.crossBY);\n            jsc.picker.cross.appendChild(jsc.picker.crossBX);\n            jsc.picker.cross.appendChild(jsc.picker.crossLY);\n            jsc.picker.cross.appendChild(jsc.picker.crossLX);\n            jsc.picker.padB.appendChild(jsc.picker.cross);\n            jsc.picker.box.appendChild(jsc.picker.padB);\n            jsc.picker.box.appendChild(jsc.picker.padM);\n            jsc.picker.sld.appendChild(jsc.picker.sldGrad.elm);\n            jsc.picker.sldB.appendChild(jsc.picker.sld);\n            jsc.picker.sldB.appendChild(jsc.picker.sldPtrOB);\n            jsc.picker.sldPtrOB.appendChild(jsc.picker.sldPtrMB);\n            jsc.picker.sldPtrMB.appendChild(jsc.picker.sldPtrIB);\n            jsc.picker.sldPtrIB.appendChild(jsc.picker.sldPtrS);\n            jsc.picker.box.appendChild(jsc.picker.sldB);\n            jsc.picker.box.appendChild(jsc.picker.sldM);\n            jsc.picker.asld.appendChild(jsc.picker.asldGrad.elm);\n            jsc.picker.asldB.appendChild(jsc.picker.asld);\n            jsc.picker.asldB.appendChild(jsc.picker.asldPtrOB);\n            jsc.picker.asldPtrOB.appendChild(jsc.picker.asldPtrMB);\n            jsc.picker.asldPtrMB.appendChild(jsc.picker.asldPtrIB);\n            jsc.picker.asldPtrIB.appendChild(jsc.picker.asldPtrS);\n            jsc.picker.box.appendChild(jsc.picker.asldB);\n            jsc.picker.box.appendChild(jsc.picker.asldM);\n            jsc.picker.btn.appendChild(jsc.picker.btnT);\n            jsc.picker.box.appendChild(jsc.picker.btn);\n            jsc.picker.boxB.appendChild(jsc.picker.box);\n            jsc.picker.wrap.appendChild(jsc.picker.boxS);\n            jsc.picker.wrap.appendChild(jsc.picker.boxB);\n            jsc.picker.wrap.addEventListener('touchstart', jsc.onPickerTouchStart, jsc.isPassiveEventSupported ? {\n              passive: false\n            } : false);\n          }\n\n          var p = jsc.picker;\n          var displaySlider = !!jsc.getSliderChannel(THIS);\n          var displayAlphaSlider = THIS.hasAlphaChannel();\n          var dims = jsc.getPickerDims(THIS);\n          var crossOuterSize = 2 * THIS.pointerBorderWidth + THIS.pointerThickness + 2 * THIS.crossSize;\n          var controlPadding = jsc.getControlPadding(THIS);\n          var borderRadius = Math.min(THIS.borderRadius, Math.round(THIS.padding * Math.PI)); // px\n\n          var padCursor = 'crosshair'; // wrap\n\n          p.wrap.className = 'jscolor-picker-wrap';\n          p.wrap.style.clear = 'both';\n          p.wrap.style.width = dims[0] + 2 * THIS.borderWidth + 'px';\n          p.wrap.style.height = dims[1] + 2 * THIS.borderWidth + 'px';\n          p.wrap.style.zIndex = THIS.zIndex; // picker\n\n          p.box.className = 'jscolor-picker';\n          p.box.style.width = dims[0] + 'px';\n          p.box.style.height = dims[1] + 'px';\n          p.box.style.position = 'relative'; // picker shadow\n\n          p.boxS.className = 'jscolor-picker-shadow';\n          p.boxS.style.position = 'absolute';\n          p.boxS.style.left = '0';\n          p.boxS.style.top = '0';\n          p.boxS.style.width = '100%';\n          p.boxS.style.height = '100%';\n          jsc.setBorderRadius(p.boxS, borderRadius + 'px'); // picker border\n\n          p.boxB.className = 'jscolor-picker-border';\n          p.boxB.style.position = 'relative';\n          p.boxB.style.border = THIS.borderWidth + 'px solid';\n          p.boxB.style.borderColor = THIS.borderColor;\n          p.boxB.style.background = THIS.backgroundColor;\n          jsc.setBorderRadius(p.boxB, borderRadius + 'px'); // IE hack:\n          // If the element is transparent, IE will trigger the event on the elements under it,\n          // e.g. on Canvas or on elements with border\n\n          p.padM.style.background = 'rgba(255,0,0,.2)';\n          p.sldM.style.background = 'rgba(0,255,0,.2)';\n          p.asldM.style.background = 'rgba(0,0,255,.2)';\n          p.padM.style.opacity = p.sldM.style.opacity = p.asldM.style.opacity = '0'; // pad\n\n          p.pad.style.position = 'relative';\n          p.pad.style.width = THIS.width + 'px';\n          p.pad.style.height = THIS.height + 'px'; // pad palettes (HSV and HVS)\n\n          p.padPal.draw(THIS.width, THIS.height, jsc.getPadYChannel(THIS)); // pad border\n\n          p.padB.style.position = 'absolute';\n          p.padB.style.left = THIS.padding + 'px';\n          p.padB.style.top = THIS.padding + 'px';\n          p.padB.style.border = THIS.controlBorderWidth + 'px solid';\n          p.padB.style.borderColor = THIS.controlBorderColor; // pad mouse area\n\n          p.padM.style.position = 'absolute';\n          p.padM.style.left = 0 + 'px';\n          p.padM.style.top = 0 + 'px';\n          p.padM.style.width = THIS.padding + 2 * THIS.controlBorderWidth + THIS.width + controlPadding + 'px';\n          p.padM.style.height = 2 * THIS.controlBorderWidth + 2 * THIS.padding + THIS.height + 'px';\n          p.padM.style.cursor = padCursor;\n          jsc.setData(p.padM, {\n            instance: THIS,\n            control: 'pad'\n          }); // pad cross\n\n          p.cross.style.position = 'absolute';\n          p.cross.style.left = p.cross.style.top = '0';\n          p.cross.style.width = p.cross.style.height = crossOuterSize + 'px'; // pad cross border Y and X\n\n          p.crossBY.style.position = p.crossBX.style.position = 'absolute';\n          p.crossBY.style.background = p.crossBX.style.background = THIS.pointerBorderColor;\n          p.crossBY.style.width = p.crossBX.style.height = 2 * THIS.pointerBorderWidth + THIS.pointerThickness + 'px';\n          p.crossBY.style.height = p.crossBX.style.width = crossOuterSize + 'px';\n          p.crossBY.style.left = p.crossBX.style.top = Math.floor(crossOuterSize / 2) - Math.floor(THIS.pointerThickness / 2) - THIS.pointerBorderWidth + 'px';\n          p.crossBY.style.top = p.crossBX.style.left = '0'; // pad cross line Y and X\n\n          p.crossLY.style.position = p.crossLX.style.position = 'absolute';\n          p.crossLY.style.background = p.crossLX.style.background = THIS.pointerColor;\n          p.crossLY.style.height = p.crossLX.style.width = crossOuterSize - 2 * THIS.pointerBorderWidth + 'px';\n          p.crossLY.style.width = p.crossLX.style.height = THIS.pointerThickness + 'px';\n          p.crossLY.style.left = p.crossLX.style.top = Math.floor(crossOuterSize / 2) - Math.floor(THIS.pointerThickness / 2) + 'px';\n          p.crossLY.style.top = p.crossLX.style.left = THIS.pointerBorderWidth + 'px'; // slider\n\n          p.sld.style.overflow = 'hidden';\n          p.sld.style.width = THIS.sliderSize + 'px';\n          p.sld.style.height = THIS.height + 'px'; // slider gradient\n\n          p.sldGrad.draw(THIS.sliderSize, THIS.height, '#000', '#000'); // slider border\n\n          p.sldB.style.display = displaySlider ? 'block' : 'none';\n          p.sldB.style.position = 'absolute';\n          p.sldB.style.left = THIS.padding + THIS.width + 2 * THIS.controlBorderWidth + 2 * controlPadding + 'px';\n          p.sldB.style.top = THIS.padding + 'px';\n          p.sldB.style.border = THIS.controlBorderWidth + 'px solid';\n          p.sldB.style.borderColor = THIS.controlBorderColor; // slider mouse area\n\n          p.sldM.style.display = displaySlider ? 'block' : 'none';\n          p.sldM.style.position = 'absolute';\n          p.sldM.style.left = THIS.padding + THIS.width + 2 * THIS.controlBorderWidth + controlPadding + 'px';\n          p.sldM.style.top = 0 + 'px';\n          p.sldM.style.width = THIS.sliderSize + 2 * controlPadding + 2 * THIS.controlBorderWidth + (displayAlphaSlider ? 0 : Math.max(0, THIS.padding - controlPadding)) // remaining padding to the right edge\n          + 'px';\n          p.sldM.style.height = 2 * THIS.controlBorderWidth + 2 * THIS.padding + THIS.height + 'px';\n          p.sldM.style.cursor = 'default';\n          jsc.setData(p.sldM, {\n            instance: THIS,\n            control: 'sld'\n          }); // slider pointer inner and outer border\n\n          p.sldPtrIB.style.border = p.sldPtrOB.style.border = THIS.pointerBorderWidth + 'px solid ' + THIS.pointerBorderColor; // slider pointer outer border\n\n          p.sldPtrOB.style.position = 'absolute';\n          p.sldPtrOB.style.left = -(2 * THIS.pointerBorderWidth + THIS.pointerThickness) + 'px';\n          p.sldPtrOB.style.top = '0'; // slider pointer middle border\n\n          p.sldPtrMB.style.border = THIS.pointerThickness + 'px solid ' + THIS.pointerColor; // slider pointer spacer\n\n          p.sldPtrS.style.width = THIS.sliderSize + 'px';\n          p.sldPtrS.style.height = jsc.pub.sliderInnerSpace + 'px'; // alpha slider\n\n          p.asld.style.overflow = 'hidden';\n          p.asld.style.width = THIS.sliderSize + 'px';\n          p.asld.style.height = THIS.height + 'px'; // alpha slider gradient\n\n          p.asldGrad.draw(THIS.sliderSize, THIS.height, '#000'); // alpha slider border\n\n          p.asldB.style.display = displayAlphaSlider ? 'block' : 'none';\n          p.asldB.style.position = 'absolute';\n          p.asldB.style.left = THIS.padding + THIS.width + 2 * THIS.controlBorderWidth + controlPadding + (displaySlider ? THIS.sliderSize + 3 * controlPadding + 2 * THIS.controlBorderWidth : 0) + 'px';\n          p.asldB.style.top = THIS.padding + 'px';\n          p.asldB.style.border = THIS.controlBorderWidth + 'px solid';\n          p.asldB.style.borderColor = THIS.controlBorderColor; // alpha slider mouse area\n\n          p.asldM.style.display = displayAlphaSlider ? 'block' : 'none';\n          p.asldM.style.position = 'absolute';\n          p.asldM.style.left = THIS.padding + THIS.width + 2 * THIS.controlBorderWidth + controlPadding + (displaySlider ? THIS.sliderSize + 2 * controlPadding + 2 * THIS.controlBorderWidth : 0) + 'px';\n          p.asldM.style.top = 0 + 'px';\n          p.asldM.style.width = THIS.sliderSize + 2 * controlPadding + 2 * THIS.controlBorderWidth + Math.max(0, THIS.padding - controlPadding) // remaining padding to the right edge\n          + 'px';\n          p.asldM.style.height = 2 * THIS.controlBorderWidth + 2 * THIS.padding + THIS.height + 'px';\n          p.asldM.style.cursor = 'default';\n          jsc.setData(p.asldM, {\n            instance: THIS,\n            control: 'asld'\n          }); // alpha slider pointer inner and outer border\n\n          p.asldPtrIB.style.border = p.asldPtrOB.style.border = THIS.pointerBorderWidth + 'px solid ' + THIS.pointerBorderColor; // alpha slider pointer outer border\n\n          p.asldPtrOB.style.position = 'absolute';\n          p.asldPtrOB.style.left = -(2 * THIS.pointerBorderWidth + THIS.pointerThickness) + 'px';\n          p.asldPtrOB.style.top = '0'; // alpha slider pointer middle border\n\n          p.asldPtrMB.style.border = THIS.pointerThickness + 'px solid ' + THIS.pointerColor; // alpha slider pointer spacer\n\n          p.asldPtrS.style.width = THIS.sliderSize + 'px';\n          p.asldPtrS.style.height = jsc.pub.sliderInnerSpace + 'px'; // the Close button\n\n          function setBtnBorder() {\n            var insetColors = THIS.controlBorderColor.split(/\\s+/);\n            var outsetColor = insetColors.length < 2 ? insetColors[0] : insetColors[1] + ' ' + insetColors[0] + ' ' + insetColors[0] + ' ' + insetColors[1];\n            p.btn.style.borderColor = outsetColor;\n          }\n\n          var btnPadding = 15; // px\n\n          p.btn.className = 'jscolor-btn-close';\n          p.btn.style.display = THIS.closeButton ? 'block' : 'none';\n          p.btn.style.position = 'absolute';\n          p.btn.style.left = THIS.padding + 'px';\n          p.btn.style.bottom = THIS.padding + 'px';\n          p.btn.style.padding = '0 ' + btnPadding + 'px';\n          p.btn.style.maxWidth = dims[0] - 2 * THIS.padding - 2 * THIS.controlBorderWidth - 2 * btnPadding + 'px';\n          p.btn.style.overflow = 'hidden';\n          p.btn.style.height = THIS.buttonHeight + 'px';\n          p.btn.style.whiteSpace = 'nowrap';\n          p.btn.style.border = THIS.controlBorderWidth + 'px solid';\n          setBtnBorder();\n          p.btn.style.color = THIS.buttonColor;\n          p.btn.style.font = '12px sans-serif';\n          p.btn.style.textAlign = 'center';\n          p.btn.style.cursor = 'pointer';\n\n          p.btn.onmousedown = function () {\n            THIS.hide();\n          };\n\n          p.btnT.style.lineHeight = THIS.buttonHeight + 'px';\n          p.btnT.innerHTML = '';\n          p.btnT.appendChild(document.createTextNode(THIS.closeText)); // reposition the pointers\n\n          redrawPad();\n          redrawSld();\n          redrawASld(); // If we are changing the owner without first closing the picker,\n          // make sure to first deal with the old owner\n\n          if (jsc.picker.owner && jsc.picker.owner !== THIS) {\n            jsc.removeClass(jsc.picker.owner.targetElement, jsc.pub.activeClassName);\n          } // Set a new picker owner\n\n\n          jsc.picker.owner = THIS; // The redrawPosition() method needs picker.owner to be set, that's why we call it here,\n          // after setting the owner\n\n          if (THIS.container === document.body) {\n            jsc.redrawPosition();\n          } else {\n            jsc._drawPosition(THIS, 0, 0, 'relative', false);\n          }\n\n          if (p.wrap.parentNode !== THIS.container) {\n            THIS.container.appendChild(p.wrap);\n          }\n\n          jsc.addClass(THIS.targetElement, jsc.pub.activeClassName);\n        }\n\n        function redrawPad() {\n          // redraw the pad pointer\n          var yChannel = jsc.getPadYChannel(THIS);\n          var x = Math.round(THIS.channels.h / 360 * (THIS.width - 1));\n          var y = Math.round((1 - THIS.channels[yChannel] / 100) * (THIS.height - 1));\n          var crossOuterSize = 2 * THIS.pointerBorderWidth + THIS.pointerThickness + 2 * THIS.crossSize;\n          var ofs = -Math.floor(crossOuterSize / 2);\n          jsc.picker.cross.style.left = x + ofs + 'px';\n          jsc.picker.cross.style.top = y + ofs + 'px'; // redraw the slider\n\n          switch (jsc.getSliderChannel(THIS)) {\n            case 's':\n              var rgb1 = jsc.HSV_RGB(THIS.channels.h, 100, THIS.channels.v);\n              var rgb2 = jsc.HSV_RGB(THIS.channels.h, 0, THIS.channels.v);\n              var color1 = 'rgb(' + Math.round(rgb1[0]) + ',' + Math.round(rgb1[1]) + ',' + Math.round(rgb1[2]) + ')';\n              var color2 = 'rgb(' + Math.round(rgb2[0]) + ',' + Math.round(rgb2[1]) + ',' + Math.round(rgb2[2]) + ')';\n              jsc.picker.sldGrad.draw(THIS.sliderSize, THIS.height, color1, color2);\n              break;\n\n            case 'v':\n              var rgb = jsc.HSV_RGB(THIS.channels.h, THIS.channels.s, 100);\n              var color1 = 'rgb(' + Math.round(rgb[0]) + ',' + Math.round(rgb[1]) + ',' + Math.round(rgb[2]) + ')';\n              var color2 = '#000';\n              jsc.picker.sldGrad.draw(THIS.sliderSize, THIS.height, color1, color2);\n              break;\n          } // redraw the alpha slider\n\n\n          jsc.picker.asldGrad.draw(THIS.sliderSize, THIS.height, THIS.toHEXString());\n        }\n\n        function redrawSld() {\n          var sldChannel = jsc.getSliderChannel(THIS);\n\n          if (sldChannel) {\n            // redraw the slider pointer\n            var y = Math.round((1 - THIS.channels[sldChannel] / 100) * (THIS.height - 1));\n            jsc.picker.sldPtrOB.style.top = y - (2 * THIS.pointerBorderWidth + THIS.pointerThickness) - Math.floor(jsc.pub.sliderInnerSpace / 2) + 'px';\n          } // redraw the alpha slider\n\n\n          jsc.picker.asldGrad.draw(THIS.sliderSize, THIS.height, THIS.toHEXString());\n        }\n\n        function redrawASld() {\n          var y = Math.round((1 - THIS.channels.a) * (THIS.height - 1));\n          jsc.picker.asldPtrOB.style.top = y - (2 * THIS.pointerBorderWidth + THIS.pointerThickness) - Math.floor(jsc.pub.sliderInnerSpace / 2) + 'px';\n        }\n\n        function isPickerOwner() {\n          return jsc.picker && jsc.picker.owner === THIS;\n        }\n\n        function onValueKeyDown(ev) {\n          if (jsc.eventKey(ev) === 'Enter') {\n            if (THIS.valueElement) {\n              THIS.processValueInput(THIS.valueElement.value);\n            }\n\n            THIS.tryHide();\n          }\n        }\n\n        function onAlphaKeyDown(ev) {\n          if (jsc.eventKey(ev) === 'Enter') {\n            if (THIS.alphaElement) {\n              THIS.processAlphaInput(THIS.alphaElement.value);\n            }\n\n            THIS.tryHide();\n          }\n        }\n\n        function onValueChange(ev) {\n          if (jsc.getData(ev, 'internal')) {\n            return; // skip if the event was internally triggered by jscolor\n          }\n\n          var oldVal = THIS.valueElement.value;\n          THIS.processValueInput(THIS.valueElement.value); // this might change the value\n\n          jsc.triggerCallback(THIS, 'onChange');\n\n          if (THIS.valueElement.value !== oldVal) {\n            // value was additionally changed -> let's trigger the change event again, even though it was natively dispatched\n            jsc.triggerInputEvent(THIS.valueElement, 'change', true, true);\n          }\n        }\n\n        function onAlphaChange(ev) {\n          if (jsc.getData(ev, 'internal')) {\n            return; // skip if the event was internally triggered by jscolor\n          }\n\n          var oldVal = THIS.alphaElement.value;\n          THIS.processAlphaInput(THIS.alphaElement.value); // this might change the value\n\n          jsc.triggerCallback(THIS, 'onChange'); // triggering valueElement's onChange (because changing alpha changes the entire color, e.g. with rgba format)\n\n          jsc.triggerInputEvent(THIS.valueElement, 'change', true, true);\n\n          if (THIS.alphaElement.value !== oldVal) {\n            // value was additionally changed -> let's trigger the change event again, even though it was natively dispatched\n            jsc.triggerInputEvent(THIS.alphaElement, 'change', true, true);\n          }\n        }\n\n        function onValueInput(ev) {\n          if (jsc.getData(ev, 'internal')) {\n            return; // skip if the event was internally triggered by jscolor\n          }\n\n          if (THIS.valueElement) {\n            THIS.fromString(THIS.valueElement.value, jsc.flags.leaveValue);\n          }\n\n          jsc.triggerCallback(THIS, 'onInput'); // triggering valueElement's onInput\n          // (not needed, it was dispatched normally by the browser)\n        }\n\n        function onAlphaInput(ev) {\n          if (jsc.getData(ev, 'internal')) {\n            return; // skip if the event was internally triggered by jscolor\n          }\n\n          if (THIS.alphaElement) {\n            THIS.fromHSVA(null, null, null, parseFloat(THIS.alphaElement.value), jsc.flags.leaveAlpha);\n          }\n\n          jsc.triggerCallback(THIS, 'onInput'); // triggering valueElement's onInput (because changing alpha changes the entire color, e.g. with rgba format)\n\n          jsc.triggerInputEvent(THIS.valueElement, 'input', true, true);\n        } //\n        // Install the color picker on chosen element(s)\n        //\n        // Determine picker's container element\n\n\n        if (this.container === undefined) {\n          this.container = document.body; // default container is BODY element\n        } else {\n          // explicitly set to custom element\n          this.container = jsc.node(this.container);\n        }\n\n        if (!this.container) {\n          throw new Error('Cannot instantiate color picker without a container element');\n        } // Fetch the target element\n\n\n        this.targetElement = jsc.node(targetElement);\n\n        if (!this.targetElement) {\n          // temporarily customized error message to help with migrating from versions prior to 2.2\n          if (typeof targetElement === 'string' && /^[a-zA-Z][\\w:.-]*$/.test(targetElement)) {\n            // targetElement looks like valid ID\n            var possiblyId = targetElement;\n            throw new Error('If \\'' + possiblyId + '\\' is supposed to be an ID, please use \\'#' + possiblyId + '\\' or any valid CSS selector.');\n          }\n\n          throw new Error('Cannot instantiate color picker without a target element');\n        }\n\n        if (this.targetElement.jscolor && this.targetElement.jscolor instanceof jsc.pub) {\n          throw new Error('Color picker already installed on this element');\n        } // link this instance with the target element\n\n\n        this.targetElement.jscolor = this;\n        jsc.addClass(this.targetElement, jsc.pub.className); // register this instance\n\n        jsc.instances.push(this); // if target is BUTTON\n\n        if (jsc.isButton(this.targetElement)) {\n          if (this.targetElement.type.toLowerCase() !== 'button') {\n            // on buttons, always force type to be 'button', e.g. in situations the target <button> has no type\n            // and thus defaults to 'submit' and would submit the form when clicked\n            this.targetElement.type = 'button';\n          }\n\n          if (jsc.isButtonEmpty(this.targetElement)) {\n            // empty button\n            // it is important to clear element's contents first.\n            // if we're re-instantiating color pickers on DOM that has been modified by changing page's innerHTML,\n            // we would keep adding more non-breaking spaces to element's content (because element's contents survive\n            // innerHTML changes, but picker instances don't)\n            jsc.removeChildren(this.targetElement); // let's insert a non-breaking space\n\n            this.targetElement.appendChild(document.createTextNode('\\xa0')); // set min-width = previewSize, if not already greater\n\n            var compStyle = jsc.getCompStyle(this.targetElement);\n            var currMinWidth = parseFloat(compStyle['min-width']) || 0;\n\n            if (currMinWidth < this.previewSize) {\n              jsc.setStyle(this.targetElement, {\n                'min-width': this.previewSize + 'px'\n              }, this.forceStyle);\n            }\n          }\n        } // Determine the value element\n\n\n        if (this.valueElement === undefined) {\n          if (jsc.isTextInput(this.targetElement)) {\n            // for text inputs, default valueElement is targetElement\n            this.valueElement = this.targetElement;\n          } else {// leave it undefined\n          }\n        } else if (this.valueElement === null) {// explicitly set to null\n          // leave it null\n        } else {\n          // explicitly set to custom element\n          this.valueElement = jsc.node(this.valueElement);\n        } // Determine the alpha element\n\n\n        if (this.alphaElement) {\n          this.alphaElement = jsc.node(this.alphaElement);\n        } // Determine the preview element\n\n\n        if (this.previewElement === undefined) {\n          this.previewElement = this.targetElement; // default previewElement is targetElement\n        } else if (this.previewElement === null) {// explicitly set to null\n          // leave it null\n        } else {\n          // explicitly set to custom element\n          this.previewElement = jsc.node(this.previewElement);\n        } // valueElement\n\n\n        if (this.valueElement && jsc.isTextInput(this.valueElement)) {\n          // If the value element has onInput event already set, we need to detach it and attach AFTER our listener.\n          // otherwise the picker instance would still contain the old color when accessed from the onInput handler.\n          var valueElementOrigEvents = {\n            onInput: this.valueElement.oninput\n          };\n          this.valueElement.oninput = null;\n          this.valueElement.addEventListener('keydown', onValueKeyDown, false);\n          this.valueElement.addEventListener('change', onValueChange, false);\n          this.valueElement.addEventListener('input', onValueInput, false); // the original event listener must be attached AFTER our handler (to let it first set picker's color)\n\n          if (valueElementOrigEvents.onInput) {\n            this.valueElement.addEventListener('input', valueElementOrigEvents.onInput, false);\n          }\n\n          this.valueElement.setAttribute('autocomplete', 'off');\n          this.valueElement.setAttribute('autocorrect', 'off');\n          this.valueElement.setAttribute('autocapitalize', 'off');\n          this.valueElement.setAttribute('spellcheck', false);\n        } // alphaElement\n\n\n        if (this.alphaElement && jsc.isTextInput(this.alphaElement)) {\n          this.alphaElement.addEventListener('keydown', onAlphaKeyDown, false);\n          this.alphaElement.addEventListener('change', onAlphaChange, false);\n          this.alphaElement.addEventListener('input', onAlphaInput, false);\n          this.alphaElement.setAttribute('autocomplete', 'off');\n          this.alphaElement.setAttribute('autocorrect', 'off');\n          this.alphaElement.setAttribute('autocapitalize', 'off');\n          this.alphaElement.setAttribute('spellcheck', false);\n        } // determine initial color value\n        //\n\n\n        var initValue = 'FFFFFF';\n\n        if (this.value !== undefined) {\n          initValue = this.value; // get initial color from the 'value' property\n        } else if (this.valueElement && this.valueElement.value !== undefined) {\n          initValue = this.valueElement.value; // get initial color from valueElement's value\n        } // determine initial alpha value\n        //\n\n\n        var initAlpha = undefined;\n\n        if (this.alpha !== undefined) {\n          initAlpha = '' + this.alpha; // get initial alpha value from the 'alpha' property\n        } else if (this.alphaElement && this.alphaElement.value !== undefined) {\n          initAlpha = this.alphaElement.value; // get initial color from alphaElement's value\n        } // determine current format based on the initial color value\n        //\n\n\n        this._currentFormat = null;\n\n        if (['auto', 'any'].indexOf(this.format.toLowerCase()) > -1) {\n          // format is 'auto' or 'any' -> let's auto-detect current format\n          var color = jsc.parseColorString(initValue);\n          this._currentFormat = color ? color.format : 'hex';\n        } else {\n          // format is specified\n          this._currentFormat = this.format.toLowerCase();\n        } // let's parse the initial color value and expose color's preview\n\n\n        this.processValueInput(initValue); // let's also parse and expose the initial alpha value, if any\n        //\n        // Note: If the initial color value contains alpha value in it (e.g. in rgba format),\n        // this will overwrite it. So we should only process alpha input if there was any initial\n        // alpha explicitly set, otherwise we could needlessly lose initial value's alpha\n\n        if (initAlpha !== undefined) {\n          this.processAlphaInput(initAlpha);\n        }\n      }\n    }; //================================\n    // Public properties and methods\n    //================================\n    //\n    // These will be publicly available via jscolor.<name> and JSColor.<name>\n    //\n    // class that will be set to elements having jscolor installed on them\n\n    jsc.pub.className = 'jscolor'; // class that will be set to elements having jscolor active on them\n\n    jsc.pub.activeClassName = 'jscolor-active'; // whether to try to parse the options string by evaluating it using 'new Function()'\n    // in case it could not be parsed with JSON.parse()\n\n    jsc.pub.looseJSON = true; // presets\n\n    jsc.pub.presets = {}; // built-in presets\n\n    jsc.pub.presets['default'] = {}; // baseline for customization\n\n    jsc.pub.presets['light'] = {\n      // default color scheme\n      backgroundColor: 'rgba(255,255,255,1)',\n      controlBorderColor: 'rgba(187,187,187,1)',\n      buttonColor: 'rgba(0,0,0,1)'\n    };\n    jsc.pub.presets['dark'] = {\n      backgroundColor: 'rgba(51,51,51,1)',\n      controlBorderColor: 'rgba(153,153,153,1)',\n      buttonColor: 'rgba(240,240,240,1)'\n    };\n    jsc.pub.presets['small'] = {\n      width: 101,\n      height: 101,\n      padding: 10,\n      sliderSize: 14\n    };\n    jsc.pub.presets['medium'] = {\n      width: 181,\n      height: 101,\n      padding: 12,\n      sliderSize: 16\n    }; // default size\n\n    jsc.pub.presets['large'] = {\n      width: 271,\n      height: 151,\n      padding: 12,\n      sliderSize: 24\n    };\n    jsc.pub.presets['thin'] = {\n      borderWidth: 1,\n      controlBorderWidth: 1,\n      pointerBorderWidth: 1\n    }; // default thickness\n\n    jsc.pub.presets['thick'] = {\n      borderWidth: 2,\n      controlBorderWidth: 2,\n      pointerBorderWidth: 2\n    }; // size of space in the sliders\n\n    jsc.pub.sliderInnerSpace = 3; // px\n    // transparency chessboard\n\n    jsc.pub.chessboardSize = 8; // px\n\n    jsc.pub.chessboardColor1 = '#666666';\n    jsc.pub.chessboardColor2 = '#999999'; // preview separator\n\n    jsc.pub.previewSeparator = ['rgba(255,255,255,.65)', 'rgba(128,128,128,.65)']; // Installs jscolor on current DOM tree\n\n    jsc.pub.install = function (rootNode) {\n      var success = true;\n\n      try {\n        jsc.installBySelector('[data-jscolor]', rootNode);\n      } catch (e) {\n        success = false;\n        console.warn(e);\n      } // for backward compatibility with DEPRECATED installation using class name\n\n\n      if (jsc.pub.lookupClass) {\n        try {\n          jsc.installBySelector('input.' + jsc.pub.lookupClass + ', ' + 'button.' + jsc.pub.lookupClass, rootNode);\n        } catch (e) {}\n      }\n\n      return success;\n    }; // Triggers given input event(s) (e.g. 'input' or 'change') on all color pickers.\n    //\n    // It is possible to specify multiple events separated with a space.\n    // If called before jscolor is initialized, then the events will be triggered after initialization.\n    //\n\n\n    jsc.pub.trigger = function (eventNames) {\n      if (jsc.initialized) {\n        jsc.triggerGlobal(eventNames);\n      } else {\n        jsc.triggerQueue.push(eventNames);\n      }\n    }; // Hides current color picker box\n\n\n    jsc.pub.hide = function () {\n      if (jsc.picker && jsc.picker.owner) {\n        jsc.picker.owner.hide();\n      }\n    }; // Returns a data URL of a gray chessboard image that indicates transparency\n\n\n    jsc.pub.chessboard = function (color) {\n      if (!color) {\n        color = 'rgba(0,0,0,0)';\n      }\n\n      var preview = jsc.genColorPreviewCanvas(color);\n      return preview.canvas.toDataURL();\n    }; // Returns a data URL of a gray chessboard image that indicates transparency\n\n\n    jsc.pub.background = function (color) {\n      var backgrounds = []; // CSS gradient for background color preview\n\n      backgrounds.push(jsc.genColorPreviewGradient(color)); // data URL of generated PNG image with a gray transparency chessboard\n\n      var preview = jsc.genColorPreviewCanvas();\n      backgrounds.push(['url(\\'' + preview.canvas.toDataURL() + '\\')', 'left top', 'repeat'].join(' '));\n      return backgrounds.join(', ');\n    }; //\n    // DEPRECATED properties and methods\n    //\n    // DEPRECATED. Use jscolor.presets.default instead.\n    //\n    // Custom default options for all color pickers, e.g. { hash: true, width: 300 }\n\n\n    jsc.pub.options = {}; // DEPRECATED. Use data-jscolor attribute instead, which installs jscolor on given element.\n    //\n    // By default, we'll search for all elements with class=\"jscolor\" and install a color picker on them.\n    //\n    // You can change what class name will be looked for by setting the property jscolor.lookupClass\n    // anywhere in your HTML document. To completely disable the automatic lookup, set it to null.\n    //\n\n    jsc.pub.lookupClass = 'jscolor'; // DEPRECATED. Use jscolor.install() instead\n    //\n\n    jsc.pub.init = function () {\n      console.warn('jscolor.init() is DEPRECATED. Using jscolor.install() instead.' + jsc.docsRef);\n      return jsc.pub.install();\n    }; // DEPRECATED. Use data-jscolor attribute instead, which installs jscolor on given element.\n    //\n    // Install jscolor on all elements that have the specified class name\n\n\n    jsc.pub.installByClassName = function () {\n      console.error('jscolor.installByClassName() is DEPRECATED. Use data-jscolor=\"\" attribute instead of a class name.' + jsc.docsRef);\n      return false;\n    };\n\n    jsc.register();\n    return jsc.pub;\n  }(); // END window.jscolor\n\n\n  window.JSColor = window.jscolor; // 'JSColor' is an alias to 'jscolor'\n} // endif//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/jscolor.js\n");

/***/ }),

/***/ "./node_modules/lodash.throttle/index.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash.throttle/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.throttle/index.js\n");

/***/ }),

/***/ "./node_modules/nprogress/nprogress.js":
/*!*********************************************!*\
  !*** ./node_modules/nprogress/nprogress.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress\n * @license MIT */\n\n;(function(root, factory) {\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n})(this, function() {\n  var NProgress = {};\n\n  NProgress.version = '0.2.0';\n\n  var Settings = NProgress.settings = {\n    minimum: 0.08,\n    easing: 'ease',\n    positionUsing: '',\n    speed: 200,\n    trickle: true,\n    trickleRate: 0.02,\n    trickleSpeed: 800,\n    showSpinner: true,\n    barSelector: '[role=\"bar\"]',\n    spinnerSelector: '[role=\"spinner\"]',\n    parent: 'body',\n    template: '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n  };\n\n  /**\n   * Updates configuration.\n   *\n   *     NProgress.configure({\n   *       minimum: 0.1\n   *     });\n   */\n  NProgress.configure = function(options) {\n    var key, value;\n    for (key in options) {\n      value = options[key];\n      if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;\n    }\n\n    return this;\n  };\n\n  /**\n   * Last number.\n   */\n\n  NProgress.status = null;\n\n  /**\n   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.\n   *\n   *     NProgress.set(0.4);\n   *     NProgress.set(1.0);\n   */\n\n  NProgress.set = function(n) {\n    var started = NProgress.isStarted();\n\n    n = clamp(n, Settings.minimum, 1);\n    NProgress.status = (n === 1 ? null : n);\n\n    var progress = NProgress.render(!started),\n        bar      = progress.querySelector(Settings.barSelector),\n        speed    = Settings.speed,\n        ease     = Settings.easing;\n\n    progress.offsetWidth; /* Repaint */\n\n    queue(function(next) {\n      // Set positionUsing if it hasn't already been set\n      if (Settings.positionUsing === '') Settings.positionUsing = NProgress.getPositioningCSS();\n\n      // Add transition\n      css(bar, barPositionCSS(n, speed, ease));\n\n      if (n === 1) {\n        // Fade out\n        css(progress, { \n          transition: 'none', \n          opacity: 1 \n        });\n        progress.offsetWidth; /* Repaint */\n\n        setTimeout(function() {\n          css(progress, { \n            transition: 'all ' + speed + 'ms linear', \n            opacity: 0 \n          });\n          setTimeout(function() {\n            NProgress.remove();\n            next();\n          }, speed);\n        }, speed);\n      } else {\n        setTimeout(next, speed);\n      }\n    });\n\n    return this;\n  };\n\n  NProgress.isStarted = function() {\n    return typeof NProgress.status === 'number';\n  };\n\n  /**\n   * Shows the progress bar.\n   * This is the same as setting the status to 0%, except that it doesn't go backwards.\n   *\n   *     NProgress.start();\n   *\n   */\n  NProgress.start = function() {\n    if (!NProgress.status) NProgress.set(0);\n\n    var work = function() {\n      setTimeout(function() {\n        if (!NProgress.status) return;\n        NProgress.trickle();\n        work();\n      }, Settings.trickleSpeed);\n    };\n\n    if (Settings.trickle) work();\n\n    return this;\n  };\n\n  /**\n   * Hides the progress bar.\n   * This is the *sort of* the same as setting the status to 100%, with the\n   * difference being `done()` makes some placebo effect of some realistic motion.\n   *\n   *     NProgress.done();\n   *\n   * If `true` is passed, it will show the progress bar even if its hidden.\n   *\n   *     NProgress.done(true);\n   */\n\n  NProgress.done = function(force) {\n    if (!force && !NProgress.status) return this;\n\n    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);\n  };\n\n  /**\n   * Increments by a random amount.\n   */\n\n  NProgress.inc = function(amount) {\n    var n = NProgress.status;\n\n    if (!n) {\n      return NProgress.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);\n      }\n\n      n = clamp(n + amount, 0, 0.994);\n      return NProgress.set(n);\n    }\n  };\n\n  NProgress.trickle = function() {\n    return NProgress.inc(Math.random() * Settings.trickleRate);\n  };\n\n  /**\n   * Waits for all supplied jQuery promises and\n   * increases the progress as the promises resolve.\n   *\n   * @param $promise jQUery Promise\n   */\n  (function() {\n    var initial = 0, current = 0;\n\n    NProgress.promise = function($promise) {\n      if (!$promise || $promise.state() === \"resolved\") {\n        return this;\n      }\n\n      if (current === 0) {\n        NProgress.start();\n      }\n\n      initial++;\n      current++;\n\n      $promise.always(function() {\n        current--;\n        if (current === 0) {\n            initial = 0;\n            NProgress.done();\n        } else {\n            NProgress.set((initial - current) / initial);\n        }\n      });\n\n      return this;\n    };\n\n  })();\n\n  /**\n   * (Internal) renders the progress bar markup based on the `template`\n   * setting.\n   */\n\n  NProgress.render = function(fromStart) {\n    if (NProgress.isRendered()) return document.getElementById('nprogress');\n\n    addClass(document.documentElement, 'nprogress-busy');\n    \n    var progress = document.createElement('div');\n    progress.id = 'nprogress';\n    progress.innerHTML = Settings.template;\n\n    var bar      = progress.querySelector(Settings.barSelector),\n        perc     = fromStart ? '-100' : toBarPerc(NProgress.status || 0),\n        parent   = document.querySelector(Settings.parent),\n        spinner;\n    \n    css(bar, {\n      transition: 'all 0 linear',\n      transform: 'translate3d(' + perc + '%,0,0)'\n    });\n\n    if (!Settings.showSpinner) {\n      spinner = progress.querySelector(Settings.spinnerSelector);\n      spinner && removeElement(spinner);\n    }\n\n    if (parent != document.body) {\n      addClass(parent, 'nprogress-custom-parent');\n    }\n\n    parent.appendChild(progress);\n    return progress;\n  };\n\n  /**\n   * Removes the element. Opposite of render().\n   */\n\n  NProgress.remove = function() {\n    removeClass(document.documentElement, 'nprogress-busy');\n    removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');\n    var progress = document.getElementById('nprogress');\n    progress && removeElement(progress);\n  };\n\n  /**\n   * Checks if the progress bar is rendered.\n   */\n\n  NProgress.isRendered = function() {\n    return !!document.getElementById('nprogress');\n  };\n\n  /**\n   * Determine which positioning CSS rule to use.\n   */\n\n  NProgress.getPositioningCSS = function() {\n    // Sniff on document.body.style\n    var bodyStyle = document.body.style;\n\n    // Sniff prefixes\n    var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' :\n                       ('MozTransform' in bodyStyle) ? 'Moz' :\n                       ('msTransform' in bodyStyle) ? 'ms' :\n                       ('OTransform' in bodyStyle) ? 'O' : '';\n\n    if (vendorPrefix + 'Perspective' in bodyStyle) {\n      // Modern browsers with 3D support, e.g. Webkit, IE10\n      return 'translate3d';\n    } else if (vendorPrefix + 'Transform' in bodyStyle) {\n      // Browsers without 3D support, e.g. IE9\n      return 'translate';\n    } else {\n      // Browsers without translate() support, e.g. IE7-8\n      return 'margin';\n    }\n  };\n\n  /**\n   * Helpers\n   */\n\n  function clamp(n, min, max) {\n    if (n < min) return min;\n    if (n > max) return max;\n    return n;\n  }\n\n  /**\n   * (Internal) converts a percentage (`0..1`) to a bar translateX\n   * percentage (`-100%..0%`).\n   */\n\n  function toBarPerc(n) {\n    return (-1 + n) * 100;\n  }\n\n\n  /**\n   * (Internal) returns the correct CSS for changing the bar's\n   * position given an n percentage, and speed and ease from Settings\n   */\n\n  function barPositionCSS(n, speed, ease) {\n    var barCSS;\n\n    if (Settings.positionUsing === 'translate3d') {\n      barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' };\n    } else if (Settings.positionUsing === 'translate') {\n      barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' };\n    } else {\n      barCSS = { 'margin-left': toBarPerc(n)+'%' };\n    }\n\n    barCSS.transition = 'all '+speed+'ms '+ease;\n\n    return barCSS;\n  }\n\n  /**\n   * (Internal) Queues a function to be executed.\n   */\n\n  var queue = (function() {\n    var pending = [];\n    \n    function next() {\n      var fn = pending.shift();\n      if (fn) {\n        fn(next);\n      }\n    }\n\n    return function(fn) {\n      pending.push(fn);\n      if (pending.length == 1) next();\n    };\n  })();\n\n  /**\n   * (Internal) Applies css properties to an element, similar to the jQuery \n   * css method.\n   *\n   * While this helper does assist with vendor prefixed property names, it \n   * does not perform any manipulation of values prior to setting styles.\n   */\n\n  var css = (function() {\n    var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ],\n        cssProps    = {};\n\n    function camelCase(string) {\n      return string.replace(/^-ms-/, 'ms-').replace(/-([\\da-z])/gi, function(match, letter) {\n        return letter.toUpperCase();\n      });\n    }\n\n    function getVendorProp(name) {\n      var style = document.body.style;\n      if (name in style) return name;\n\n      var i = cssPrefixes.length,\n          capName = name.charAt(0).toUpperCase() + name.slice(1),\n          vendorName;\n      while (i--) {\n        vendorName = cssPrefixes[i] + capName;\n        if (vendorName in style) return vendorName;\n      }\n\n      return name;\n    }\n\n    function getStyleProp(name) {\n      name = camelCase(name);\n      return cssProps[name] || (cssProps[name] = getVendorProp(name));\n    }\n\n    function applyCss(element, prop, value) {\n      prop = getStyleProp(prop);\n      element.style[prop] = value;\n    }\n\n    return function(element, properties) {\n      var args = arguments,\n          prop, \n          value;\n\n      if (args.length == 2) {\n        for (prop in properties) {\n          value = properties[prop];\n          if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);\n        }\n      } else {\n        applyCss(element, args[1], args[2]);\n      }\n    }\n  })();\n\n  /**\n   * (Internal) Determines if an element or space separated list of class names contains a class name.\n   */\n\n  function hasClass(element, name) {\n    var list = typeof element == 'string' ? element : classList(element);\n    return list.indexOf(' ' + name + ' ') >= 0;\n  }\n\n  /**\n   * (Internal) Adds a class to an element.\n   */\n\n  function addClass(element, name) {\n    var oldList = classList(element),\n        newList = oldList + name;\n\n    if (hasClass(oldList, name)) return; \n\n    // Trim the opening space.\n    element.className = newList.substring(1);\n  }\n\n  /**\n   * (Internal) Removes a class from an element.\n   */\n\n  function removeClass(element, name) {\n    var oldList = classList(element),\n        newList;\n\n    if (!hasClass(element, name)) return;\n\n    // Replace the class name.\n    newList = oldList.replace(' ' + name + ' ', ' ');\n\n    // Trim the opening and closing spaces.\n    element.className = newList.substring(1, newList.length - 1);\n  }\n\n  /**\n   * (Internal) Gets a space separated list of the class names on the element. \n   * The list is wrapped with a single space on each end to facilitate finding \n   * matches within the list.\n   */\n\n  function classList(element) {\n    return (' ' + (element.className || '') + ' ').replace(/\\s+/gi, ' ');\n  }\n\n  /**\n   * (Internal) Removes an element from the DOM.\n   */\n\n  function removeElement(element) {\n    element && element.parentNode && element.parentNode.removeChild(element);\n  }\n\n  return NProgress;\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/nprogress/nprogress.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ 0:
/*!*************************!*\
  !*** multi ./js/app.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./js/app.js */"./js/app.js");


/***/ })

/******/ });